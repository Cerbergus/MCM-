(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    846901,      17818]
NotebookOptionsPosition[    833959,      17596]
NotebookOutlinePosition[    834418,      17614]
CellTagsIndexPosition[    834375,      17611]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"a", " ", 
      RowBox[{"x", "^", "2"}]}], "+", 
     RowBox[{"b", " ", "x"}], "+", "c"}], "==", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9344657733309984`*^9, 3.9344657886975203`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"ca7f3325-e696-495c-9d90-ea9805352196"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "b"}], "-", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
      RowBox[{"2", " ", "a"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "b"}], "+", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
      RowBox[{"2", " ", "a"}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9344658173497887`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"f49b3757-c507-4b92-9e42-0889c411e73c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"d", " ", 
      RowBox[{"x", "^", "3"}]}], "+", 
     RowBox[{"a", " ", 
      RowBox[{"x", "^", "2"}]}], "+", 
     RowBox[{"b", " ", "x"}], "+", "c"}], "==", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9344657733309984`*^9, 3.9344657886975203`*^9}, {
  3.93446582899542*^9, 3.934465833934685*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"7af1ab7c-bf16-430a-9a0b-762ccad51319"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["a", 
        RowBox[{"3", " ", "d"}]]}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["2", 
          RowBox[{"1", "/", "3"}]], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["a", "2"]}], "+", 
           RowBox[{"3", " ", "b", " ", "d"}]}], ")"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"3", " ", "d", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", 
             SuperscriptBox["a", "3"]}], "+", 
            RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
            RowBox[{"27", " ", "c", " ", 
             SuperscriptBox["d", "2"]}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{"4", " ", 
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   SuperscriptBox["a", "2"]}], "+", 
                  RowBox[{"3", " ", "b", " ", "d"}]}], ")"}], "3"]}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "2"}], " ", 
                  SuperscriptBox["a", "3"]}], "+", 
                 RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
                 RowBox[{"27", " ", "c", " ", 
                  SuperscriptBox["d", "2"]}]}], ")"}], "2"]}]]}], ")"}], 
          RowBox[{"1", "/", "3"}]]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", 
        RowBox[{"3", " ", 
         SuperscriptBox["2", 
          RowBox[{"1", "/", "3"}]], " ", "d"}]], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "2"}], " ", 
           SuperscriptBox["a", "3"]}], "+", 
          RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
          RowBox[{"27", " ", "c", " ", 
           SuperscriptBox["d", "2"]}], "+", 
          SqrtBox[
           RowBox[{
            RowBox[{"4", " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", 
                 SuperscriptBox["a", "2"]}], "+", 
                RowBox[{"3", " ", "b", " ", "d"}]}], ")"}], "3"]}], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], " ", 
                SuperscriptBox["a", "3"]}], "+", 
               RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
               RowBox[{"27", " ", "c", " ", 
                SuperscriptBox["d", "2"]}]}], ")"}], "2"]}]]}], ")"}], 
        RowBox[{"1", "/", "3"}]]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["a", 
        RowBox[{"3", " ", "d"}]]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"\[ImaginaryI]", " ", 
            SqrtBox["3"]}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["a", "2"]}], "+", 
           RowBox[{"3", " ", "b", " ", "d"}]}], ")"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"3", " ", 
         SuperscriptBox["2", 
          RowBox[{"2", "/", "3"}]], " ", "d", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", 
             SuperscriptBox["a", "3"]}], "+", 
            RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
            RowBox[{"27", " ", "c", " ", 
             SuperscriptBox["d", "2"]}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{"4", " ", 
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   SuperscriptBox["a", "2"]}], "+", 
                  RowBox[{"3", " ", "b", " ", "d"}]}], ")"}], "3"]}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "2"}], " ", 
                  SuperscriptBox["a", "3"]}], "+", 
                 RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
                 RowBox[{"27", " ", "c", " ", 
                  SuperscriptBox["d", "2"]}]}], ")"}], "2"]}]]}], ")"}], 
          RowBox[{"1", "/", "3"}]]}], ")"}]}], "-", 
      RowBox[{
       FractionBox["1", 
        RowBox[{"6", " ", 
         SuperscriptBox["2", 
          RowBox[{"1", "/", "3"}]], " ", "d"}]], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", 
            SuperscriptBox["a", "3"]}], "+", 
           RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
           RowBox[{"27", " ", "c", " ", 
            SuperscriptBox["d", "2"]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{"4", " ", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", 
                  SuperscriptBox["a", "2"]}], "+", 
                 RowBox[{"3", " ", "b", " ", "d"}]}], ")"}], "3"]}], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "2"}], " ", 
                 SuperscriptBox["a", "3"]}], "+", 
                RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
                RowBox[{"27", " ", "c", " ", 
                 SuperscriptBox["d", "2"]}]}], ")"}], "2"]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["a", 
        RowBox[{"3", " ", "d"}]]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"\[ImaginaryI]", " ", 
            SqrtBox["3"]}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["a", "2"]}], "+", 
           RowBox[{"3", " ", "b", " ", "d"}]}], ")"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"3", " ", 
         SuperscriptBox["2", 
          RowBox[{"2", "/", "3"}]], " ", "d", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", 
             SuperscriptBox["a", "3"]}], "+", 
            RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
            RowBox[{"27", " ", "c", " ", 
             SuperscriptBox["d", "2"]}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{"4", " ", 
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   SuperscriptBox["a", "2"]}], "+", 
                  RowBox[{"3", " ", "b", " ", "d"}]}], ")"}], "3"]}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "2"}], " ", 
                  SuperscriptBox["a", "3"]}], "+", 
                 RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
                 RowBox[{"27", " ", "c", " ", 
                  SuperscriptBox["d", "2"]}]}], ")"}], "2"]}]]}], ")"}], 
          RowBox[{"1", "/", "3"}]]}], ")"}]}], "-", 
      RowBox[{
       FractionBox["1", 
        RowBox[{"6", " ", 
         SuperscriptBox["2", 
          RowBox[{"1", "/", "3"}]], " ", "d"}]], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", 
            SuperscriptBox["a", "3"]}], "+", 
           RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
           RowBox[{"27", " ", "c", " ", 
            SuperscriptBox["d", "2"]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{"4", " ", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", 
                  SuperscriptBox["a", "2"]}], "+", 
                 RowBox[{"3", " ", "b", " ", "d"}]}], ")"}], "3"]}], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "2"}], " ", 
                 SuperscriptBox["a", "3"]}], "+", 
                RowBox[{"9", " ", "a", " ", "b", " ", "d"}], "-", 
                RowBox[{"27", " ", "c", " ", 
                 SuperscriptBox["d", "2"]}]}], ")"}], "2"]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.934465835165842*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"174784f6-fd67-4ddd-96f7-a6a953c411bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"a", " ", 
        RowBox[{"t", "^", "2"}]}], "+", 
       RowBox[{"m", " ", "t"}], "+", "c"}], "==", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"m", "^", "2"}], "-", "1"}], "==", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "m"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.934465917996928*^9, 3.9344659560358047`*^9}, {
  3.9344659861138277`*^9, 3.9344659889969325`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"422b3ee0-529e-44f5-9734-662fe513e971"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"t", "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        SqrtBox[
         RowBox[{"1", "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]]}], ",", 
     RowBox[{"m", "\[Rule]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"t", "\[Rule]", 
      FractionBox[
       RowBox[{"1", "-", 
        SqrtBox[
         RowBox[{"1", "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]]}], ",", 
     RowBox[{"m", "\[Rule]", 
      RowBox[{"-", "1"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"t", "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SqrtBox[
         RowBox[{"1", "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]]}], ",", 
     RowBox[{"m", "\[Rule]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"t", "\[Rule]", 
      FractionBox[
       RowBox[{"1", "+", 
        SqrtBox[
         RowBox[{"1", "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]]}], ",", 
     RowBox[{"m", "\[Rule]", 
      RowBox[{"-", "1"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.934465960832483*^9, 3.934465991465635*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"f1ed3a9b-a3f0-491f-af12-12b5179757e1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"log", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.9344660085757146`*^9, 3.934466028817113*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"57af6377-c7c0-4265-a295-f068f3b2424c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  SuperscriptBox["log", "\[Prime]",
   MultilineFunction->None], "[", "t", "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"log", "[", "t", "]"}], ",", "t"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9344660479733963`*^9, 3.934466048636941*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"8c3aa1cd-f610-4e21-80bf-90a0e6e743ca"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["log", "\[Prime]",
   MultilineFunction->None], "[", "t", "]"}]], "Output",
 CellChangeTimes->{3.9344660504885607`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"587c1e6d-a346-44e2-87da-51ffd9d78143"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["log", "\[Prime]",
   MultilineFunction->None], "[", "t", "]"}]], "Output",
 CellChangeTimes->{3.9344660504905586`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"08f30950-ac27-47c5-832a-714c5aa01788"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.934466059194317*^9, 
  3.9344660605889196`*^9}},ExpressionUUID->"0c3597fc-97d5-49c1-b7f5-\
d6e6ba576d02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t", "=", "3"}]], "Input",
 CellChangeTimes->{{3.9344660407721653`*^9, 3.934466042918769*^9}, {
  3.934466088115982*^9, 3.934466088299099*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"48fbfb02-16f8-4c10-a360-143bfe5cfa50"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.9344660888888397`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"e557a7c4-4489-4a0b-a7f1-a28764da6ca0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t", "=", "3"}]], "Input",
 CellChangeTimes->{{3.9344660921981955`*^9, 3.9344660939152627`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"17b68f34-b87a-4d70-92fa-25f481a68e4a"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.934466094577985*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"322efdf3-bbe8-46c2-a0c4-db5671430f61"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"Log", "[", "t", "]"}], ",", "t"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"t", "=", "3"}]}], "Input",
 CellChangeTimes->{{3.9344660766441383`*^9, 3.934466099947129*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"c17f2e26-442a-426b-b084-e0fb3e2aeda3"],

Cell[BoxData[
 TemplateBox[{
  "D", "ivar", 
   "\"\\!\\(\\*RowBox[{\\\"3\\\"}]\\) \:4e0d\:662f\:4e00\:4e2a\:6709\:6548\
\:7684\:53d8\:91cf.\"", 2, 13, 2, 18888979332843712532, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.934466100482004*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[13]:=",ExpressionUUID->"8911c986-dc7d-46c4-b67f-\
de158a6d08f3"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "3"], 
  RowBox[{"Log", "[", "3", "]"}]}]], "Output",
 CellChangeTimes->{{3.9344660657715473`*^9, 3.9344661004895315`*^9}},
 CellLabel->"Out[13]=",ExpressionUUID->"dae606b1-9d13-4d86-8c28-afc36cda5c85"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.9344660657715473`*^9, 3.934466100490531*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"001d0e1c-f558-4881-b077-acd468c4ef5b"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.93446610811569*^9, 
  3.934466117901223*^9}},ExpressionUUID->"b29b30dd-9a1d-482d-85ae-\
9c48a3702958"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"t", "=", "3"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"Log", "[", "t", "]"}], ",", "t"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9344661209262023`*^9, 3.9344661391171637`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"1b7b6e3d-ebc2-498c-bc9d-f0fb8e700a89"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.9344661405317183`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"812e81b2-5215-4de3-8639-376d6edc02c5"],

Cell[BoxData[
 TemplateBox[{
  "D", "ivar", 
   "\"\\!\\(\\*RowBox[{\\\"3\\\"}]\\) \:4e0d\:662f\:4e00\:4e2a\:6709\:6548\
\:7684\:53d8\:91cf.\"", 2, 16, 3, 18888979332843712532, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.934466140534698*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[15]:=",ExpressionUUID->"cd502a83-3d4f-400c-8d2e-\
09412667c251"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "3"], 
  RowBox[{"Log", "[", "3", "]"}]}]], "Output",
 CellChangeTimes->{3.934466140541232*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"89643e52-8f92-4c39-938a-774469b250ff"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.934466111545898*^9, 
  3.934466112407628*^9}},ExpressionUUID->"8ed2e3c8-aa5c-452b-a951-\
415fe9a22009"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Log", "[", "t", "]"}], "*", 
    RowBox[{"E", "^", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"t", "^", "2"}], "+", 
       RowBox[{"Sin", "[", 
        RowBox[{"t", "^", "2"}], "]"}]}], ")"}]}]}], ",", "t"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9344661515782247`*^9, 3.9344662132009974`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"86e7c17a-a1a8-4446-86c3-99a6d929f428"],

Cell[BoxData[
 TemplateBox[{
  "D", "ivar", 
   "\"\\!\\(\\*RowBox[{\\\"3\\\"}]\\) \:4e0d\:662f\:4e00\:4e2a\:6709\:6548\
\:7684\:53d8\:91cf.\"", 2, 17, 4, 18888979332843712532, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.934466217069358*^9},
 CellLabel->
  "\:6b63\:5728\:8ba1\:7b97In[17]:=",ExpressionUUID->"ab568649-36a5-4734-81ec-\
7cdcff84b010"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "3"], 
  RowBox[{"(", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"9", "+", 
      RowBox[{"Sin", "[", "9", "]"}]}]], " ", 
    RowBox[{"Log", "[", "3", "]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.934466217076376*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"aa89226a-7cca-4622-9e83-b6bab30f98e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"t", "=."}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Log", "[", "t", "]"}], "*", 
    RowBox[{"E", "^", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"t", "^", "2"}], "+", 
       RowBox[{"Sin", "[", 
        RowBox[{"t", "^", "2"}], "]"}]}], ")"}]}]}], ",", "t"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.9344662658587837`*^9, 3.934466270702239*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"698a6821-a5dd-4833-a3a6-d8388b2cefb5"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     SuperscriptBox["t", "2"], "+", 
     RowBox[{"Sin", "[", 
      SuperscriptBox["t", "2"], "]"}]}]], "t"], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     SuperscriptBox["t", "2"], "+", 
     RowBox[{"Sin", "[", 
      SuperscriptBox["t", "2"], "]"}]}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", " ", "t"}], "+", 
     RowBox[{"2", " ", "t", " ", 
      RowBox[{"Cos", "[", 
       SuperscriptBox["t", "2"], "]"}]}]}], ")"}], " ", 
   RowBox[{"Log", "[", "t", "]"}]}]}]], "Output",
 CellChangeTimes->{3.934466271798845*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"cd23785d-03fe-41ec-b529-12ceb78d9874"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"t", "/", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"a", " ", 
        RowBox[{"t", "^", "2"}]}], "+", 
       RowBox[{"b", " ", "t"}], "+", "c"}], ")"}]}], "*", 
    RowBox[{"E", "^", "t"}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.9344663389485264`*^9, 3.934466413727289*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"b7f87942-d0fb-410b-8a5a-6c24d004ec5b"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{"2", " ", "a", " ", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["b", "2"], "-", 
      RowBox[{"4", " ", "a", " ", "c"}]}]]}]], 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"b", "+", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
      RowBox[{"2", " ", "a"}]]}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "b"}], "+", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], ")"}], " ", 
      SuperscriptBox["\[ExponentialE]", 
       FractionBox[
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]], "a"]], " ", 
      RowBox[{"ExpIntegralEi", "[", 
       RowBox[{
        FractionBox[
         RowBox[{"b", "-", 
          SqrtBox[
           RowBox[{
            SuperscriptBox["b", "2"], "-", 
            RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
         RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"b", "+", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], ")"}], " ", 
      RowBox[{"ExpIntegralEi", "[", 
       RowBox[{
        FractionBox[
         RowBox[{"b", "+", 
          SqrtBox[
           RowBox[{
            SuperscriptBox["b", "2"], "-", 
            RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
         RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.9344663731482744`*^9, 3.9344664150665827`*^9}},
 CellLabel->"Out[22]=",ExpressionUUID->"42779631-2a67-48b7-9fae-7797bb1c3454"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"2", " ", "a", " ", 
     SqrtBox[
      RowBox[{
       SuperscriptBox["b", "2"], "-", 
       RowBox[{"4", " ", "a", " ", "c"}]}]]}]], 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"b", "+", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]]}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "b"}], "+", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["b", "2"], "-", 
           RowBox[{"4", " ", "a", " ", "c"}]}]]}], ")"}], " ", 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox[
         SqrtBox[
          RowBox[{
           SuperscriptBox["b", "2"], "-", 
           RowBox[{"4", " ", "a", " ", "c"}]}]], "a"]], " ", 
       RowBox[{"ExpIntegralEi", "[", 
        RowBox[{
         FractionBox[
          RowBox[{"b", "-", 
           SqrtBox[
            RowBox[{
             SuperscriptBox["b", "2"], "-", 
             RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
          RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"b", "+", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["b", "2"], "-", 
           RowBox[{"4", " ", "a", " ", "c"}]}]]}], ")"}], " ", 
       RowBox[{"ExpIntegralEi", "[", 
        RowBox[{
         FractionBox[
          RowBox[{"b", "+", 
           SqrtBox[
            RowBox[{
             SuperscriptBox["b", "2"], "-", 
             RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
          RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}]}], ")"}]}]}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[23]:=",ExpressionUUID->"304afa32-74ce-41b7-a0b4-4e4d01d6ce61"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["b", 
        RowBox[{"2", " ", "a"}]]}], "+", 
      FractionBox[
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]], 
       RowBox[{"2", " ", "a"}]]}]], " ", 
    RowBox[{"ExpIntegralEi", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"b", "-", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}], 
   RowBox[{"2", " ", "a"}]], "-", 
  FractionBox[
   RowBox[{"b", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["b", 
        RowBox[{"2", " ", "a"}]]}], "+", 
      FractionBox[
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]], 
       RowBox[{"2", " ", "a"}]]}]], " ", 
    RowBox[{"ExpIntegralEi", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"b", "-", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}], 
   RowBox[{"2", " ", "a", " ", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["b", "2"], "-", 
      RowBox[{"4", " ", "a", " ", "c"}]}]]}]], "+", 
  FractionBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["b", 
        RowBox[{"2", " ", "a"}]]}], "-", 
      FractionBox[
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]], 
       RowBox[{"2", " ", "a"}]]}]], " ", 
    RowBox[{"ExpIntegralEi", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"b", "+", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}], 
   RowBox[{"2", " ", "a"}]], "+", 
  FractionBox[
   RowBox[{"b", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["b", 
        RowBox[{"2", " ", "a"}]]}], "-", 
      FractionBox[
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]], 
       RowBox[{"2", " ", "a"}]]}]], " ", 
    RowBox[{"ExpIntegralEi", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"b", "+", 
        SqrtBox[
         RowBox[{
          SuperscriptBox["b", "2"], "-", 
          RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
       RowBox[{"2", " ", "a"}]], "+", "t"}], "]"}]}], 
   RowBox[{"2", " ", "a", " ", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["b", "2"], "-", 
      RowBox[{"4", " ", "a", " ", "c"}]}]]}]]}]], "Output",
 CellChangeTimes->{3.9344664455779104`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"db70f18a-b905-49d1-9934-3047ad1295b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{"1", "-", "x"}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.93446648318896*^9, 3.934466542003025*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"09834fc6-2867-4de2-a4cb-e9b0fa4e5243"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"1", "+", "x", "+", 
   SuperscriptBox["x", "2"], "+", 
   SuperscriptBox["x", "3"], "+", 
   SuperscriptBox["x", "4"], "+", 
   SuperscriptBox["x", "5"], "+", 
   SuperscriptBox["x", "6"], "+", 
   SuperscriptBox["x", "7"], "+", 
   SuperscriptBox["x", "8"], "+", 
   SuperscriptBox["x", "9"], "+", 
   SuperscriptBox["x", "10"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "11"],
    SeriesData[$CellContext`x, 0, {}, 0, 11, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 0, 11, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.934466542798871*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"2bd5e813-e6df-4d21-a214-cb1a1cb01187"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], "-", "x"}], ")"}], "/", 
    RowBox[{"x", "^", "3"}]}], ",", 
   RowBox[{"x", "->", "0"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9344676091414776`*^9, 3.9344676900294294`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"d1ba375b-aa8f-417c-8fc9-1e60985c8e5b"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", "6"]}]], "Output",
 CellChangeTimes->{{3.9344676435617423`*^9, 3.9344676906287003`*^9}},
 CellLabel->"Out[27]=",ExpressionUUID->"abdcc194-06cd-413e-a880-0736da8f7348"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", "a_", "]"}], ":=", 
  RowBox[{
   RowBox[{"a", "^", "2"}], "-", "a"}]}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", "3", "]"}]}], "Input",
 CellChangeTimes->{{3.9344677789134912`*^9, 3.9344678281407857`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"a794e6d1-4899-4d09-b66f-86a37def7a2c"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{{3.934467812136589*^9, 3.9344678286359873`*^9}},
 CellLabel->"Out[34]=",ExpressionUUID->"80387a96-121d-4156-a6b7-38e614d7a889"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"f1", "[", "x", "]"}], ",", "x"}], "]"}], "+", 
     RowBox[{"x", "^", "2"}], "-", "x", "+", 
     RowBox[{"f1", "[", "x", "]"}]}], "==", "0"}], ",", 
   RowBox[{"f1", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.934468008616583*^9, 3.9344680978412275`*^9}, 
   3.934468132072981*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"a5a08a4a-9797-43fe-81f9-0d099551ed4d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"f1", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", "3"}], "+", 
     RowBox[{"3", " ", "x"}], "-", 
     SuperscriptBox["x", "2"], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "x"}]], " ", 
      TemplateBox[{"1"},
       "C"]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.9344681339688425`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"2967192d-dad1-4520-a150-2f344f01076e"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9344678737089176`*^9, 3.9344679823733196`*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"38e6b5db-d43b-4123-9f04-a22981a7dc5e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{"Sin", "[", 
   RowBox[{
    RowBox[{"a", "/", "b"}], " ", "Pi"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"B", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{
        RowBox[{"i", "+", "1"}], ",", "j"}], "]"}], "+", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"B", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.9344682903805327`*^9, 3.934468316678467*^9}, {
  3.934470226014965*^9, 3.9344702810035353`*^9}, {3.9344703575512247`*^9, 
  3.9344703689582787`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"7d992ff1-42ab-426c-b8d3-0f278bdf03dd"],

Cell[CellGroupData[{

Cell[BoxData[{
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "2", 
      RowBox[{"2", "+", 
       FractionBox[
        SqrtBox["3"], "2"]}]},
     {"2", "1", "2"},
     {"2", "2", 
      RowBox[{"2", "-", 
       FractionBox[
        SqrtBox["3"], "2"]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
 RowBox[{"B", "//", "Length"}]}], "Input",
 CellChangeTimes->{{3.93447038101657*^9, 3.9344703850180693`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"0d17b657-b397-442e-802a-0bdfaddb6363"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", 
     RowBox[{"2", "+", 
      FractionBox[
       SqrtBox["3"], "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", 
     RowBox[{"2", "-", 
      FractionBox[
       SqrtBox["3"], "2"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9344703854908156`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"97bb15db-2c9a-4070-8491-a26c084402b0"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.934470385494487*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"5c827ac8-2741-485b-8bea-016875d54967"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"B", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.934470906623351*^9, 3.9344709248746977`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"c014e452-14e8-4bbb-9ab6-5b3ececfab89"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.934470928820585*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"243999b1-b577-46ab-baa6-dc48a6faaddc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"B", "[", 
   RowBox[{"[", 
    RowBox[{"3", ",", ";;"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.9344705087966747`*^9, {3.9344709517587814`*^9, 3.934470958560444*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"343d3c44-d64c-4870-a6b3-d59d856107be"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "2", ",", 
   RowBox[{"2", "-", 
    FractionBox[
     SqrtBox["3"], "2"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.934470959306138*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"02d871cb-5565-413f-b205-36a19a21378e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"B", "[", 
  RowBox[{"[", 
   RowBox[{";;", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.934470968545765*^9, 3.934470973891046*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"e985a579-a7bc-40e2-add2-35591dee9f93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"2", "+", 
    FractionBox[
     SqrtBox["3"], "2"]}], ",", "2", ",", 
   RowBox[{"2", "-", 
    FractionBox[
     SqrtBox["3"], "2"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.934470974779749*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"cdcef32c-eaec-4fb6-9c76-69fc253ca57b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"i", ",", "j"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"A", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.934471079925417*^9, 3.934471133229611*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"71e51058-fb2a-4acb-b5bc-db52427c837c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "1", 
      FractionBox[
       SqrtBox["3"], "2"]},
     {"0", "0", 
      FractionBox[
       SqrtBox["3"], "2"]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.934471119597412*^9, 3.9344711339435577`*^9}},
 CellLabel->
  "Out[51]//MatrixForm=",ExpressionUUID->"b9f8b2d9-0bfc-4a45-af6e-\
196f69f07e27"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"A", ".", "B"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.934471136256863*^9, 3.934471146761628*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"af96acb9-b946-452a-8fec-20089a745757"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"2", "+", 
       SqrtBox["3"]}], 
      RowBox[{"1", "+", 
       SqrtBox["3"]}], 
      RowBox[{"2", "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SqrtBox["3"], " ", 
        RowBox[{"(", 
         RowBox[{"2", "-", 
          FractionBox[
           SqrtBox["3"], "2"]}], ")"}]}]}]},
     {
      SqrtBox["3"], 
      SqrtBox["3"], 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SqrtBox["3"], " ", 
       RowBox[{"(", 
        RowBox[{"2", "-", 
         FractionBox[
          SqrtBox["3"], "2"]}], ")"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.9344711430089903`*^9, 3.934471147437112*^9}},
 CellLabel->
  "Out[53]//MatrixForm=",ExpressionUUID->"77f6be6b-7c3c-4f68-900f-\
4eb07d58ac92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvalues", "[", "B", "]"}]], "Input",
 CellChangeTimes->{{3.934471162765735*^9, 3.934471168439182*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"71590312-97f8-4caf-992f-1207f9ebfa2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"5", "+", 
      SqrtBox["41"]}], ")"}]}], ",", 
   RowBox[{"-", 
    FractionBox[
     SqrtBox["3"], "2"]}], ",", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"5", "-", 
      SqrtBox["41"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.9344711688933444`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"95f2a459-316e-4b36-b1cd-fc680cb1afeb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"Eigenvectors", "[", "B", "]"}]}]], "Input",
 CellChangeTimes->{{3.9344711706287303`*^9, 3.9344711781100197`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"749b86ae-20e1-45e3-9923-5072fff22752"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "28"}], "-", 
        RowBox[{"3", " ", 
         SqrtBox["3"]}], "-", 
        RowBox[{"4", " ", 
         SqrtBox["41"]}], "-", 
        SqrtBox["123"]}], 
       RowBox[{"4", " ", 
        RowBox[{"(", 
         RowBox[{"7", "+", 
          SqrtBox["41"]}], ")"}]}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "5"}], "-", 
        SqrtBox["3"], "-", 
        SqrtBox["41"]}], 
       RowBox[{"7", "+", 
        SqrtBox["41"]}]]}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"28", "+", 
        RowBox[{"3", " ", 
         SqrtBox["3"]}], "-", 
        RowBox[{"4", " ", 
         SqrtBox["41"]}], "-", 
        SqrtBox["123"]}], 
       RowBox[{"4", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "7"}], "+", 
          SqrtBox["41"]}], ")"}]}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"5", "+", 
        SqrtBox["3"], "-", 
        SqrtBox["41"]}], 
       RowBox[{
        RowBox[{"-", "7"}], "+", 
        SqrtBox["41"]}]]}], ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.93447117861187*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"7378d75e-66ec-4e09-b4f4-022f595ced2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "B", "]"}]], "Input",
 CellChangeTimes->{{3.934471181577922*^9, 3.934471183792095*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"253d31b1-e2df-436d-b77d-73f11a92a340"],

Cell[BoxData[
 RowBox[{"2", " ", 
  SqrtBox["3"]}]], "Output",
 CellChangeTimes->{3.934471184325203*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"3bfe3e79-a1cd-48cf-8896-9e306360ed79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", "B", "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9344711899251175`*^9, 3.934471199188579*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"ea5afc81-8d56-4f23-b1a1-ef1a63f744ce"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "2", "2"},
     {"2", "1", "2"},
     {
      RowBox[{"2", "+", 
       FractionBox[
        SqrtBox["3"], "2"]}], "2", 
      RowBox[{"2", "-", 
       FractionBox[
        SqrtBox["3"], "2"]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9344711994859185`*^9},
 CellLabel->
  "Out[57]//MatrixForm=",ExpressionUUID->"2e83fc81-a0cc-4511-9d75-\
b030dd5082ed"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Inverse", "[", "B", "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9344712021867027`*^9, 3.934471222989036*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"9859aa21-e1ab-416d-a668-a376b57ad498"],

Cell[CellGroupData[{

Cell[BoxData[{
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       RowBox[{"2", " ", 
        SqrtBox["3"]}]], "1", 
      FractionBox[
       RowBox[{"2", "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       RowBox[{"2", " ", 
        SqrtBox["3"]}]]},
     {
      FractionBox["1", "2"], 
      RowBox[{"-", "1"}], 
      FractionBox["1", "2"]},
     {
      FractionBox["1", 
       SqrtBox["3"]], "0", 
      RowBox[{"-", 
       FractionBox["1", 
        SqrtBox["3"]]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
 RowBox[{"B", ".", 
  RowBox[{"Inverse", "[", "B", "]"}]}]}], "Input",
 CellChangeTimes->{{3.9344712295999594`*^9, 3.934471232189048*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"78c88ac6-e1c8-4e6d-a71d-456199a56059"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"-", "2"}], "-", 
       FractionBox[
        SqrtBox["3"], "2"]}], 
      RowBox[{"2", " ", 
       SqrtBox["3"]}]], ",", "1", ",", 
     FractionBox[
      RowBox[{"2", "-", 
       FractionBox[
        SqrtBox["3"], "2"]}], 
      RowBox[{"2", " ", 
       SqrtBox["3"]}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     RowBox[{"-", "1"}], ",", 
     FractionBox["1", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["3"]], ",", "0", ",", 
     RowBox[{"-", 
      FractionBox["1", 
       SqrtBox["3"]]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9344712327202454`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"52266875-5267-4e98-9dd3-907fbe323cb5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "+", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]], "+", 
      FractionBox[
       RowBox[{"2", "+", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]]}], ",", "0", ",", 
     RowBox[{"1", "+", 
      FractionBox[
       RowBox[{"2", "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]], "-", 
      FractionBox[
       RowBox[{"2", "+", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], "+", 
      FractionBox["2", 
       SqrtBox["3"]], "+", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]]}], ",", "1", ",", 
     RowBox[{
      FractionBox["1", "2"], "-", 
      FractionBox["2", 
       SqrtBox["3"]], "+", 
      FractionBox[
       RowBox[{"2", "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "+", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]], "+", 
      FractionBox[
       RowBox[{"2", "-", 
        FractionBox[
         SqrtBox["3"], "2"]}], 
       SqrtBox["3"]]}], ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9344712327202454`*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"2b825c45-6f79-4499-a35f-c83f78ccb669"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"B", ".", 
   RowBox[{"Inverse", "[", "B", "]"}]}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.934471252770418*^9, 3.934471263909843*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"bd5d84be-e60f-4b0d-92a4-f1bcfc32a25f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.934471255403631*^9, 3.934471264232242*^9}},
 CellLabel->"Out[63]=",ExpressionUUID->"84190499-2a47-4d12-833d-041b159dad36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"B", ".", 
    RowBox[{"Inverse", "[", "B", "]"}]}], "//", "Simplify"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9344712746883926`*^9, 3.9344712769483504`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"19bca056-5173-44c9-9c40-8ab95c04c3c3"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.934471277203828*^9},
 CellLabel->
  "Out[64]//MatrixForm=",ExpressionUUID->"c617931f-9f37-4e3f-ab05-\
35ce3f127633"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Inverse", "[", "B", "]"}], ".", "B"}], "//", "MatrixForm"}], "//",
   "Simplify"}]], "Input",
 CellChangeTimes->{{3.9344712829198217`*^9, 3.9344712975040984`*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"61387ade-4962-405d-9a06-ff8b96d2346c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9344712980057135`*^9},
 CellLabel->
  "Out[65]//MatrixForm=",ExpressionUUID->"4b408d36-c7e8-4efb-8af9-\
264d551dfda6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"t", "=."}]], "Input",
 CellChangeTimes->{{3.9345369333925295`*^9, 3.934536938495017*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"672c420f-ab1f-41cb-a794-9cb7fd4cbbca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "=", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"i", "+", "j"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], "]"}], "//", 
   "MatrixForm"}]}]], "Input",
 CellChangeTimes->{{3.9345369417893763`*^9, 3.934536979004073*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"b0155758-c52b-4c4c-930c-2889ed70fedd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"c", "[", "2", "]"}], 
      RowBox[{"c", "[", "3", "]"}], 
      RowBox[{"c", "[", "4", "]"}]},
     {
      RowBox[{"c", "[", "3", "]"}], 
      RowBox[{"c", "[", "4", "]"}], 
      RowBox[{"c", "[", "5", "]"}]},
     {
      RowBox[{"c", "[", "4", "]"}], 
      RowBox[{"c", "[", "5", "]"}], 
      RowBox[{"c", "[", "6", "]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.934536967452605*^9, 3.934536979510103*^9}},
 CellLabel->
  "Out[3]//MatrixForm=",ExpressionUUID->"4b0ef7f8-e922-4867-a3ba-\
6ec9261cd158"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"test", "/.", 
  RowBox[{
   RowBox[{"c", "[", "p_", "]"}], "->", "p"}]}]], "Input",
 CellChangeTimes->{{3.9345370036182957`*^9, 
  3.9345370530935936`*^9}},ExpressionUUID->"15df8152-8489-4454-8841-\
72934cdca127"],

Cell[CellGroupData[{

Cell[BoxData[{
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"f", "[", "2", "]"}], 
      RowBox[{"f", "[", "3", "]"}], 
      RowBox[{"f", "[", "4", "]"}]},
     {
      RowBox[{"f", "[", "3", "]"}], 
      RowBox[{"f", "[", "4", "]"}], 
      RowBox[{"f", "[", "5", "]"}]},
     {
      RowBox[{"f", "[", "4", "]"}], 
      RowBox[{"f", "[", "5", "]"}], 
      RowBox[{"f", "[", "6", "]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.9345371604995804`*^9, 3.934537204966772*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"ac43c7a8-24fd-4e49-8598-795920072c18"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "2", "]"}], ",", 
     RowBox[{"f", "[", "3", "]"}], ",", 
     RowBox[{"f", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "3", "]"}], ",", 
     RowBox[{"f", "[", "4", "]"}], ",", 
     RowBox[{"f", "[", "5", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "4", "]"}], ",", 
     RowBox[{"f", "[", "5", "]"}], ",", 
     RowBox[{"f", "[", "6", "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.934537194357419*^9, 3.934537205583936*^9}},
 CellLabel->"Out[8]=",ExpressionUUID->"a6d7a1b7-4548-44da-b7fa-5d845cf4cd37"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t", "=", "4"}]], "Input",
 CellChangeTimes->{{3.934537208663453*^9, 3.93453720921064*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"1a44e502-892e-4067-b9f3-f86c6fb3878a"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.934537210543984*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"8c2abdd6-4775-4c0c-bbf3-83246bbedc21"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<../t.m\>\"", ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.9345372253977146`*^9, 3.9345372550959277`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"96add9d0-5694-498f-86d3-bdf24daf108a"],

Cell[BoxData["\<\"../t.m\"\>"], "Output",
 CellChangeTimes->{3.9345372575396156`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"f38815ca-3c6a-4535-b1e6-b37f10357b97"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Mathematic \:5b9e\:7528\:5165\:95e8\[LongDash]\:7b2c\:4e00\:90e8\:5206
\[LineSeparator]\
\>", "Title",
 CellChangeTimes->{{3.9345376208188405`*^9, 
  3.9345376549890738`*^9}},ExpressionUUID->"82dcfc8f-46d5-45e3-823d-\
4caa0b28a437"],

Cell[BoxData[""], "Input",ExpressionUUID->"576cb752-c1c6-4400-9047-9bdc3b362cea"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate 1/(1-x^3)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Integrate[1/(1 - x^3), x]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[1/(1 - x^3), x]"}], 
       XMLElement[
       "moutput", {}, {
        "(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + x + \
x^2])/6"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  TagBox[
                   RowBox[{"\[Integral]", 
                    RowBox[{
                    TagBox[
                    TagBox[
                    FractionBox["1", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["x", "3"]}]], Identity], 
                    PrecedenceForm[#, 400.]& ], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                  "\[LongEqual]", 
                  TagBox[
                   StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                    FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "tan^(-1)(x) is the inverse tangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/ArcTan.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/ArcTan", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/InverseTangent.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + x \
+ x^2])/6, {x, -2.1, 2.1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max11447$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min11446$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11447$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$7473027$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min11446$\
7473032$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11447$\
7473033$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max11447$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min11446$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$7473027$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11446$\
7473032$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11447$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11447$\
7473033$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$7473002[
                    Plot[{
                    Re[
                    Rational[
                    1, 6] ((2 3^Rational[1, 2]) 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])], 
                    Im[
                    Rational[
                    1, 6] ((2 3^Rational[1, 2]) 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Rational[
                    1, 6] ((2 3^Rational[1, 2]) 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2]), \
{$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$], 
                    (
                    Piecewise[{{
                    0. + 2.2207808513229135` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2207808513229135` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$], \
-2.0773502691896257`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11447$$]], 
                    (
                    Piecewise[{{
                    0. + 2.2207808513229135` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2207808513229135` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11447$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$ + 
                    0.004154700538379252, 
                    CalculateUtilities`GraphicsUtilities`Private`max11447$$]],
                     2.0773502691896257`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11446$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11447$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$7473002]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$7473002[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[CalculateUtilities`GraphicsUtilities`Private`t === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$7473002[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMGJs0viABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn+7u7G4/33rpYTCWERhDldDbbSHzTIGmaQ+\
BrlnzloP45o+PyuOngvOYfi+oSKh+YL1jBcTCSAEc8wm+\
9XIzdRcTMyAIKHLhNDl5DtteoI1iYjqmsxzfOJ+srbbAoKbac3Ov5Gadgnz4N/\
GBjF1M3uOSdmdHYFgYl4y+s7L659wN8Py6LbySJ6uJw/zecOQNDDumepnOZ63r5BmputZFP+\
fqoubLRoM8f8rU/\
0uHTJvlMF60DYPOjmyNV2tvGX6nLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AVLFuI4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + x \
+ x^2])/6, {x, -12., 12.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max11449$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min11448$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11449$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$7473128$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min11448$\
7473129$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11449$\
7473130$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max11449$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min11448$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$7473128$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11448$\
7473129$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11449$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11449$\
7473130$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$7473105[
                    Plot[{
                    Re[
                    Rational[
                    1, 6] ((2 3^Rational[1, 2]) 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])], 
                    Im[
                    Rational[
                    1, 6] ((2 3^Rational[1, 2]) 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Rational[
                    1, 6] ((2 3^Rational[1, 2]) 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2]), \
{$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$], 
                    (
                    Piecewise[{{
                    0. + 13.324685107937482` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    13.324685107937482` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$], \
-12.464101615137755`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11449$$]], 
                    (
                    Piecewise[{{
                    0. + 13.324685107937482` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    13.324685107937482` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11449$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$ + 
                    0.02492820323027551, 
                    CalculateUtilities`GraphicsUtilities`Private`max11449$$]],
                     12.464101615137755`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11448$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11449$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$7473105]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$7473105[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$7473105[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkcomTXxAgnVsTBpQkvK9XnJJLFw72M42+PPgs5ukWbtKMR2gKf1wqi/\
N47vnnrve8xMRJP1er6duGvNBsDjZwtMzY0ZilouCx+/PcwlKUcGTG/\
jsnjEh6H1g5AfEznfbmAMhZ0S78xt8n7CoYETDV00Z1RTU9FCSPKORqj1jSU/NT6ZMRITRn/\
Bid2d3ezh87WAwljHRGiRX220h80wSBUkPgW4Zs8cI/+\
aOT8vjp4KxEL4XwCNQj413IklsYAQnDPPxvvV6M/\
UAE9OEx0TGV06Tleeo7QVKS8rTCcxyfONysoZtgYlMlePmYcnNOgW58O/gAxHamJzHJm3PlkC/\
MK4ZfRdl9c+5G+D5bVt4Kc5WE4f5vWPIG9H0FNQynS9b18kxUnWtjX7O1VXNl40GefmUqf+\
XjqnSy2G8ahsGzE5MjVdrbxl+py28yLHr5+J+\
ZMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIz7Fd8hOn0qWOEEJs6yX2x/\
PKnA600hxNpNNyAdXs+AAHIwrthyu09TqkcZkSQywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwlC3UnOsq+/FFxK7lcaDLk/\
YhrSEGuFf1drI805PJ4IjwjCfGCpl69OaySGhPpLftBCRLmhFOEpL/\
Mx35zDxcrgVQdSlSXdCwObGnO/ZPolwU+Bp7qrLlje44u77bFbAJxVqsuoEmyOG02x3S/\
yXTjhuZA9yXBtyT+A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgNGarie"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Expanded form of the integral", "scanner" -> 
     "Integral", "id" -> "ExpandedFormOfTheIntegral", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6]"}], 
       XMLElement[
       "moutput", {}, {
        "ArcTan[(1 + 2 x)/Sqrt[3]]/Sqrt[3] - Log[1 - x]/3 + Log[1 + x + \
x^2]/6"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                   "-", 
                   RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedFormOfTheIntegral__Step-by-step solution", "stepbystep" -> 
         "true", "buttonstyle" -> "StepByStepSolution"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateFormOfTheIntegral", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Apart[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6]"}], 
       XMLElement[
       "moutput", {}, {
        "ArcTan[(1 + 2 x)/Sqrt[3]]/Sqrt[3] + (-2 Log[1 - x] + Log[1 + x + \
x^2])/6"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}]}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigToExp[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + \
Log[1 + x + x^2])/6]"}], 
       XMLElement[
       "moutput", {}, {
        "-Log[1 - x]/3 + Log[1 + x + x^2]/6 + (I/2 Log[1 - (I (1 + 2 \
x))/Sqrt[3]])/Sqrt[3] - (I/2 Log[1 + (I (1 + 2 x))/Sqrt[3]])/Sqrt[3]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                   "-", 
                   RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], ")"}]}], 
                    SqrtBox["3"]]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["3"]}]], "-", 
                   FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], ")"}]}], 
                    SqrtBox["3"]]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["3"]}]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Expanded logarithmic form", "scanner" -> "Integral", 
     "id" -> "LogExpand", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FunctionExpand[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + \
Log[1 + x + x^2])/6, Positive[x]]"}], 
       XMLElement[
       "moutput", {}, {
        "ArcTan[1/Sqrt[3] + (2 x)/Sqrt[3]]/Sqrt[3] - Log[1 - x]/3 + Log[1 + x \
+ x^2]/6"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 TagBox[
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    RowBox[{
                    SuperscriptBox["3", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["3", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "x"}]}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", "x", "+", 
                    SuperscriptBox["x", "2"]}], ")"}]}]}], HoldForm], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "LogExpand__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Reduced logarithmic form", "scanner" -> "Integral", 
     "id" -> "LogReduce", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 \
+ x + x^2])/6, x < 1]"}], 
       XMLElement[
       "moutput", {}, {
        "(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] + Log[(1 - x)^(-2)] + Log[1 + x \
+ x^2])/6"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 TagBox[
                  RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "x"}]}], 
                    SqrtBox["3"]], ")"}]}], "+", 
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "2"]], ")"}], "+", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", "x", "+", 
                    SuperscriptBox["x", "2"]}], ")"}]}], ")"}]}], HoldForm], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "LogReduce__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=0", "position" -> 
     "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, 0, 4}]"}], 
       XMLElement[
       "moutput", {}, {"Pi/(6 Sqrt[3]) + x + x^4/4 + x^7/7 + O[x]^9"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]], "+", "x", "+", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "4"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "7"], "7"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "9"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 9, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]], ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["1", "4"], ",", "0", ",", "0", ",", 
                    FractionBox["1", "7"]}], "}"}], ",", "0", ",", "9", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontSize -> 10, FontFamily -> "Roboto", 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 1", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=1", "position" -> 
     "800", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, 1, 4}]"}], 
       XMLElement[
       "moutput", {}, {
        "(2 Sqrt[3] Pi + Log[27] - 6 Log[1 - x])/18 + \"(\"-1 + x\")\"/3 - \
(-1 + x)^2/9 + (-1 + x)^3/27 - (-1 + x)^4/108 + O[-1 + x]^5"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"6"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"log", "(", "27", ")"}]}], ")"}]}], "+", 
                    FractionBox[
                    RowBox[{"x", "-", "1"}], "3"], "-", 
                    RowBox[{
                    FractionBox["1", "9"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "27"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "3"]}], "-", 
                    RowBox[{
                    FractionBox["1", "108"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "4"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "5"], ")"}], 
                    SeriesData[$CellContext`x, 1, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "1", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"Log", "[", "27", "]"}], "-", 
                    RowBox[{"6", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "x"}], "]"}]}]}], ")"}]}], ",", 
                    FractionBox["1", "3"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "9"]}], ",", 
                    FractionBox["1", "27"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "108"]}]}], "}"}], ",", "0", ",", "5", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontSize -> 10, FontFamily -> "Roboto", 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = -(-1)^(1/3)", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtx=-(-1)^(1/3)", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, -(-1)^(1/3), 4}]"}], 
       XMLElement[
       "moutput", {}, {
        "(-(Sqrt[3] Pi Floor[3/4 - Arg[(-1)^(1/3) + x]/(2 Pi)]) + ((Sqrt[3] \
Pi - I Sqrt[3] Log[3] + Log[16] - 4 Log[3 + I Sqrt[3]] + (2 I) Sqrt[3] \
Log[(-1)^(1/3) + x] + 2 Log[-I Sqrt[3] ((-1)^(1/3) + x)])/4 + \"(\"(-1)^(1/3) \
+ x\")\" - (4 ((-1)^(1/3) + x)^2)/(-3 I + Sqrt[3])^2 - I/18 (-I + Sqrt[3]) \
((-1)^(1/3) + x)^3 + O[(-1)^(1/3) + x]^4))/3"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox["1", "3"], " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"-", 
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox["3", "4"], "-", 
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}]}, "Floor"]}]}], "+", 
                  RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}]}], ")"}]}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"3", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}], "+", 
                    RowBox[{"log", "(", "16", ")"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", "3", ")"}]}], "+", 
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}]}], ")"}]}], "+", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "-", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "2"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], HoldForm], 
                    "+", 
                    SqrtBox["3"]}], ")"}], "2"]], "-", 
                    RowBox[{
                    FractionBox["1", "18"], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "\[ImaginaryI]"}], HoldForm], "+", 
                    SqrtBox["3"]}], ")"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "3"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "4"], ")"}], 
                    
                    SeriesData[$CellContext`x, -(-1)^Rational[1, 3], {}, 0, 4,
                     1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "/", "3"}]]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", "3", "]"}]}], "+", 
                    RowBox[{"Log", "[", "16", "]"}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"3", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], "]"}]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "/", "3"}]], "+", "x"}], "]"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "/", "3"}]], "+", "x"}], ")"}]}], "]"}]}]}], 
                    ")"}]}], ",", "1", ",", 
                    RowBox[{"-", 
                    FractionBox["4", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}], "2"]]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "18"]}], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}]}]}], "}"}], ",", "0", ",", "4", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    ")"}]}], ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "7", "datatypes" -> "", "timedout" -> 
     "Integral,Series,Plot,Plotter,Simplification,Sequence,Sum", 
     "timedoutpods" -> "", "timing" -> "3.575", "parsetiming" -> "0.234", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa8922243d8749gg03547400001hc65f8hfeh534i24307842769377011871", "id" -> 
     "MSP8923243d8749gg035474000035hh5ad6783i683b", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "14", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa8924243d8749gg035474000065d8i1ah357cg16e4307842769377011871", "version" -> 
     "2.6", "inputstring" -> "Integrate 1/(1-x^3)"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "2", "datatypes" -> "", "timedout" -> 
     "Integral,Series,Plot,Plotter,Simplification,Sequence,Sum", 
     "timedoutpods" -> "", "timing" -> "5.211", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "13", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "Integrate 1/(1-x^3)"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2024, 9, 5, 16, 13, 55.0642075`9.493444232258685}, "Line" -> 
    18, "SessionID" -> 18889444716093662667}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Integrate[1/(1 - x^3), x]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "Integrate 1/(1-x^3)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {2974., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa8922243d8749gg03547400001hc65f8hfeh534i24307842769377011871", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"81d9a971-6068-4209-ab4d-22e6caf031e0"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"ArcTan", "[", 
    FractionBox[
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "x"}]}], 
     SqrtBox["3"]], "]"}], 
   SqrtBox["3"]], "-", 
  RowBox[{
   FractionBox["1", "3"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "-", "x"}], "]"}]}], "+", 
  RowBox[{
   FractionBox["1", "6"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "+", "x", "+", 
     SuperscriptBox["x", "2"]}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.9345378837657995`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"c28e7922-ed46-4561-bb09-63d251583ee9"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9345379169095073`*^9, 
  3.9345379253346395`*^9}},ExpressionUUID->"a09409a9-bc18-4653-a5c9-\
6cd9cf8522cc"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "graph 1/(1-x^3)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Plot", "Plots", 1, 2, "Content"}, "ExtrusionOpen" -> 
      True, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[1/(1 - x^3), {x, -0.95, 1.1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    FractionBox["1", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["x", "3"]}]]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plot", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[(1 - x^3)^(-1), {x, -0.95, 1.1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max451$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min450$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min450$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max451$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1314985$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min450$\
1314990$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max451$1314991$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max451$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min450$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1314985$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min450$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min450$\
1314990$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max451$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max451$\
1314991$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1314963[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][(1 - $CellContext`x^3)^(-1), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min450$$], 
                    (
                    Piecewise[{{
                    0.053778121898563014` + 
                    1.070902760829462 Tan[1.5040801783846716` #], # < 0}}, 
                    0.053778121898563014` + 
                    1.070902760829462 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min450$$], \
-0.9479596844949782], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min450$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max451$$]], 
                    (
                    Piecewise[{{
                    0.053778121898563014` + 
                    1.070902760829462 Tan[1.5040801783846716` #], # < 0}}, 
                    0.053778121898563014` + 
                    1.070902760829462 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min450$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max451$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min450$$ + 
                    0.002003475612787082, 
                    CalculateUtilities`GraphicsUtilities`Private`max451$$]], 
                    1.0555159282921043`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Exclusions -> {$CellContext`x == 1}, 
                    PlotRange -> {0.5555555555555555, 1.1111111111111112`}, 
                    PlotRange -> Automatic, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> {330.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min450$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max451$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1314963]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1314963[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    All, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1314963[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkcqGEB+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3k23B7uvH710sFgLGPQmkiutttC5pkERZIeAt0w5h0D/\
s0dH5fHTwVjIfleEB4R9dB4JxJiAyM4MMzH+9arzdQ9TEwDj0HGl06Tleeo7QVKS8rTCZnl+\
MbFZA3bAoNMlePmfsnNOgW58G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+\
D5bVt4KU5XE4f57TLkDTQ9IWqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TBetA2DzI5NjVdrbxl+py28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgNRlbiO"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[(1 - x^3)^(-1), {x, -5., 5.1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max453$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min452$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min452$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max453$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1315083$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min452$\
1315084$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max453$1315085$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max453$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min452$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1315083$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min452$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min452$\
1315084$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max453$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max453$\
1315085$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1315063[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][(1 - $CellContext`x^3)^(-1), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min452$$], 
                    (
                    Piecewise[{{
                    0.053778121898563125` + 
                    5.3545138041473095` Tan[1.5040801783846716` #], # < 0}}, 
                    0.053778121898563125` + 
                    5.3545138041473095` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min452$$], \
-4.954910910069143], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min452$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max453$$]], 
                    (
                    Piecewise[{{
                    0.053778121898563125` + 
                    5.3545138041473095` Tan[1.5040801783846716` #], # < 0}}, 
                    0.053778121898563125` + 
                    5.3545138041473095` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min452$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max453$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min452$$ + 
                    0.010017378063935411`, 
                    CalculateUtilities`GraphicsUtilities`Private`max453$$]], 
                    5.062467153866269]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Exclusions -> {$CellContext`x == 1}, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {330.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min452$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max453$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1315063]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1315063[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1315063[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs+\
IUhBPSEB3WVZaoCTlvd5kkli4drCdvfDz4LGbpNl2K8V0Aa3Sh1E9aY5nzpyZzpNDEST9Xq+\
nrhrzUbA4uYGnx8aMxTwXBY93T3IJSlHBkyv47LYxIegdYOQUYue7bswHIedEu/MbfJ+\
wqGBEwzdNGdUU1GxPkjyjkao9E0mPzE9mTESE0Z/wdDgavnr+\
euRgMJYJ0RokV6O2kHkmiYKkh0DXjHnPCP/ujo/K4+eCsRB+FMAjUA+\
MdypJbGAEJwzz8b71cjN1FxPThMdExhdOk5XnuO0FSkvK0ynMc3zjfLKGbYGJTJXj5l7JzSYFufBv4\
gMR2picxyZtz5ZAvzAuGX1nZfXPuRvg+W1beCmO1xOH+b1jyBvR9AjUKp3PWtfJMVJ1rY1+\
wdVFzZetBnn+lKn/lw6o0qthvGgbBswPTY3Xa28V/mVbeJFj1y/Efd+\
YL85RAq4bDpXgPom4YIsomikPnETbp6ty43AYdyq+Q3T6VLDCCUycZb/Y/\
nhYgdebQoi1m21BOryeAQHkYFyx5XaHplSPMyJJZIAX1/\
XLJpuKOhSPO9vXnvKYmgHmCNm0PKHZT5bqTnSUff2j4lZyOdNkyPs+\
15CC3Cj6W1gfacjl8VR4RhLiBU29enNYJTUh0lv2gxIkzAmnCEl/mY/\
95h4uVwKp2pOoLulYHNjSnPgn0S8LfAA81Vlzx/YcXd5ti9kE4rhWXUCTZHnabI/\
pfpPpxg3Nge5Lgm9J/Ad6tyl0m8Jf3RRW9uBuTejWhG5N6NaEbk34f9cEGzH+K/0GjzS4Pg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Plot", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.71", "parsetiming" -> "0.314", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP10701e44e7h444546i9e00000df0fg1b10a4576g", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "17", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa10711e44e7h444546i9e00002a483a2gc4ce48a63454770973695860617", "version" -> 
    "2.6", "inputstring" -> "graph 1/(1-x^3)"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2024, 9, 5, 16, 13, 31.5653443`9.251785435376659}, "Line" -> 
    18, "SessionID" -> 18889444716093662667}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Content"}, Typeset`open$$ = True, Typeset`newq$$ = 
   "graph 1/(1-x^3)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {904., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"743afafc-01f5-4618-b08c-46c9b43ad937"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], {}}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
      Slot["HighlightElements"], 
      Slot["LayoutOptions"], 
      Slot["Meta"], 
      Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
          Annotation[{
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]], 
            Line[CompressedData["
1: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
             "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PlotRange" -> {{-0.95, 1.1}, {-0.24095992690224088`, 
           2.3186383207449857`}}, "Frame" -> {{False, False}, {False, False}},
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
          "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
          GoldenRatio^(-1), "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>]]& )[<|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PlotRange" -> {{-0.95, 1.1}, {-0.24095992690224088`, 
          2.3186383207449857`}}, "Frame" -> {{False, False}, {False, False}}, 
         "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
         "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
         GoldenRatio^(-1), "DefaultStyle" -> {
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         Plot, "GroupHighlight" -> False|>|>],
     ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
      4.503599627370496*^15, -4.503599627370496*^15}}]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
          "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PlotRange" -> {{-0.95, 1.1}, {-0.24095992690224088`, 
        2.3186383207449857`}}, "Frame" -> {{False, False}, {False, False}}, 
       "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
       "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
       GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.95, 1.1}, {-0.24095992690224088`, 2.3186383207449857`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.934537937112799*^9, 3.9345379839363327`*^9}},
 CellLabel->"Out[16]=",ExpressionUUID->"f3ca170c-b4b3-40bb-9744-dcb01cfb0d8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%16", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[17]:=",ExpressionUUID->"7ae8eb38-ec59-400e-8a2a-58400b76299c"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], {}}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
      Slot["HighlightElements"], 
      Slot["LayoutOptions"], 
      Slot["Meta"], 
      Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
          Annotation[{
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]], 
            Line[CompressedData["
1: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
             "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PlotRange" -> {{-0.95, 1.1}, {-0.24095992690224088`, 
           2.3186383207449857`}}, "Frame" -> {{False, False}, {False, False}},
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
          "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
          GoldenRatio^(-1), "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>]]& )[<|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PlotRange" -> {{-0.95, 1.1}, {-0.24095992690224088`, 
          2.3186383207449857`}}, "Frame" -> {{False, False}, {False, False}}, 
         "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
         "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
         GoldenRatio^(-1), "DefaultStyle" -> {
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         Plot, "GroupHighlight" -> False|>|>],
     ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
      4.503599627370496*^15, -4.503599627370496*^15}}]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
          "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PlotRange" -> {{-0.95, 1.1}, {-0.24095992690224088`, 
        2.3186383207449857`}}, "Frame" -> {{False, False}, {False, False}}, 
       "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
       "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
       GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Small,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.95, 1.1}, {-0.24095992690224088`, 2.3186383207449857`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.934537999943898*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"0f45f316-b0ef-46e6-bf5b-d9578c6d80ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"x", "^", "3"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "30"}], ",", "30"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9345381258711543`*^9, 3.934538206360052*^9}, {
  3.9345382525185847`*^9, 3.9345382626747637`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"ef53fe8e-da7c-458c-a9fe-dafdfef32ffe"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
sBv+B2grbb0=
          "]], LineBox[CompressedData["
1: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
KGu/dDImmoBWg/yJP384MJvgxzTfScD/A/BfCIE=
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], {}}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
      Slot["HighlightElements"], 
      Slot["LayoutOptions"], 
      Slot["Meta"], 
      Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
          Annotation[{
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]], 
            Line[CompressedData["
1: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
sBv+B2grbb0=
             "]], 
            Line[CompressedData["
1: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
KGu/dDImmoBWg/yJP384MJvgxzTfScD/A/BfCIE=
             "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PlotRange" -> {{-30, 30}, {-0.003320962282497989, 
            0.003796919947446504}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>]]& )[<|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PlotRange" -> {{-30, 30}, {-0.003320962282497989, 
           0.003796919947446504}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         Plot, "GroupHighlight" -> False|>|>],
     ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
      4.503599627370496*^15, -4.503599627370496*^15}}]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
sBv+B2grbb0=
          "]], 
         Line[CompressedData["
1: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
KGu/dDImmoBWg/yJP384MJvgxzTfScD/A/BfCIE=
          "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PlotRange" -> {{-30, 30}, {-0.003320962282497989, 
         0.003796919947446504}}, "Frame" -> {{False, False}, {False, False}}, 
       "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
       "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
       GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-30, 30}, {-0.003320962282497989, 0.003796919947446504}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.934538151200189*^9, {3.934538181663869*^9, 3.934538207625222*^9}, 
   3.9345382632030287`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"90aee0b3-ab9d-4e46-bb3c-192c1763551d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PredictiveInterfaceDump`iDefer", "[", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"\:ff0c", " ", "x"}], 
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}]], ",", 
     FractionBox["\:ff0c", 
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}]], ",", 
     FractionBox[
      RowBox[{"3", " ", "\:ff0c"}], 
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}]]}], "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[20]:=",ExpressionUUID->"5081ee2f-392c-4075-b826-646ff842fa4c"],

Cell[BoxData[
 RowBox[{"PredictiveInterfaceDump`iDefer", "[", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"\:ff0c", " ", "x"}], 
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}]], ",", 
     FractionBox["\:ff0c", 
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}]], ",", 
     FractionBox[
      RowBox[{"3", " ", "\:ff0c"}], 
      RowBox[{"1", "-", 
       SuperscriptBox["x", "3"]}]]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.9345381848696094`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"f867d7fb-502c-4131-a29e-85baf17cbd89"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.93453822199347*^9, 3.9345382464057875`*^9}, {
  3.9345384590764604`*^9, 
  3.934538461652297*^9}},ExpressionUUID->"51829ad8-b51d-4fd8-a0d2-\
10811bfd1fa8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.934538456736439*^9, 
  3.9345384570898905`*^9}},ExpressionUUID->"9033f83a-b8c7-4d07-852b-\
e0456d501c10"],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.934538369831766*^9},ExpressionUUID->"120159ca-a441-4b73-9185-\
a4a3dec32d46"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.934538403865694*^9, 
  3.934538437872262*^9}},ExpressionUUID->"7966f22e-a9ab-4a64-b40c-\
60e7901ea0b2"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9345384336274977`*^9, 
  3.934538436905419*^9}},ExpressionUUID->"c551995c-317d-42e4-ba3a-\
99b38d37febf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"3", "x"}], "-", 
       RowBox[{"2", " ", "y"}]}], "==", "5"}], ",", 
     RowBox[{
      RowBox[{"x", "+", "y"}], "==", "5"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.934540789037427*^9, 3.934540833087693*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"7e50779a-9ddf-42a3-842a-2da53898f468"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", "3"}], ",", 
    RowBox[{"y", "\[Rule]", "2"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.9345408347584023`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"7f90bebc-8ed8-4314-8650-b9e8fe412251"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], 
    RowBox[{"Sin", "[", "x", "]"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.9345408592344656`*^9, 3.9345408778967876`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"46549a24-8fef-4ade-a761-497e06413193"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   RowBox[{"Cos", "[", "x", "]"}]}], "+", 
  RowBox[{"2", " ", "x", " ", 
   RowBox[{"Sin", "[", "x", "]"}]}]}]], "Output",
 CellChangeTimes->{3.93454087946805*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"ce8514cf-0697-4d7b-89b4-ef0199d681fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Eigenvalues", "[", "A", "]"}]}], "Input",
 CellChangeTimes->{{3.9345409188335147`*^9, 3.9345409933605933`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"198d5388-d490-493d-9a48-8cb2ae6cf32c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TemplateBox[{"Root", 
      InterpretationBox[
       StyleBox[
        TemplateBox[{"\"6.91\"", 
          DynamicBox[
           FEPrivate`FrontEndResource[
           "FEExpressions", "NumericalApproximationElider"]]}, "RowDefault"], 
        ShowStringCharacters -> False], 
       6.90938596511136271516306806006468832493`15.954589770191003, Editable -> 
       False], 
      TagBox[
       RowBox[{"Root", "[", 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"-", "34"}], "-", 
               RowBox[{"29", " ", "#1"}], "-", 
               RowBox[{"2", " ", 
                 SuperscriptBox["#1", "2"]}], "+", 
               SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
       Short[#, 7]& ], 6.909385965111363},
     "NumericalApproximation"],
    Root[-34 - 29 # - 2 #^2 + #^3& , 3, 0]], ",", 
   InterpretationBox[
    TemplateBox[{"Root", 
      InterpretationBox[
       StyleBox[
        TemplateBox[{"\"-3.51\"", 
          DynamicBox[
           FEPrivate`FrontEndResource[
           "FEExpressions", "NumericalApproximationElider"]]}, "RowDefault"], 
        ShowStringCharacters -> 
        False], -3.50572825977189239665676723234355449677`15.954589770191003, 
       Editable -> False], 
      TagBox[
       RowBox[{"Root", "[", 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"-", "34"}], "-", 
               RowBox[{"29", " ", "#1"}], "-", 
               RowBox[{"2", " ", 
                 SuperscriptBox["#1", "2"]}], "+", 
               SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
       Short[#, 7]& ], -3.5057282597718924`},
     "NumericalApproximation"],
    Root[-34 - 29 # - 2 #^2 + #^3& , 1, 0]], ",", 
   InterpretationBox[
    TemplateBox[{"Root", 
      InterpretationBox[
       StyleBox[
        TemplateBox[{"\"-1.40\"", 
          DynamicBox[
           FEPrivate`FrontEndResource[
           "FEExpressions", "NumericalApproximationElider"]]}, "RowDefault"], 
        ShowStringCharacters -> 
        False], -1.40365770533946987441709097765851765871`15.954589770191003, 
       Editable -> False], 
      TagBox[
       RowBox[{"Root", "[", 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"-", "34"}], "-", 
               RowBox[{"29", " ", "#1"}], "-", 
               RowBox[{"2", " ", 
                 SuperscriptBox["#1", "2"]}], "+", 
               SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
       Short[#, 7]& ], -1.4036577053394699`},
     "NumericalApproximation"],
    Root[-34 - 29 # - 2 #^2 + #^3& , 2, 0]]}], "}"}]], "Output",
 CellChangeTimes->{{3.9345409523562393`*^9, 3.9345409939400024`*^9}},
 CellLabel->"Out[9]=",ExpressionUUID->"38b6c9b8-4378-41f9-ba85-78c6a5ba50cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "20"}], "}"}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2"}], ",", "2"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.934541120463783*^9, 3.934541137105674*^9}, {
  3.9345415051990376`*^9, 3.934541519169238*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"5d1a5366-fd1c-4647-b483-e2eb210498b7"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
01oW7urjx3fnCSI61Zd37ZWFZQ0TlMEFgjKvyH0oOSQLpbeKhgYXCfJq8Bul
HpOFqZUhXfeXCNLY8F0l8aQspPEErh1jY8Y5heNrz8jC5pIyt1k2Tv8Y+CjI
RxbazqKZTDb25K+rHw6UhVef3hfys7HacaU1h0LZ44mF2fJs/uG3wVu/RsrC
bdGizg72el5xNAYZ3JSF2Jg5C8t/BLnZqr5LvSsLrSF3WMdmCVJOukwXfiwL
KxLPt1CmCft9+6kQkSQL/i+OrY1n65GKqI6TqbIQfnLmZj5bL9fbV+45Z8jC
tuQ3p8JZBCl2ttQ0vJOF/RzlSYtsvXs1tVZuLZSFc9P2W5UGCUoOidicXSYL
v947H/jXQ9CJ2t++cpVsPq43g5c6CJKX0cm8/V0WHI2/L8tsJajrTPTAYqMs
rOYwzY5pIiippEPGq00WvtiYrxD9QZDMkZjb1oOywGr2+KpfQdCjRmXuXUxZ
6N9tfHJTCUFCVp+u7J6QBfEL2v4zeQStNVjwtVti92/5K/XE1wRV/KqZfr1c
Dnh+WzCvJBO0TCAhN22lHMROWzltSCAoONpAM32tHBxHz+JiYggqrFhJT18v
B8/GxPz3XyVoerHxZQa/HFSmmti1BBF03tdbPktUDsoG3ulzu7P1PfFaKEdB
Dkq2X5sW38rW7z//+hwlOVilqPQ5w4CtT4vZrXeqcjA//k/nH5Ugp909XO+1
5OCqySnbChGC9plI/svfJAetZz0c1w6y0B3/4fwPpnJgcSVlzKuNhX7k5F8o
2CIHh5k7Z298Z+8HqvtYhRZycGtlWtNMDguByM3ukr1ywKlpxns3iIVC9jg8
KT0gBwePQ9R3TxYquqHqgA+x6zu23rPCkYX0V3xpKjsqB/+iDi92b2Yh6uhi
ZYWnHNCvD2uy5plIvNo7s+qqHFBiI6OcvZjowErkWR0pB833PUZdHZjoHvCo
fLsmBzFRBupKO5iIL//1s5rbcvCRM/dTlxwTrUrpufcjQQ4uvPvsse0HA41f
2nfx5zs2X230lUFZBpKQFfQXyZcDyX2NVYxVDLSlrP78wUI5YH4Q6nnJpKPY
5bs9WsvkoGnuaxwU0pFmlOWhP9/lwFo832uFLR15xJoa9A/KQZ7A90QerxHU
k6wyMSkpDzNuoWa7/IbQmu2DrI2y8iDwt/DVf/uGEK3/xYjfBnl4Dukv0nWG
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
SNjc69JUvRqs+6UccmxoEMWPFp0ZbmLX4+Nl85xrCEkkcDu1N6uB7JR9R7bS
EJIZTTEt/6MG74T9DGguQ0jp8e+lm8NqoGTuHZrdPoT0WTuuUJapw5xI9ofL
FcPoQ/yD82Kc6iBQc2T2aOcwMt7Wd2Itlzq0WwjMcf0bRqbxl7eNrVMHN9/r
OzNpI8h8ax5niZg6PJYLKLBJHEEHHihE7dNWh52cUtkvTtJRC5zzt9BVh7u/
RBsHQujoML30lLG+OvifztVgPKAjJzi8Q85EHTZ+OF289QsdnRyJ5WZYqMM4
d8Vr8Q0M5Ge6GHP1qDqY5ip+3lbLQDNDO4P9TqjD3rkHItk9DBR099Fpd1d1
MGrckNA5xUAhQ3o2uz3Voaf85q3LMkwUecdzvaS/Orjc6ff54sFEDwZaYnNu
qcOw0dlX1tNMtHxapKw/jj2uNZ8kxc1CXlz7idh9dVA6ZZD3VIKFzFXqbS4n
qMMhDo3wUhMWmnKvWmP9Sh389lydPnSJhU4EcRlffqMOxW1x4qU3WKj2upl7
TqY6rH1tz9WUwEKpbz5Wir1Xhxr5o+lCBSx0gFkQ3v9RHSwdfYX6CQuVL0y/
E/usDhLDk5GN8yykuV6/d+dXdXCKg9Tz3ASt0srZklOrDq5bqj3K5dl5Fo16
99erw7RoTf15DYI6dmsmif1UhwHzDe6NhgTleacthvxWh1NxYu9TdhG0IWxI
I6dDHWYHOmjChwi6Fad0pL+brc9D87MbnQk6mZNctHNIHcx2iH0O9yNIePJx
gNhfdejNSzFyfERQKGfry50z6vDCuEBgxzOCGEKizSH/1EGvM3Gi5xVBnzbe
3di/jArPqz9epuQTpG1e7yK2kso+311Z9Z2d9xMP8N7buZoKPRW81gqfCLrg
HzOevZ4KHodCG3//IKgrqkq+n58KVRonpjf/JMg6nmuPmDAVErJ4n+xqI+jD
K7PQnWJU8LsXV8jTSZBiwdWsEEkqPLH5CBd7CYqt+tiRLUMFBWVLysNBguZb
l3j65anQ5ZJy5DidnfdHNm8Wo1Dh7BHZrlYWQU1zF0/vVKHCzJ3m5xzjBMHa
woQQdSpMVxUl/ZwkKF1ypjpbkwqt0jd+2E8TJEbVn+ujUeGeYJvq9VmCwk0u
qIptpIJk2uo0938EjVrn2O80pEK+m/XO6XmCHI+MRoVsooK95xvu/99/+npG
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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
      Slot["HighlightElements"], 
      Slot["LayoutOptions"], 
      Slot["Meta"], 
      Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
          Annotation[{
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]], 
            Line[CompressedData["
1:eJwVWnc81d8fVimpZO8d17zGRVZy3g1ElLQUaaCMkpKZRFmlQVPxLUkqGZHI
PKISSVYZyd53HCsr43d/f93X8zqf13PO+3k/n/M5z30d+RNn7VyXc3BwXFzB
wfH/3/69Im4cHKOoUOvq0j7mCNKW3V/QITqKPsC6n8u46Cho5O6aEq1R9DlC
OOK8HB3xhfFnBB4dRXH9BXee2NGRcea68fHSUTTeDvskc+no1uoVwf2XxtA9
+omsAE8Gamnc8r3i/hhy2xVQYxnGQApPQ2WSM8ZQJN+moN8PGOjDxsUypz9j
SC/nwFf0kYF6TsyubDEZR7pSLfxcgkykX0JuV/8bR+diMi3c05goNFqz+5Xg
BDqqZaCiWcxE3/ae0YlSn0AXKW/a335nomMjI03bHCZQ5jVuJUKY6LrogHhJ
4QTiK6dL7qSxUFOPomdCwwQ60CUcOAcsJJvpXBw4MoFe6qVcOWnLQrnbu530
JSYRz/AmgQteLNRxrv15VuAkOoOdo46/ZCGVzZJ/b8ZNIteulJfjuSzks/qw
+enXk0jSRf88Kmeh1U+bh1RaJ1ExKyR2bTsL6dQ0aCQb/kVmoxfaPNYRFPyQ
/3Ko7V/UJNlN+yVKUOUJ2zont7+oNuPGwfkNBDnOfj8vGf8XuTYvpAUYEhSp
VJV/b/ovYrTFdWseI0hOPobDl38KHQ035NTxIKhQ0sZyv/oUehHnOd/jQxCL
r75N+OgU2rE4vHpXJEHRa+8qTAVMoVMS3Eyu2wRtWLX/9K87U+h3nKP52YcE
HfzXsvDgyxQiGjeXmb8kaPzvY3P/rilUJLdg9D6ToBujjrcPzk2hG/6V9+rf
E1TW3yUnpjmNPiV2nuKvIOhwV7L7jMU0suSLLNGrImiyzSWn5fg0yrthOMr5
gyCVuqFtj+5Po6JnVW/ftBJUXp12IzBrGkUcq9lwpYNd7+fTPw9VTaPAEgXj
lb0ETWFNGePeaaQbt5yuN0hQbOHoSYmFafThl68aP50gtfc5WXMiM0jgqwvr
EYugT1kXZtq0Z1DJTKzGjzGCnNL0txRZzaDGMw86304SNJMycy3BZQYtvaPP
m04TdOdpYcPFkBlEm+gOCZwliPo4WNIxfgZJcbw4euwfQV/umbqY5MwgH89N
jyfmCTp2myNDqmYGMW5FqukuEjR3rfzvfP8MWhW/lUd2iaB74eGmf5Zm0N3Y
VZDPxpqXzaNKxGfRatftH/+xcVXg6rr/dGdRzNCOWAYbu1yoFguxmUXVvzZl
XGPjRa8bx51OzaLbjbLijWz+ePddaaZhs0jBreHn1wWCdFz4JmQSZtHJxbUD
Huz11Dg1bFrKnUXvWo/aFMwRdPLQvfDO2ll0g8eEL3eGII59B77joVk0e25Y
12GKoMe7xESSls8hfD+mNHOCID3LNqdQqTm0O1MuP3OUoNptiS+P6c+hwIgw
igOTIDdTp1GwnUNDLscFcocJWm4kZyTvMYdOLNlEFfQTlKjbE7YsfA59PZh1
y7ObIH3NlOru/+ZQ94tK3ep2gjwUVByT6+dQ00G36JsNBHHKjKRcoc+h67L5
duM1BD0RS2eeWPkPPXeyHF1RSVADj/ZlBaN/qJJHtk+jkKDTq8crV+z9h/y0
/jqYvyNo1Ypcvr7T/9Bio+7I2nSCNs0YJKck/UP2pScePEkk6Nf47Eh44T+U
GZne7nmPIG9mka5r0z909Az/9YEYglJ60GfK6nl0O1j1Ql8gQeu+Wwylnp1H
rk9T1FbaEfTgxAb9uqh5VOHfeGXWgiDZmfmrs0/n0SqBdZGpm9n6K+TIWtfN
o948N4aaCkH2gVIHx7QX0CjH6ETnLAv1rJ9OkbBcQAn1Yg6JTBbyTKkf33Z8
ATWtcNgk0M1CIT8ibz2IW0B/hqhtapUslEIZ+7xpfAGFBcm3CsSykGbRN0HX
NYvI2var9ZMwFsq3TT1+a8MiMtzwTavvPAtVX3RY6LJbRA8Lm6uf7mOh0frP
epHvFtEN7W0qbUIstDnk8fO6C0uox2KrdHA0E30R9B2bvbGEbotnJGJfJrJ9
vRspvFhCTYuWLHyCiVyaOH/7/lxCbfaL76c3MZHZfYNrPJIcUJA6ULCDzkCe
9GdlORc5YFOOYfyjzQykrX/7VGUUB3zwWP4TKzHQZGjw+va7HNBlMdT5gpeB
QkQOOq5M54DK33t0c7roKG7LupmD7RyQuupsfv1lOsp/6Ke1YLIMTM3Dth3J
GUH2E8uoP3csg2xnox3y8SNobtdNlYx9y+DGUcUVby6NINNVKfJHTi8Dz1t8
4Xw7RtCXC/WCJQnL4J2Np6pa2zBq2kOdCZ5bBn6spf3fJ4bQ+Nqesvn85eAb
zFf3YHEA3Tt1pqSpYjlwrztgF/NnAOlXzBSk/1gOAbyr822KB1BQEO87x8Hl
UPTt+s7NgQNo2bDJi2KRFbAurOTdj9F+xPfl4bVg3xVwkYv7wormPqQZamM3
r8MJn9J17b6F9aAAn8dWPxEnyIrY8FQe7EEfTw5uzbTmhNDr1YF3NXrQPpsw
3WMnOUFnxReJpJZudFHivdCnR5xw1bMi7B61G33NlWqO4VgJnBtrBB7Gd6IT
w3QHydqVsDw8To7a3ooe2F13NXbnApFXzzfi/d8Q80qb5CO3NbCxVOJF8d5P
+ICD752HvmuA5at3sV/uMy7T5eN+cGUN2Dul3/3F/Izv9JlN3UlcA4G2T8S5
oyqxvnl23Y26NWCtG3TpQl41DuWOjgg1XAt5NNaVyqt1WCB2Izm1eh3sULn4
WCXnF77oVud6UngdJNtKZJkINuM+8Gx32bAOPG4d7xW80IzzxpKqjpusg0rB
/zK4NrZgh73rUhy814Fj2zKO4XetOEWk1353C3vceyQuL6UdG/wXW67/igdm
N+dx91C6cUhk1a2ZXB7IPbHSudu2G386u9yh8CMPdJuZ5eZe7Ma2Wy9MbP7N
A0ss75ifdd3YbfCgotn69bBc/QSaDOjBj2mykXsvrAePtym/dpT14sXPGZbe
wAu7Rt2mQ1UG8PasAWEdG15oWO7js9FmAF+Pl+2ZOMQLm8LHjLLPDWBRz7gg
fx9eYMlU6i4UDGBtPt83Iam8UFZFaW23GMQ0jSeR5qv44NJw++fT9kPY2d91
aN9pPiiNLnhxyWoElwt85d1xng8iGY3Lr7qOYLlMNYNNAXxQxN80YxM6gjv6
SIR8OB/slx4u130/gg/bBSmwEviA/3uCj6EUHdtp3HaK+sYHO+wcxP920HH2
17GIoHo+aJCMP2w0Rcd8LvsyzjTzgcR9SiniYeDax+Lze3v5QJA2JXfHmIGt
Vqc8kvvHBzznhvss7jDw1t4PTQVq/PBMxzXt+0YmfhYiOZ+uzQ+ujCEnaUsm
5pAIUUjS54fmbaMWVEcmLrXddj5yKz+cbPPijQpjYuPS77x7D/MDPJqYU69i
4keHtA3Mj/FDNZfPL+82Jp6ZvONkdJIfAusYKT50Js5Tt8+QPc8Pmx78DM9Z
x8I6j3qsGNf4YbCi/AC/NQvH6Zmd77zND5eYTjVbHFh49MfLRw33+UHaZUJU
y4OFM1edGfrwjB/KT17OQFEsrHZhOiKigB/6tksd3ljKwtd4D2cEYH6YYris
sPzGwkNpxU2en/kh4/XX62ItLJzaHaZgV88PAvvEKkZGWVh+97qPMsP8oF16
pt9eluB9ebtP3iH88OTTjRs0dYIjpe+uXTXFD856LtIF+gQz6OIHmMsFYGlG
KKLJmmDZvUf+HeMWgAQBzw1uBwm2K0xKauIVgLJcH/204wR/iFamF0kJAPLN
tjfyJZhOPGK1FARAeRunXmQIwTIHMzc+VxUAgUtmcmFRBF+lbAy9ri8Aldf+
1obGE5x3I4CyaCIAjSbqrhFJBA9NFFWf2yYA527/eWfwiuBd5VuFD9kKgPOw
n/qLPILDVCMLaw4IwBGdn5rHSgjOja06CkcEoG3pydOvFQQPTq9bmessAMbP
VM50VBEscdQ2TdlDAOxO/Bf17AfBNl/u7k7wFoD/cpc6+X8SHKrRPLneXwA2
H1B102ojuP/fETR1VQBYrV6N53oJFnN+1ud+nc0/7fPkwSDBVtV91/7ECkCQ
pKC7G53gSzQVrT0PBeB6iKPqIIvgt/GeTZ/+E4CTzoa/BMYJ7l3KDDRMEYAi
6qlT9EmCRU6Ny6SnCcDf82E/vacJtqzd+Ek2WwAiRWfEn88SHLwx0P1uvgDM
7BfSuvKP4KzE4vVcpQLwqWGad/0CwT0rOHKDPgnAileJH8wXCRb23HaIVS0A
PWd/UqhLBO9oiFw8Xi8Ag9Y2+0vZ+KJR9fOfzQKwfDTKbIGNM5N4LC07BMA9
sfvvEBt3ce1hFfcJwHbV2yfD2Fjw7L272nQBkF/2JP4Lm9/8V7NhyhhbT9nJ
mx/Y8wdsluwQnRGA8DW2lgfnCX6T4nQ1ZlEAomt31CbPEdyxNllliVMQBMZt
5BNmCOb36f9+fq0gJHm+tIApgre3qfgM8AtC+l1fizsTBPtvOS12WEwQ3gtl
K8eNEpz2Kqvku4wgbGhVGzVhEvyHd+LEFoogDE3FvL4/TDCfv/7q9+qCsPLR
/iMJ/QRv6wjMUNERhM8DXcK7ugn2MyuxSzQUhJ9DTh0Z7QS/TueY4UWCoHK6
pbywmeB2we3/XTUThBc9GnUXGgje0lM96GEnCE4dCv+NfiH4guX6mx32glBu
URiUU0Zw6ts9OnZHBSFPRqxEvpDgdZdbgo1OCwJl3O796nSC0YDkhozzgmC9
/M/t0BSCz9scrZQLFASWRbRYaiLBLZID/KsjBeFqQX3kXAzBla/PzvDcEATl
cSxefpXtf4PZDsE7grDKKsZw60WC7+5dly77hK3XV+9Tp93Z/o/RMTfIE4Sb
E83fPbYSvFm8mLq5WBCOJSYtzhgQTH1pJritXBDiKyVOgQbB3BX2XbtqBaHf
dgn+iRD8aS4k6OSAILy8enNIYZCF30WvPn6aIQgm3mHJIW0snCxyx+L8uCDs
vSzmdvc7C1/WeSEUsigIn3xnYug5LGzs8S3zvogQxJy5HXcoiIXftor2fjIX
AlVPR2/LeSZ+eupZVbW1EAjMt03vZe9/t/6qva2zEwLeQngtwd4fPflNL7U7
CcFXu1ilP3lMrGTpIjrpJwQ2nC5TxmeYOPHD250KL4VALeCa/uXvDBxjbqyj
miEExip100c/MHBQU4WY1jsh4Lwy8XgpmYEPjv7qN8ZCQHm1xTLYn4EFVBYu
2zULQZcHLd9bmoGjHlrmhnEJg9zxSVOfI3Tcp5Fs5s4jDI6t8YKt2+l466e5
X7aCwnApVejSCiodz4++mZWVFYZbj6IGU2dH8Hmr9ahUXxh6mzUpmndGsONC
Q9WcqzA8LaQbe38YxtrOjp0+n4QhGAr/ev4exDdnc70dqoUh98Gz4l9Fg3jk
Ns/ybXXs5/2O1fAkDuIXxaWKAu3CMDXz53e3wyCWEJH3eDshDN91brirtg5g
zqr+ScYGEfDi7pLyre7HLZpn15wMEwGVlKqgtdd7MXfcK/HaKBEoLoBuh+O9
2HiiW0X/lgjkHBqNDTLsxYn5+yxWJYjA+8PMs4oDPfg4GIen5opA39Ogio2o
B4/sWbk4MCgC4V78azKGuvDChYSxU7tEoS5kwxIxaMcbiipb3CXFYHQo2mTj
pjrsMvV6ZuGROBwZMuMSJSWIsnNNZUCSOFQUupyovs62+1OP+xOp4nCiYfGi
8N0y5GaprjP8Thx4j+YHjWmUo9OJ6Z5N38VB4HqWtuPxz8hna1ZH2jIJCLKL
6VYq+Yau3Mr9dNBdAl4cM61cId2EtvUK3W04KwGHNusc33+5CXEa+h638ZMA
3vt7aOe6m1Bk98bFrVclQFu00WvFi5/oml6+geZ/EhB9Vf2wn2ozim0rSOOs
l4CMZ2e+5iu1oadKODbbUBIOJToXt9E7Ue1VFvd6JAnfjl4vmZTvQotd0lc9
zCRB3fPv7kabLuSYEOyrYCcJAo1P7YRedCEJPuPD9z0lwX3Nf18e7elGD2Zz
FQKfSIJNKM+1vck96FZNWh5wSoG3whW557L9qFS1Teu/NVKg3ax1stysHzEj
uV/P8klB70mtzjee/ch6i1tCjrQU3FipxPid14/W5FFCFQ2kwKtJXTTVagBF
PE2yXO0hBamjda/jTg2i4PMP2n/8kAKH4bybDheG0amptQ9Lf0rBqYT5i8vj
hpFdUNiejN9S4PLaXuNcxjBSvXL6y/VBKbg9m9KZ0j+MfsVtfWu2JAXLn/NX
O+0dQbRs1tUiTWnw5jCOG1KgI6mNLqZpetLwYOSgDzGho9UFrTPxxtJwohx5
Fu6no46yT2f8zKUh7FBNeUIkHd2oe3yQ5iQNLVEXjSP76WiAmKu/vCkN86/D
93x/yED1PsX99+9Kw7Ckj+JCOgMVT9OSwh9JA0v6Ti/zIwPdXZISPvFCGsx3
ZXjxs/MT8E4sSpVIQ0kOq87BmImod90K1lZIw7KdWhK3bJhIVLTDZ+6rNBh+
9WJdPsZELJmqoeYmaVA++DXuWQQTJWg+bbjDkAa+3A32LTVMFJkjdDNsXBp4
aAXXlncw0Xn96xbeM9JQGHVzNZ3FRDtMfYttOGXA2r3o0BQvC03Z7ExdLSUD
qVWXHMd3sZDtmenAkJ0yYPf20f4TZSzEW2KTw9wjA7mhPyL9a1modl3KiKO9
DPz0/sKxuZ2FbNJtHTa5yoDsz01bWqZYyIr+2mQmRAY+FrltsWbnX+5NHL6n
ImSA0qrK0aVL0NfrBzJ+xcjAeq7tyxQQQRZqK2Tex8sAh/GnA3n7CNru7rh0
LkcGoPiGHW8wQSsKcgy6P8gAOTAnLxFBUPlqbm9bLAOJEXHHG28StOXV+y7N
GhngS/7UbPuEII6ZteJPGmSgdT63VyiVoDKLE3t4WmVAUC9gTVQGQaaD68vp
/TJwPNPI0beIoAV917nDDBnYnazuPPaRoOLIIp3qcRl4TmsxkfxK0MVf/J5G
szIQHGDdOv6dIGMlt+evlmSg/ZiHakAjQbO+pb9FV8lCfdWQzJsWgj58FhKK
WicLrul702P+EGTg+jHcVVwWtgpaHtk/QNBUrmhJk6wsyBmLeJiOEJTH6fV3
m5IsPDm8v7uJSZDvvk8a76iyUF1bUiA2RpBeisTJDbqyYFjUPsI9SdDEhPeT
OCNZ+K0ofObVFEE52yp/cYAs5HEmGU3OEHTurjSvt7kseBy6YcWcI0i718ei
01oW7urjx3fnCSI61Zd37ZWFZQ0TlMEFgjKvyH0oOSQLpbeKhgYXCfJq8Bul
HpOFqZUhXfeXCNLY8F0l8aQspPEErh1jY8Y5heNrz8jC5pIyt1k2Tv8Y+CjI
RxbazqKZTDb25K+rHw6UhVef3hfys7HacaU1h0LZ44mF2fJs/uG3wVu/RsrC
bdGizg72el5xNAYZ3JSF2Jg5C8t/BLnZqr5LvSsLrSF3WMdmCVJOukwXfiwL
KxLPt1CmCft9+6kQkSQL/i+OrY1n65GKqI6TqbIQfnLmZj5bL9fbV+45Z8jC
tuQ3p8JZBCl2ttQ0vJOF/RzlSYtsvXs1tVZuLZSFc9P2W5UGCUoOidicXSYL
v947H/jXQ9CJ2t++cpVsPq43g5c6CJKX0cm8/V0WHI2/L8tsJajrTPTAYqMs
rOYwzY5pIiippEPGq00WvtiYrxD9QZDMkZjb1oOywGr2+KpfQdCjRmXuXUxZ
6N9tfHJTCUFCVp+u7J6QBfEL2v4zeQStNVjwtVti92/5K/XE1wRV/KqZfr1c
Dnh+WzCvJBO0TCAhN22lHMROWzltSCAoONpAM32tHBxHz+JiYggqrFhJT18v
B8/GxPz3XyVoerHxZQa/HFSmmti1BBF03tdbPktUDsoG3ulzu7P1PfFaKEdB
Dkq2X5sW38rW7z//+hwlOVilqPQ5w4CtT4vZrXeqcjA//k/nH5Ugp909XO+1
5OCqySnbChGC9plI/svfJAetZz0c1w6y0B3/4fwPpnJgcSVlzKuNhX7k5F8o
2CIHh5k7Z298Z+8HqvtYhRZycGtlWtNMDguByM3ukr1ywKlpxns3iIVC9jg8
KT0gBwePQ9R3TxYquqHqgA+x6zu23rPCkYX0V3xpKjsqB/+iDi92b2Yh6uhi
ZYWnHNCvD2uy5plIvNo7s+qqHFBiI6OcvZjowErkWR0pB833PUZdHZjoHvCo
fLsmBzFRBupKO5iIL//1s5rbcvCRM/dTlxwTrUrpufcjQQ4uvPvsse0HA41f
2nfx5zs2X230lUFZBpKQFfQXyZcDyX2NVYxVDLSlrP78wUI5YH4Q6nnJpKPY
5bs9WsvkoGnuaxwU0pFmlOWhP9/lwFo832uFLR15xJoa9A/KQZ7A90QerxHU
k6wyMSkpDzNuoWa7/IbQmu2DrI2y8iDwt/DVf/uGEK3/xYjfBnl4Dukv0nWG
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
SNjc69JUvRqs+6UccmxoEMWPFp0ZbmLX4+Nl85xrCEkkcDu1N6uB7JR9R7bS
EJIZTTEt/6MG74T9DGguQ0jp8e+lm8NqoGTuHZrdPoT0WTuuUJapw5xI9ofL
FcPoQ/yD82Kc6iBQc2T2aOcwMt7Wd2Itlzq0WwjMcf0bRqbxl7eNrVMHN9/r
OzNpI8h8ax5niZg6PJYLKLBJHEEHHihE7dNWh52cUtkvTtJRC5zzt9BVh7u/
RBsHQujoML30lLG+OvifztVgPKAjJzi8Q85EHTZ+OF289QsdnRyJ5WZYqMM4
d8Vr8Q0M5Ge6GHP1qDqY5ip+3lbLQDNDO4P9TqjD3rkHItk9DBR099Fpd1d1
MGrckNA5xUAhQ3o2uz3Voaf85q3LMkwUecdzvaS/Orjc6ff54sFEDwZaYnNu
qcOw0dlX1tNMtHxapKw/jj2uNZ8kxc1CXlz7idh9dVA6ZZD3VIKFzFXqbS4n
qMMhDo3wUhMWmnKvWmP9Sh389lydPnSJhU4EcRlffqMOxW1x4qU3WKj2upl7
TqY6rH1tz9WUwEKpbz5Wir1Xhxr5o+lCBSx0gFkQ3v9RHSwdfYX6CQuVL0y/
E/usDhLDk5GN8yykuV6/d+dXdXCKg9Tz3ASt0srZklOrDq5bqj3K5dl5Fo16
99erw7RoTf15DYI6dmsmif1UhwHzDe6NhgTleacthvxWh1NxYu9TdhG0IWxI
I6dDHWYHOmjChwi6Fad0pL+brc9D87MbnQk6mZNctHNIHcx2iH0O9yNIePJx
gNhfdejNSzFyfERQKGfry50z6vDCuEBgxzOCGEKizSH/1EGvM3Gi5xVBnzbe
3di/jArPqz9epuQTpG1e7yK2kso+311Z9Z2d9xMP8N7buZoKPRW81gqfCLrg
HzOevZ4KHodCG3//IKgrqkq+n58KVRonpjf/JMg6nmuPmDAVErJ4n+xqI+jD
K7PQnWJU8LsXV8jTSZBiwdWsEEkqPLH5CBd7CYqt+tiRLUMFBWVLysNBguZb
l3j65anQ5ZJy5DidnfdHNm8Wo1Dh7BHZrlYWQU1zF0/vVKHCzJ3m5xzjBMHa
woQQdSpMVxUl/ZwkKF1ypjpbkwqt0jd+2E8TJEbVn+ujUeGeYJvq9VmCwk0u
qIptpIJk2uo0938EjVrn2O80pEK+m/XO6XmCHI+MRoVsooK95xvu/99/+npG
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
             "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PlotRange" -> {{0., 19.9999996122449}, {-2., 2.}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>]]& )[<|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PlotRange" -> {{0., 19.9999996122449}, {-2., 2.}}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         Plot, "GroupHighlight" -> False|>|>],
     ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
      4.503599627370496*^15, -4.503599627370496*^15}}]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
01oW7urjx3fnCSI61Zd37ZWFZQ0TlMEFgjKvyH0oOSQLpbeKhgYXCfJq8Bul
HpOFqZUhXfeXCNLY8F0l8aQspPEErh1jY8Y5heNrz8jC5pIyt1k2Tv8Y+CjI
RxbazqKZTDb25K+rHw6UhVef3hfys7HacaU1h0LZ44mF2fJs/uG3wVu/RsrC
bdGizg72el5xNAYZ3JSF2Jg5C8t/BLnZqr5LvSsLrSF3WMdmCVJOukwXfiwL
KxLPt1CmCft9+6kQkSQL/i+OrY1n65GKqI6TqbIQfnLmZj5bL9fbV+45Z8jC
tuQ3p8JZBCl2ttQ0vJOF/RzlSYtsvXs1tVZuLZSFc9P2W5UGCUoOidicXSYL
v947H/jXQ9CJ2t++cpVsPq43g5c6CJKX0cm8/V0WHI2/L8tsJajrTPTAYqMs
rOYwzY5pIiippEPGq00WvtiYrxD9QZDMkZjb1oOywGr2+KpfQdCjRmXuXUxZ
6N9tfHJTCUFCVp+u7J6QBfEL2v4zeQStNVjwtVti92/5K/XE1wRV/KqZfr1c
Dnh+WzCvJBO0TCAhN22lHMROWzltSCAoONpAM32tHBxHz+JiYggqrFhJT18v
B8/GxPz3XyVoerHxZQa/HFSmmti1BBF03tdbPktUDsoG3ulzu7P1PfFaKEdB
Dkq2X5sW38rW7z//+hwlOVilqPQ5w4CtT4vZrXeqcjA//k/nH5Ugp909XO+1
5OCqySnbChGC9plI/svfJAetZz0c1w6y0B3/4fwPpnJgcSVlzKuNhX7k5F8o
2CIHh5k7Z298Z+8HqvtYhRZycGtlWtNMDguByM3ukr1ywKlpxns3iIVC9jg8
KT0gBwePQ9R3TxYquqHqgA+x6zu23rPCkYX0V3xpKjsqB/+iDi92b2Yh6uhi
ZYWnHNCvD2uy5plIvNo7s+qqHFBiI6OcvZjowErkWR0pB833PUZdHZjoHvCo
fLsmBzFRBupKO5iIL//1s5rbcvCRM/dTlxwTrUrpufcjQQ4uvPvsse0HA41f
2nfx5zs2X230lUFZBpKQFfQXyZcDyX2NVYxVDLSlrP78wUI5YH4Q6nnJpKPY
5bs9WsvkoGnuaxwU0pFmlOWhP9/lwFo832uFLR15xJoa9A/KQZ7A90QerxHU
k6wyMSkpDzNuoWa7/IbQmu2DrI2y8iDwt/DVf/uGEK3/xYjfBnl4Dukv0nWG
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
SNjc69JUvRqs+6UccmxoEMWPFp0ZbmLX4+Nl85xrCEkkcDu1N6uB7JR9R7bS
EJIZTTEt/6MG74T9DGguQ0jp8e+lm8NqoGTuHZrdPoT0WTuuUJapw5xI9ofL
FcPoQ/yD82Kc6iBQc2T2aOcwMt7Wd2Itlzq0WwjMcf0bRqbxl7eNrVMHN9/r
OzNpI8h8ax5niZg6PJYLKLBJHEEHHihE7dNWh52cUtkvTtJRC5zzt9BVh7u/
RBsHQujoML30lLG+OvifztVgPKAjJzi8Q85EHTZ+OF289QsdnRyJ5WZYqMM4
d8Vr8Q0M5Ge6GHP1qDqY5ip+3lbLQDNDO4P9TqjD3rkHItk9DBR099Fpd1d1
MGrckNA5xUAhQ3o2uz3Voaf85q3LMkwUecdzvaS/Orjc6ff54sFEDwZaYnNu
qcOw0dlX1tNMtHxapKw/jj2uNZ8kxc1CXlz7idh9dVA6ZZD3VIKFzFXqbS4n
qMMhDo3wUhMWmnKvWmP9Sh389lydPnSJhU4EcRlffqMOxW1x4qU3WKj2upl7
TqY6rH1tz9WUwEKpbz5Wir1Xhxr5o+lCBSx0gFkQ3v9RHSwdfYX6CQuVL0y/
E/usDhLDk5GN8yykuV6/d+dXdXCKg9Tz3ASt0srZklOrDq5bqj3K5dl5Fo16
99erw7RoTf15DYI6dmsmif1UhwHzDe6NhgTleacthvxWh1NxYu9TdhG0IWxI
I6dDHWYHOmjChwi6Fad0pL+brc9D87MbnQk6mZNctHNIHcx2iH0O9yNIePJx
gNhfdejNSzFyfERQKGfry50z6vDCuEBgxzOCGEKizSH/1EGvM3Gi5xVBnzbe
3di/jArPqz9epuQTpG1e7yK2kso+311Z9Z2d9xMP8N7buZoKPRW81gqfCLrg
HzOevZ4KHodCG3//IKgrqkq+n58KVRonpjf/JMg6nmuPmDAVErJ4n+xqI+jD
K7PQnWJU8LsXV8jTSZBiwdWsEEkqPLH5CBd7CYqt+tiRLUMFBWVLysNBguZb
l3j65anQ5ZJy5DidnfdHNm8Wo1Dh7BHZrlYWQU1zF0/vVKHCzJ3m5xzjBMHa
woQQdSpMVxUl/ZwkKF1ypjpbkwqt0jd+2E8TJEbVn+ujUeGeYJvq9VmCwk0u
qIptpIJk2uo0938EjVrn2O80pEK+m/XO6XmCHI+MRoVsooK95xvu/99/+npG
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
          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PlotRange" -> {{0., 19.9999996122449}, {-2., 2.}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 19.9999996122449}, {-2., 2.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.9345411383063517`*^9, 3.9345415213381824`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"e643bc13-17e3-4573-b2a7-1735d60cbdaa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"a", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"b", " ", "x"}], "+", "c"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "6"}], ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"PlotRange", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5"}], ",", "5"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "5", ",", "0.2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "5", ",", "0.2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "0", ",", 
     RowBox[{"2", "Pi"}], ",", 
     RowBox[{"Pi", "/", "100"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.934541171247322*^9, 3.9345412918565207`*^9}, {
  3.9345414138265533`*^9, 3.934541433317947*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"9da849cf-6917-4665-9dbe-613e5d9b87aa"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 1, $CellContext`b$$ = 
    1, $CellContext`c$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"\:65e0\:6807\:9898\"", Typeset`specs$$ = {{
      Hold[$CellContext`a$$], 1, 5, 0.2}, {
      Hold[$CellContext`b$$], 1, 5, 0.2}, {
      Hold[$CellContext`c$$], 0, 2 Pi, Rational[1, 100] Pi}}, 
    Typeset`size$$ = {196., {58., 62.69635354208958}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`a$$ = 1, $CellContext`b$$ = 
        1, $CellContext`c$$ = 0}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[$CellContext`a$$ 
        Sin[$CellContext`b$$ $CellContext`x + $CellContext`c$$], \
{$CellContext`x, -6, 6}, PlotRange -> {-5, 5}], 
      "Specifications" :> {{$CellContext`a$$, 1, 5, 0.2}, {$CellContext`b$$, 
         1, 5, 0.2}, {$CellContext`c$$, 0, 2 Pi, Rational[1, 100] Pi}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{460., {138.63403328722342`, 144.36596671277658`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.93454129373483*^9, {3.9345414149255457`*^9, 3.9345414340261393`*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"40b60964-7cda-4ab6-a55e-2ab95610c734"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"x", "^", "2"}], "/", "4"}], " ", "+", 
     RowBox[{
      RowBox[{"y", "^", "2"}], "/", "3"}], " ", "-", 
     RowBox[{
      RowBox[{"z", "^", "2"}], "/", "2"}]}], "==", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"ColorFunction", "->", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
      RowBox[{"Hue", "[", 
       RowBox[{"z", "/", "4"}], "]"}]}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9345416816372123`*^9, 3.9345417643770795`*^9}, {
  3.9345418260378613`*^9, 3.934541834395406*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"a8ea60d5-ff70-42e5-8b3a-29b7b3eb70cd"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
5INzp8Q4XGf+uVq+F/1BXAYc+nUnTtq9fA3PG9B+AvcPKYmJrJaLe3cFvBwx
nvufWP9bms7Y5JTA8zZsP958PXrXbbV4ga3bpq/Gbaqpz+1G815iTzE7TZjU
5FXycj1NKeJEnFPAkc8HnnxP065Law0mj/MU8oXbo45OSypmeSfgyP9AvufI
HT3byiVS5AEgH2LSeYS2P8fR7tKug4yWFFULVH5w8b2R6zrw/gPXnlcaVZCq
JaU8xXNXv03XizSlNM/WVZ75bv9mTbXvKl1sPkbPQpvJP/efOaTsY6GQcHKt
j1vdShYPTvo4eXSDzSUMp/nblJzyTyc2cXngkU46scofcibvesPw8JbgDCFy
nk7nTvWrBZrXBY54luUzVT86OxxTl0d/EHeDL4MejGfn34+GrA9QMnnKowEv
FYLW7dqZzXki6cK6QoKCySP/D3nan7uzWlmdMa1iuKeiR+ZNeSlbJ5SHwndR
Pq7NuFsPLcZqqMnju8D3aUv2vBz7lePQk/FzniKndQ3DKS+A/i9NDGl2/y7P
n2AeaV7Fsce20NJpKoGuq+S2YR776+hKaV5627DQsRsf60hpnrnWj5XSPHPz
pU9PaEVwHPL2bn5drPV1pMhfQR54SsoK5clNCkHf55DHYZd8hqNdxnvW4gm7
HPWmWXLcpGGT2NcKXSnlxeafuiYblKPN9MA+VzY6FW9h+EugPBFwrHPYz18J
P6peGBQzefChwClvdfxU458G+VweeG4P94h94aVMHrwS2kU+Cvwd9FM+zjtk
+EeH1RUC5a3uHrwX/2UEl8c5JdXOtrvT4pNA81fAO1edsjLYksTwk4maHY3s
E5k8+CasN+jHOEvXjRywoaaC4cjLQT/Ns+F7LQ3uzW2byvN7QSbLbv2wSxco
/4L1LwuP/SxK0tn6AX7//miNpuZZnPeZ4qPc4VQjUB7q+P3Gt+bZKwXKK/Xe
t6HDfc8qtXaxX4Ajj4d5oXk84DSP5zi7xYi+20oEyg/GDmj/MWhQnkB5Jdgf
2k/YMcpn9e8dM8FLpmQ4+AX0h+aTgYMvAO59btP80wZ5TB78C+ad5nuBX7q3
1nKZnoLhWOeUH8G8Awefgv4AR38gDx4E+XOsK/pdwGFnkA8HDvuA/DP6T/kR
4JQfMe1ctMXlZwXD76c0PTLvCJ93yoMAhx2G3wv9wJE3xvdCD4s7anHYeeBJ
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
5eNG/V7My8yAvh9CVpWIKW1m546tJ2c4/KX1J7qXJK/k5wXapfO7/8YaHYk3
x1n/p+w53me9Ss1e3Q93TCr9kilSezWj3tOGQaFpIj3vJJLv9UJdeNyH9RN5
svPZlNRqkZ47LfuZJV5p/8d/+GzVa62JkuE4r6l9s9k+pCJvZ56oo+HbsGMs
t4fwZ+j5kpuu86p0UrZo31ymo1zGzyPIU/vfaJD7GtnjdHFJQbDF2b/sP/X3
oOeZ3xyr54E8jgNer9/LU20Guov0vKBxItZV9cYdg97bJIkW7XcNCfrrvGM8
CDn3J3msmTh1No/XgPcfdL3OmEi56Lzpc+VdvwKGY13R853qx3roXbdoY/RJ
Hj8Cd7ZuMcz0ebG4329uq/i/7ADGJ9wsv5VVAt9HGGfYK4zP4i5fqr4rakST
fhslUU3V7LaYZvv03jdHvu/g51tNet98iTPf79T/h7w49nNFh2S5GO03ZexI
G36+sN9dtNJ73OO42vki0vMx02ab5wYHlfjgTtSKBk/U7LA4rSbB8Kovt7fQ
n7W/X/DZDDV7K1K7Xf/ZGFO3HkqRnhehCxscOfNRJR70DIm9E652LojpUUNP
WwfyfYFxmP6kaLHuMrVzSvT1rXMkLZyfO9Svxjh0X6zc6/6Qv3ePfqbVLNRf
da1E9G8w/tkCc263YWd8H+WuSJ3A7SpwmxCdlPRQfv7S+BrzbloZml1ZIRc7
6s5vrFjIz3faT+hZ9O+uIev2lovmCVPOryvhONpdetv+5qUk7p8ANxjgffGQ
GT9f0B8TPwvb/X/5P/R9N5qf/75m+nozmaaM5ufxu8E0H/64e+cox+F6Mpo/
Dxv6QTUhRVtG8/BHC0+77ZTqymgeHvppXp29j1kbJ+65r/GrtXaRcNfb0nXg
/7/bSPKoyo8n9zf+//foSd4Velhe19gg/8vdIiEjoN/vtIY6DIce9753B0Ub
6sloHni4pNfYloJERvPz0E/5CLGnwcTQXtoyyl/g965p/n/k48dXmjrryCiP
8Mh+RZxEU19GeQS0S3mT7ds3jVx0TlNG8/xmjp2qj5yVMJy+8464ctT9r/Ne
zshj80Lz7VuubLQwHq8lo/lwQ08PPa//fyed8A7s3c9afMvjJst2TpWz/tP8
baBdz8oeFzRlNN/7QRzhvXiCpozmdTGewJ1sTu73WsjfqaE8HXCar3YY09Ow
Q5RERvPSkKd5cgPFq87yMxyn7wHRPPn6fsYzdQJ1ZDT/POzRvpvXverKKE9x
u0+npmF9DGSU11h5+ZvuxFADGeVl9Mab3d6SWEdGeZl2c88bVqwxYOPP4uWF
J8+XhtZlOOS9unvmrI7SYO3ScWA8RevpX3or7ghnjQ+ENx/Gcfbu0tp4x1n5
HMf4BBnNjI9vo8lw+k4E5Z2xPimv/eRN2veJM1Qi5YW/t3NxdJteKWJ8ELfe
GfbhmKGymsmjPzsu9LwhK8gXKb+J/lCeFP2hPLim8dWjH5Q1IuVrck9ecGod
USNSXmZv2s3nPwdznL7ThP3efqndtPqtLwtzjqpSnxYWiJRf/rq5yW/fSCXD
6XsxwBu0afEpb3a2sPqlosnmmRUi5c2tLrzwvHpaJVLeh72/Q+oT2O9yEz4a
8pivIV189rxzkgsHLn8btq5dmUjrFqZ5JT8/v0AlUn58waydkTOlNSLl36Gf
1jNQO498+I753Z3b/mWv1N5fJvnwabo/DT3OcTsGebtnv1xd4vm+gB/Y3cx2
T81fdgB+46Auu707/2VP6PsUGOfm1ovbL1qXJzZ+tOr10b/sM31PBHq2Te4/
TSs0XaR21W/E1rZv58jF5z3vDTFx5ucg/X1+mq+WPb7+YsUtfl7Q9xTwXavf
/Kqc+UYujtyXmPPMlJ+P0G85OdfY9q9zGXpulzgFZLfl5yx935DyL3S9ge+g
62pLI2Xj0aPk4vmry1uIO/n6oe9KUL5Gd3XvdobOfF3R94gpj0Ptv0PLdxla
ZkniqV2fP7X4y+6xeqpKyxlTqjmO9dA9vcHGr3/ZPayHuXFdLC31lCKp8xGp
ve04/v6nstV3RXpuIo8ddONcF9Nofm5iHOYFJHfZe4z7b/T9CMrXWFYp7k1/
rHa+iEmXhfk70tTOF5H6h8jbA6c80aTE+l4djNT8GfFGuWnZ7vlq57vYb+iE
unVC1c5NUe/b+ee3BL6e6bsVlA/yOl56c3ohxzHvs0Y+7LLfkfuldL/Q/Hx5
w5/hXRK4n0zXD+VDG0wdW202nuPoZ2FYVLRqBz+X2bvbEeFOysdq57K4be+I
pxHDuT/A6m+bBM2946PmP4hHdtqtnurE/XPIN2mROrXVGu5nsvzMlcLddyK4
/afv6lKemtp/8OZznK2OLvfIZDh935by6fR8pO8poN1ys/wI/duXxKLUk/tK
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
IlWML/CSjjau8j60/8JvC91m5MzJ+STsjHufTvhvyTN2zhL7MuSba8wymfLg
p7A/8HbeUcnT6kpU2l/2eLfOFfsiFT/Mceq2oOGJXBV/OJptV+ucW46Qh/4X
bXeumDWgSKVfHmohPR6MLlNpZ7d/C+aOuFcu+ovx6rmz0KTOPOIhMb7Nq5Zq
3I6k/0FA3jJ49JPoQKXYxyG/aPQwDV1Tis/R390fJ5xf7lUm9mvgdroGGiNq
SVTk/RP6zzoXWin0ww6BHZZ3zPuvQsbbud3plvmHH8R/Aq/nvtG/8hHF/2h/
45xtH7Z3UcWzWo3petaU9OC72t6rjg9dnSP4QLQz8FdA7eC+RTK+3416abk9
X5kl4/vmk9gQB98mJSKeAd76cJuz5XsLhTza4x3/4t2rvmUyvn/VGjqk6a1w
OicP+ficT3rbUoh3hXzy3KxXo89RvAT5bRfehZwPKhd60P5f+gt8J74rEPLA
LYYrv+mE5Ap5sQ4U1mo6fjbxpWLdMDKTTrhLfDL0TP50qGR6ZomK/yQGbuwc
n0f8Kvw5Ul7S8b4l1X3gz+mRzZJkMT8p7/uLH106ftjVAUXEw//FT21v6tik
nsSW70e1tQ8r7W3LRHyL+T7Zr1OyrWuWwMW9mlfz6ibdKZdxP1F00LE9Mo/y
QeBrPSYvG2woseX7+5Q85cuuDaUquFrppadl6hoq7axK9wh9kpOi0q/RWV1N
88I+qYzX3scdClsmVYh4FXjnnbveXjeS2PJ1WEeZdWhybYktX//Pp1c8c+lN
/B7GyzXV6dfFX6r4iDufg3f0Jv4QeOFz9Vle8cRTibglZHexzSni5fDdxNuG
y/r9q5RxPN9z5dm+b4kfE/GSs1rPHRrEEwKPaT9r/8BGqnG1y6Sq2UkLKO8G
Xiu20f3o9AIV/et1u56zMCqR8bgiz+bWB8MnxEOKuK7Z67UpnTVV9NskpRZH
zssRvBn0r7w46ldjWZGM7wvW/Vd93X42V6YS//T91+qeF/Fm8IeAfmofpys/
ifbDf/atmt7iYz/KR+Dn/Ra2+2I4M0vG983d3xroqw8sk/F9JL3J0GLJ7XIZ
3zdjMqWt3T78lPF90HzZqZZz60hU7BN69ZdXQES5ij0Tm+7oFH++UgV/u25D
2r0ZFSp2C+hU1XbCvDIZjxsH244ozrcoU5HvOPVLdsKRSpV2ujU5emORZZGM
76ejAu6ue7okVeC4P+cxi59xD4+rX50X/foW0T0Gf+W3szgc8guSh2aeTPkp
8jXcP7Ovx4SWSQsp/se9OjzfAc7zHdx7w/Mm4DyvQXt4PA9cweJ59CuSxfOQ
5/kC7ju6G+r/ZZBDlpBH+01YfoR2Thhd5GdeI58F3rW0aYbJIjonifuCLrJ8
E3gAy0+hh+dfwHl+h3by/A44z8vw3UnnN0479odn/9t+4Ocb9Z6pfEN5FsZ9
JMu7gfO8G3iHzp28NxuX0HnFv/qXagb5Ka7kquCLGJ8APZwfAM75AdiH5+mw
A8+vgfP8Gnr03/W6O+ptpYo8z2fRfsfg/xyCXlSI+YV29nv6K8d0f6WKnTtF
Nt96uo1EpV+cP4Hf8vgfOI/z4f+9WH4B/Tx/Ac7zF7TT9cnzZ/Ia+Qu+y+N2
4B2vRsTd16H8Au2ZxeJ/4DzfgR6eR8D+PF/GePG8G/I870a/4lg+CzyL5cXQ
z3kA4JwHwHd5Pg6c5+OwP8+/0J4wlmdBPpbl6ZDPZvka2snzX7SH58vQc4Hl
xeL+SZYXQ57zFZDnPADaw3kMsb8wPgHt5PwA9DS7/FVjeV9VXHd6W4cbi4kf
gB7OJ4h7Vln8DP/UZnE45Hk8D/njLC+AfZxY/oX+GrE8C/K1WX6H7/J8Abjs
xJoZJZkUbwOvHZf55mge5SPY73gegfZXsnge7YndN9jl0CLKI9B+ni8A5/kC
9CjVLW8Oq5F3QJ7n3RhHnhcD53kxxpfn18B5Pg6c8wnQz/kEyHM+Ae3nfAJw
no/DDmYsbwXO81x895/b/w0dd4Xya+A8j0b7o7Q/p36tkadDnuezkI9geTHk
98vq5QfUyKMh797Uw1jnCOXp8J89LD6HH/L4HziPz2EHnu9APoPF+cCdvj9t
2LoRxfPinkkWJ8P/eX4BeZ6PQP94FofDPjzPgn14firu1905q29mjTgfenje
CpznrSI+ZHkc5Hk+K+IWls8Kf2B5DXCe1+C7PD8CzvMasf5PMq3wXkx5EOR5
Hg38ba/Z6YHfKI+GHp6Hwk+sWB4KeZ4XQ96a5bmQ79Pe9sHeuhoq48jzWcjz
/B369zF+Q8R7jN8Abn96h0NvH8r3oZ/zHvg/ad0htVY6PSpXuefTblzrc3ZD
6H83+D+y7/L6l2Y6V4m8Cf8/rVj88MIpQ4pv8X/Scc6ufVK/Ux4h/s/L/o8J
/e6dcta/tfgh9AC3chnUqkX3H2Ifhx7+Pxpx38UPv1855ar32/Bzm5B//ynj
9RkLDbGeA7fNOGSdMLFKrEtoDz8fDrsZlZqUFw9XE3pw/o3fl4jzbPx+RZzT
4/cf4hyRkWOS550adoY8Hxfg3J4498XHBeeLfrZLm75jY4mKPL+3E/Lcf/Dd
LX1XjB7cg8YLeBf3zB6mC+jeJ+BV+h723bfS/VGwG7/3Sby7yu4bAX76oZr9
icvfVc7b++28lHvEne5vAe6ou6Np8zV0nwz65Zk0KFtZYxyB83uBxHlmdp8S
5Pn9NpAvsu55JvxwpQpP3p/ld+B5wnqOGRC/kHgAyAc/mmI6tkZeLOqbLH+E
noLa3RpZ1MhDwQtxPgc4523Ap3F+A991ZzwAcF+WpwP//NHn5NTcErFuYz/l
dSisY7xugnWV13ewHsZfM6taXYOHh57HrE4B+V2s/gL9vO4A+TTW/rQ615JH
qOWJ979EXaPs8Vs7SZl4Lwx49bvIFh0m1XgH9m+8dMUodcj1jkXifS7xf5BK
q0kLByjFe17AAy8btGpW/Et8F3rCgxp9kCRKxTtTkD/YI2+prSm9tyXOic2/
0KnlF3qfC/LDNaJD9e21BI5xv7M4JKK/fS2hR9zDU60b2uzPvaz/94u7Drul
OWS/anxUKvSI+4e3dHaVjqZ3XcV49XvjkPDnPtW/evDdFpp7T64z1RbveQHv
8nlW4ExdeicX+p/P1h7TyV5d4NDfcuen+cv/3LP6Vz/wo6+0qhfpagl59GtG
Pf2Sm3/uWf0rD9zRKlBD/uee1b84vrv0/YOLVn/uTf2LY1wKXMLvxgwoEeMF
+/SefVTPsr9Shu9CfvGdVlNeyQmH/yiNF7j9o6YU79vCn23brzQbcKxK+BX0
1/E5PuFYgkTYGfjLwzm21uES0V/oGbd6UWVyAr2zBvkVHT58vvbn/tW//UJ7
bH9dNJnRg94XxvrvMFc5yU9ZKnDs1027D7ile4rey8M88lq//HrO7gKBY78I
f/bBLn4SvS8M+a3PUi4M8koT80Wc6865rWw0jsYL8VLIlujn8ebk/5DPce+W
v+wg+QP037DUzFxQSf1Fe+yyT9cv6Ec49q+2FiUT04PJnpA/FFGonXWA3neG
/pkXti1cFU/jAru5yjplDr1G4w79DQ6MclEvyRX2Ab61nfdAx5flYtzx3acP
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
o/xO/H+q8KTSw5jyUOj5Hy8SP5U=
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJwl2Hfgj2UXBvAvyfZDoSTZe5MRKkn2eMve8TbtvbJXhawom8osMlIyksyi
lGSEhLd6M8sqq3o/5/XH9bvOfc51zn3u53m+z30/vzwduz/VLXkikdiaLJG4
A2dKl0j0uzOR+CB9InGKIxPfCTyOfzkejxunSSRG0LyZOpHonRbL7Yv7GXdN
kUj8glvQTKaZzX5fbDXNSDxJ/nh1XsKzjffyT8QzYQ97CX4NtrCX4ibqjFZn
f6pEohF7IPsLdnP2BPZM9ckS2YErUd2flvwLaFanTCTa6ucHmn8yJBLPiR2y
riESFqv/Em4qlo9uklhz2gNqNMPH9ZjE/hF3ML7MfhpfUacD7T51ZuJj4het
ZYhYITUH47ieWkiQJsaKzaUZiT8zV3bxF3Ax4wuERXEzdcZJmMFfyaSbcHXJ
e/R1Xo3duCrcy34Sl6NZQ1ON5hfrTKn+z7gM/yr+R/kP0VXRz2GcU7wEFId6
atwFRaGl9f8mPoG+stxtcmuw7+O/IT4V57DOynr+Q48X4nqqeR4/RL+Z/nH6
mnQ/8I1mH7eeRdZyUF5d/hP8Y/nXRE25K3ED+A//K/wV1dmozmOhkVdAj6tw
E5qzNOP5a7OPs8ewF7E/UWcCLkabAdJDXfHSeq6DS6m5Us1H6OfQfU4/Hi+E
2exeOJc1jaDPjUcZL+Mfil/X/6fqzcXpxJrQpMYp1X2HPxVuAy35W+GMcV/d
xyTc1LhxPD94sfmT4ZGuW3r5T8fzgJ9T43l4AXLIOSb3/vjNwVp2GtxX3lD6
4fjfcc+gTqwR6kNDmBm96XkG/sf1Gsd3Dae09i7mPOL6L9VDZjWmGy9W9xDN
EjyLZiBf/XiWaUrSTDPOJ6dWrNV1aMVfgH8yf1a9NIAsMFT+FHWG4b/MN5X9
N84i78V4tnCZ1Ld7GSq3HbuoOlPZK+SkEU9rnv7xm5HbEyfpp5/4af4/zT3K
dfgD75Sbl74TnkG3g35WvD/UW2aucXF94WX2CHzUemrEPOpkpzuiTik8SGxg
9I7nGH+kzmScU+3h/A/gcsbX6MviHMYN412I34bOrvNbuBhfcWgHeei+pc+K
S8MJdhm8mK4d/Wr8gXEenF4/o3DJeAfiwfoYpcYw3JWmt3664e/0X03/79H3
NR7F3wc3zHD7Wt7jOh1gP8ZeTnPBNe5KcwmvpcundhL/nXQv0Bxm74hngP9Z
c/WIeaAvbBD/GyenmQ811NinRn71U3mXTMcf8JWkWYszqplHrcr8JWJvYDfk
+0KsEc1unEvNO/GrYnUgXfzG+YrTnzRuQL8I/0Ezlr+Heaq5br3xbnMn5x9O
29m4In8n3A7uZXfET5inNtSCXsaP8/fE6dX9C9dT409cSDybebaqV429DX8K
Vdmf4JN0H+LvzfUUfTp1muKScobSFMJtaL6iORH7hdhTNIPxRr4qNJvwQzgd
VIaachZHb/hDz24j2rWuVQ7rvOX6VzN+gJ1C3is0jeO9wT6qfinj0XKLxT5F
s8mzkVyNJPZJuWP4T8V+x38SdzYuwr8bv4hTeK46xR5lvlPmKYevwq/sB/FZ
OTPlnklz+7fZx1wVcBrXLROuSDPJvVpFMyWeSb4K6n0deyvNT3E/9Hs93iM0
l2MvgCnsG/gqXgnvQxG1utHvw93lPxx7Ki5uPJH/K7yf7lvYF/tQ6Pi/xj+r
NY3vJp6uj8flfiP3lth1mgrB4tfgH7hEtyR+v7G3iF2mKY9PG49nf8mejiu7
d13jPlvLFVzLWi7Fu579DU0L8/wY+yG+K/ZA1+c+XFCsLc2m2Mj5bqlzA7KY
9zztyzQL9LlXeD4uof6KWDP9W+7tTdq38bF4Z+Hd7vVv6mVR6zyuLSeP3Ndj
bxFPxr8Qj+TrAO2hkHnG4QJ4qVgammVxrpKzi38WngdfsufiAubvSZMPf2B8
mn8FzsF3PzwYe1icVfgvhE9PlYyvxvtf33fo6w2cEvfzXN2UmznezTRj1XzS
mgrL+xeuYr3b+Z6g/4tuAP2t2LNc2+t4Suzvty9dQihRFipAmdh3oRLkgldo
5+M5OK259sferO4DcSbg64dbG0+L/uNZMu9yXJW/Jd7L3yLOVubdGO96/rrG
y2KvxDn4N/EP4s/L1xryQFuxCbh0/J5ch8NxnlH7pOv7DP8J/AO0Zx/HHWPd
kRf7MO3buEZcE1jPbozT6/+o/key74f8/M1xKv5tsd+w31UriX893qGvO1yc
7Tg1zU6arK79Q56ZJeLf6Ot9dlr+jOwW8lpFTSir1pg41+Gc8ftSYzAuRnec
r661NMODaAriz8V/cp2X4gzmOqHmaP515ilP8zE+gL+D/VBE7ArfENrW6jaX
t5VdVf3zYs3Vv8y+SnNaj/P1Pdlz8Q3Oak25IR8kk5s1zgA0j9K/at7N7KJi
xaEEXOG/rE4v/gfZ3WgKu29D490MzeES/0WaX2mqsM/poZkeCsovAPkhJ+SF
HHC3eQvGs0Vfjr6LmgXVzCZ2FyRFDn9p/vPWlYW+MP0C+g3WsMWce3FRmjY0
meQWYjeMMwy7PPu0HprqoTC7Hn9q/tNqzYrfLvuAWq30/KF4WWhHk5k/s7lK
m+t38XthOM36uJZwnX2G7x5zz9Njttib9FIizidQAPJBOdgQv0uajfghujPs
hrGvqtFD/FH8h5o38dnYH9m/R4zdhp1crx30X1vOL3Lrx76lv5Q0I8QLqpEX
csc9iHicpaEVXRqavPKv0SWs5ZyaN9mp40wWZx/xWtFrnCP4n9fjxjgvyS8F
XeI+iVWK+rg7bIp3NW4gVgvGxL0y10ScGfeI81Sc4XH9eGZc/7b6H8U3AoZH
zVg3ZIfaxkO0NwZaxz6o9hw5q+QPFVuDZ8sfJNbAPckgnkpeJtyOb36cF+Ls
wXdfnPdgmJwictfjxa7V33igXgrQfZHs9n79EruI3FJqzKO5SNOH5mDsDWKl
4luJ9nc4Fs+/+Dl8Fb8v/q55VuIlcqqqMVKPS9kPs0exs6idh+buuE94ePQF
zYzHx72KswXtMOs+gn8230L1bsa5Gu+h2YXHwPPsl3EvObviPIZXGS9lr8Db
8E7YGjnu3xk99tZLCvaztCvZ37M7s9ew3zbHnzT92El82eSlx+vU2sD+OO6j
8fY4v+FrcXax9uv4Lb53YA2kU7OT+Op4N7Ofib7YC9S/TNuXfRYflXsOv8N/
E/fnP2TNA6z9YJyhrP2j+D7GB3F3tSfgFXgV/AR1UyX+/+FeK65H0u2zV036
R4wvql8d58GNIFe8s/TzZry/zbVcbJnc4zi1nNye/9/E3zWez38Mfx7f+3ob
QF8bLsUZM76h+bqq9w6eSDsJTsEnse/zb4pnTe4kc22TNy7O8+yi+mtivEx8
i3gL9jr2VnZb9h3iHdVvG2cF9drhdJCC/QBuFvsK/Wfx3RrfAPGNGt/x+l+t
39J4W5wF6BfhI3T94zsjvhXiHaKP1urvjG9YuUP49tEdoj+Mr8fzEf+/iPdb
fE/E+zjOpvJuqDNMf2Pk18W1zJUz3juxH+AdcrbGd1/62+ffmfw78FTjcvSD
5L3GzqjOZj0/Fd+N6rbnn8uuGM89O794ff0Uw/PinMM/nL+mcd+413hSvP/j
/0r8A/j6Qz8YyZ9WfI9e1sVvHTbE/x34c/J/Zd4u5iylrz14O92W+AYW7yO2
i92e3cnahrgO98f+bJxL7l7xl8wxCAbCdOP/0ncTbxzvf/We1s9MdgW9DWF/
S1OD9gzuro9u0BMOGFfn/zXOwPRpzHVBLxNwRTW/Uuu1+H8Ne2+caV3fuvJO
8i2J3zF7OX4XBrHfi303zuPsInihcUf2AvyG+uX1f8pc+eKbLfZPvIi/SvxP
UJ/PWWd/tY8ZN+K/Ys52/E35G8c5FOeSsznOB/FdFd/s/PfgaXTd5NVmz2T3
Z9djz2D3ZdeNGlAr/heGx6hfiL+PeAb1TvgJH4dR/Pn4e8U3qzk+izMBbhK/
5zhri70S/1OKb/v4BowzjmvYOP6nKae3eB3aZvKaxrcV/A/3Haro
            "]], Polygon3DBox[CompressedData["
1:eJw13XWgfUX1BfD7Ou57D5CQRroFpEOQklZCaZTuLlFCSjqlBOkWRBAQkVRB
AQFBQEBBpJGSEgSp3/p89/z+OO/NPjNnzrnnnjtnZu+11p516z3W37230+n8
b7TT6c//q/P/5z2dzkMxDhzrdH7V7XS+nfLfhzudVSc6ncdGOp39026fwU5n
m/FO597Yk6X+ltQvkfrRHP9Q6r+ZfXPn+HPS7p7Y68Z+Im2OT/0d6f+5bOc6
V7ZPU/489Yek/S5pv1fa75Zt55Rfyv5HU/94tpdTniztX0rdz1O3X85/TezP
UtcZ6HQOyvGHxz4v9pnZfjFam/KhOfceub7JY2+efp6K/fXYt+bz7RD7X7G/
FfvS9PtkuvtbtstSHk77P6W8QdrMk/5/Gbsv55opn3vPtN85x23TqXvwx5SP
yzGXx74q2/GDdb5XUv5u6ufL8eOx/xH78tStkuP3zv99Yk+b+t/n+L+m3+/F
3jf7t83n+2/sn8deMvXT5/ifZf8/Y28c+29pP0X6+07K/0h59fR3X9pvl/qt
0m7THP/VoU7nhXz+j7N9PeWvZfsg5d58hhnS9v1sS+X4B3P88jn+4PR3QeqP
ir1L7J3Sz+7p74tpc2f2PZL2O8TeJvu3Sv+35//HsT/J9ruU987x5+b497Nd
mvI12fev1L2W7YaUz8m+f6ZusVzH5Tn+gewbi71n+n8l/c+T+t1TfjnlDXL+
a/P9jMe+LfZSE/V59bVb9n0l92PG9PPrHH9LtplTviL9PZv64dj3pfxArnfy
tL01xy+Z4+fwTKR+99jrxv5p7L+n7cKOzfXskGN28exl2zHlm3P+bXL8lOln
17TfP/sO8nvJdmvKP/a85/j/xp4+5Tnb931t6g5Pf3/JcdvH3iv2lrGnSf17
sX+vn9iPpn7f2HvG3jr2Xfn/eewPs902WN//9SkP5hyz59jfx94g9rap2yzt
f5Pr2zbX90I+zzdzfUfm/91p+0z2jaftrDlmprSfIdtsKe+X7ZTUn5Ntn5SP
02fKh+e47XP83em3N3ZPtj+k/Mds/SnvlP5eTJs/p8+pU74j5aUn6jjHP519
Y6n7cu7jtbEfjv2F2Bfk+Ac7NSZcmPKXcr5O6vfLcevl+F2zb+NO9fnb4bpe
n3fZ2Au17/dXfv+xu+lvltG6P+7Twfn8f8i+b8Xupn4k7edK/a4pv5S+1k//
u6fdnqnf1TOT8t1p/+2UN0l5kxx/Zf4/F3so57h3sMYDn33H9PHlsWqn/Ujs
m9PnfLmeC1N/v7EofU3ruYn9UezpYl+c9k+k/RvZfmUsyL45U14x5S/nej7M
/53T/tvZXh+s6/Ws7pHjF835zk37aTxffbnvfu+x/53ytTn3Qjn+/NhTGu7S
fiD1P8jxl7Tr2Tr2dLmea9r4PZK212ZbLO3fSx8f57PdEXsdz1Pqh9P+C2l/
etr/Pvag73aono171MeePvdojbTvjd2X9scM12/749gzj9QzpL3jts31PZV9
B6b9AflsO+bYvrRbM/ba7ZyXpn7mlF/N9fw31/OP2IfFnsX3m/73T38np787
Y28Ze4b0sW7qv+V7GK9x3Hh+d+qHcuzT2eZJ/Uqp3z71f4v9g9jfj71D7CPS
33Vpf1iO2y7Xd2fqV0m9l93QWO1X/5fYo6l7Odf1Rb/lbP9K+fuj9X3fl/qt
0v5C40nqnk/df3L958V+KeVr0s+C6f+otL+xPa87pv3i3iFp/0ra/CKFXVN/
TOony/06N9d3zsikV1fnb6l/N/1Nnv0npv63vt/UXdTu14zZLk75rGxp2nkx
f95L+4PS36Vp/6e03ybnuyr7/pm663KuRXI9V6X9vGm/cq5j4Ym6/7PHniPb
Fa1/48NrOeaDHPvFXNNk3jdpv37Khxkv2+95u/T/87RPN51n0v5/aX+JMSb2
6mn/Ld/PaP3+H0n77dP+kNhX99Q99l1MmzYLpv3X036DlN9OPwvEnj/bOynf
mP3/7tQ70jv+yZEab42726X932Mf0qlnzLP2u2zfML4Z74wXvnP1fmcpn+T9
3VNjvLH+pux/O/VPt3fwF3O/T0vdZ96vno3YH/XUO2rxlFfO9lTa/r1T76wr
0seHxsZsZ6c81WjNFfzW18iNOT32I6l7If3tlusZi/3X1P8i9fvnep7JOX4U
+1Dv1dhfTP0HsW+JfUDs1XOOd71PcvyMaTtj6rdL+dl8n2un/2lj/yftb077
H6T9dn5nsWdNmz+kzc9Sf0NPjcnG9jtS/1nqP812Z8pXjdb48Fja/2Cs3lne
Xb9J3ffT3wmx7+upOcJlKS+R63mrU3OuVb1r851vnWP/mXOtNVHjkPFoik79
Dq7MMT9xb7Kd6Lec7Z6U58ixF6f/63P8l3LM3Tl+2Rz/RMo3pf7mbE+mfH0b
r2Yz/0r58WzfT3mubE+kfHW3npO7cvwyOf6TlL+WuuWzfZzy7Wkzt/HceJbP
d2DOf3FPzWnMbT5Pm6/7PbQx4IfZd1Xq/pzytmP1u/L7WjLbf1L4ebf+X5/z
LZrzXZP+F0rdB9n3SepOyfEP5vi58/kuyec7M/aTsReMvWPaHxv7rp56J5+V
8qnZHkh53tRfmvZTjtazZa75vfF6v/wl9a/keibPuX6ZbYn22T7v1v1ZKvb7
sXtyvTfEXtp8Ifanqb8u9qKxP/IhzN9jL5Pif2N/lvqfZfu7z5XPs0Cub5HY
H2QB8Ga2hZW1z7n/nPoVUv/bXN+sqTs51/Vgru9Psb8S+9TUHzJR/9kLZjve
2JVt0ZRnz3aSuafnN+XVMshdmOt5PfbWsb+T7Y2U/5Jz7p3yqqm/IPVvZt+e
sU/JsQ+ZH8WeL3UL5boOyPmOzv4dUr969i2dfW+Z08Q+PfsfNp7EPjD297O9
k/Lpw1X+QbYfe35H6ln5Ro6/JOc7LfX7p+57PlPqvzlQbfWhzRoDVXdAtrVS
3i1tlu6taz4j5fdyjoNTPtP3lvM/mM8zV9p92Tx+ou6pe/vTnOek2Jun3dSx
p8/23ZRvGK25ud/W9Tn+utg9zq0u9kb5Px57OH3Oau4Se4ydbf2Ub077oZQ3
ME9K+5tyvs3y/X0pbffK+W7K/+XMr3L8Mfm8N1nnpf26aX9j2n8l///RU+dc
I+VbR+t8zntz6u9Pf1PGHsnxh+f4rbN/qt7a952hqh9N3ZzmAjnfr3L8YOom
z74j0/7m7P+q9UPsS2NvlWNmSv2M2bZM+fjcly+lPFu27WLfluOnSXkb5Zz/
d7HniT13tt97t6a/ZdPfNOnv6PR3V/bNm7rpYh8b+7bUr5D6L8c+JfZjqf9m
6n+Y/v6Q/r6X6z0yz/9COe80ud4F8n+f2Mdm+0rKr6f+eym/leM/yPFzZ9/B
sY/K9uWU5892RMrHtD5e69ax/037973vs+/HfouxD7VGTP3+xorY/0391LEf
zfW8lG3Wbh3/Uep+mLbnGc9yvT9O3VLpZ9rYy+T/OTn+7GzLmnNn+0nKZ/ZV
m69mOzflH2Zb3m822wUpn29cTPnN9H9RygMZXz4yv4p9SPssU6f/FfP/oZzv
z9lWav2f7veSazrCWJf2b8X+m3vss6a+t7fWwLMYi/J/l9g7Zlsy5Wdz/Vum
vGm2f1jrZdvMWJDjDsr5/hp7/dgH5/u4K9/HQfm/nuex7ftz6pdPed70dVKu
97nYW/VWH/rSp76PSNsDJ+p79f0aIxYxH7S+j31c9v/J+zb2FrGP9axaL8Re
IPYJsR+I/YP8Xyv2msaMlJ9P/Tbts5yZ8y+d/6t2as64TMon5nNslPpvZzs0
7edPH9unvETqzhir8Wmn3urjR35PuabVc+xyqT8r9a9Yn6TumNTdl2NfGq17
p++fpP6N3OOzjO35vj6MfbfxL/XTpv642A/GXtzvJ/YJ1jtp/2rsv6e/43I/
5oz9eOyzc50nxP5S7Jd7q422c2f7V8o/4YtJ/WSxb4p9X44/yvo49pO91Ye+
Lsz+w32fOd9K+SyfeofFviT7n8z1XzxUz8uP277Zc8wLKf815dfH6zr0dWiO
3yjHz+d9Gvu9bPOnfFL2v5Hy2/pI+Z857mpjQcqbjlQbbc9NPydO1H/2Wanf
bKQ+h89zfOwNR2qcNd6eGntj69Ec/77PG/uPuV8L5ZpOiX1+zvN4ypeb//XW
Z7rC2ifbMSlvnvYr5/gP8nmP7K178N+Un8q2se8/9Velv6vT/nxjmeck7e/w
XBurst2Z8kTO/+veusfu9U9a/0f5jlK+JdudKe/mXZPjr4v989j7xF4r9t9z
vrl6a4x8tFvXd5zn2TvFXDH1Bxn/0/5nYxbC+f236/mF8Tb/L459abatB8rP
d3zKG6Z8der7zU9y2Gmx7479eeyfpn6L2NeY7+cc58XeNvbXR+oeuBeeiyPz
fbwf+zDja7ZHcu4zhqt8qO8obXbOtqTxPcfPn+P/4bmIfXLsTUZqDDQWPpH9
x6a/vfJ/pdgrese245forWd+F2vMbNOlvEK2PVKel48r5ZnT3/Fj9X5epv0+
5kn/d+b6Zom9Q/bfkba/Ham16LqpvzztFxyo3/IhvbXPGGesOyuf4+hcz705
fmHjm+8px98Te4rYG8f+bew7Rutd5vOdmP72yf5VemsM2zPl/bKtkfLq2fY3
R0j7udN2QX7UiXqfd/3Wsm+B7Ptj6r/cW3Mqc61fZxsx/qXd7TnfQ7FX7a05
xAO51hmyPeXZ8FxN1HW7/sPT3wbp7z+j9dmMWQ+l7cexz/R8pv1L7ffr+T8w
7dcdqd/DT2LvHnu92P/Kdmbu10Gxb8rn+6MxzWeJvf5IjRue7Z1jf5NvIud4
2Psk+18dr9+D59u+h4zJ5pGuPdv9xmDfS8q3Z3vQ3CLH/8W7IP39Oud7JPse
8/34nkbqc/q8P4r9Lesj693e2ude3GRe4/rbGDtNt44/Iu1vS3/v5JhL83mO
jn0Hfy5/SepfbGPWK6k/o1Pnuzn1b8e+JPYxsW+P/W7sK2Mvwd8zVu9fv8fN
Un9Y6rbM+TbP+P167LdSv23s78b+R+xXYq8aexb+gtj/ir1a7Dliz5h+uvn+
Vok9PX9P6l9N/TLWeLG/lPrJUr9d6reM/Z1s26e8Vban03Y/Y2HqX479jDlr
7LNjf9V83fo9+55Pf2ulfsEcO3P6G0v9erGXi31n6v+e+o1jrx37HmNx7CVz
/hVjT5H2I2k/kf8T+bxDqd+Zbyr37AupvyX2TrG/meO/HPuG2E/m+G/HXjn2
n2M/F/u+XM8iOX4k/Qylv1tGqz/9DsdeOufbJO2fSPsX036LHP+t2I/GfiH2
XzwHsTfoq8+0XOonUr4q5UdSv0K3rsd1fZC+Fs32efp/wVw95c9yjb/J93de
2t+f9jO5X731DvFuXCxtujn+1bR/3/zY/MzYn23RlGfO9pyxN8ff5/uJPWLd
G/svsb8Re8nYo+ZJ+TxL+M2l/UWpf2is7oP7sVK2v6b8B+NqyhtmezLl73Rr
/z58PTl+ydifev+nv9HYG8VeK23/ljYvpb/H83+KfL/T8XGk/N3Ub9pX5ZfH
ykfBV3FEjt8px6+b+iVSPxS7b6LG43d7635snnNukvpvpv6+2M+M1XPgeVgz
2736TJsf5/4tkOd/Kuu12AunfL+5aPp71Ts49Qtl39Sp/yj2ubG/Gnsm663M
a07v1Bqaz+jYwfq9LZj6B9LHebHv71TM5fyU18v+R1J+NNv6KZ+bffep85tM
+cX0f1I7fsr0/2zsE2PPa/08VuvZy2IvHnuG2G/xefHlxP5i7FPTxxWdanPy
YMVDrjJf439J/fOxT4m9aOxpY78Q++TY88SeIvZLsU/jv+Lvjv1vPuDYX4k9
TexB999njT37WMWT1kr5sXzWFSfq/vksa2bfHL6vwXo+V/S50+aswRp/XO9f
Yl/Lf95bc/DrUz4/39fsfJbZLrZWswZI+W5r1fS9Kl9LDvk9n1vK30qbr6X+
96l/Oue7P318IX2N5bj+XE/faLV33Gyp74l9O39J7FnND9LnzbG/Zo0Zu5v6
hzsV35trrOJ/30j58fS30kR9/tXE8GJ/LfaL3XqOdk8/p8d+3bonx6+TNnO2
++t+/pJPY6Tih3/s1D38acqfZN+vU16B/zntP419U7tfs8T+frfWagvmfFOl
/+eG6rd7vt9W2nZyPbfk37mx/8x/3q213P9ij+X3/lPztdiz51yjsU+L/dvY
M4iLxD4r9l2xZ4k9GPuM2L8zfouTxF7YvJofM9sWKU8/VPFU9Sf5zGl/S+qm
id3HXxT797Fnij0Q+y3+MXEl751c/2Lp4zRjXbbNUh5P3bX8XL5z7dL+5pSn
Tbknx1/A/5DyKZ5z40WO+UNfvZO8Yzwv96c8R9p00/7C2POkfKrnNu03TpsH
U/9Atk1Snov/JOU/GaOsPdP+bu+PHDOU48/1fcaeLfZIuz/q77Fm7db7arOU
/5X7+2bu987irbFfMO/3+4n9p5S/77v2/kr5k3xfnHDea7umfpeUX0v53/wP
7f33Sux3rKdiv5jyD4w7OX6X2Dsbv7Pv7dS/GvtQvvrY78XeO/ZhfN2x/xN7
jnym3bwvYh/I/xv74rZe/lHso9N+OOWj/E4n6vvx3U7Or5/Pu3La7x5712zr
DNd63fq8L/VH8rWLO/eVD2DO4fIHvJ1zHWRc9PuI/Yt83nlSN3nsf3WrrzfT
5t1c32LdGp/PjP1A7OWMkX31GeZL+Ufdut61xc5y/DqxF4/967R/Iu3XNidK
eVvj9kTNP77k++MHTXn1Nh+Zlr8g5ZWyTZPy1Tnmr8ar9PutnH+B2DvwReYz
z+P3kuf6k/E63vjzi9Q/lvYvj9bc65PUf5b6J0freP305Pw9/IV8J/yTKT87
VO9T86stRuod6/fqd3sy/0TsqfkrU/9o+l859nSx3039R+l/8Wwzxn4n9v9S
/ij/Z4i9mO9QvNLznWO3M66kv/7s+0b6XydbX8prpn7etP04x30q/ht729jP
5ZjXjP/5/438ftftqWf2G3zs3u/5fo8bKX/Rx9l/TMoXpP+hbq3N+GJmjr1a
/l+Z9pe53yn/O/VXtOP/N1b9HdBXPqc1h+t507Yrrj5Wz4XnY/uc42j+mKGK
xxg/Toi9Qepv7asxYD3+qaGKB06Z+hNTf0K3xgvjxifp76TYv4w9WexPx2oe
YT6xTV/9jjz/l5pPtWdq2dyTnVJ+KXWvp/2JOf76vur/89gnx77B/FCcYazG
o6lTPj7nvjCf/7jY16T+C9nXGS8fOF+4OPXO8Ab5f6j4XLZ+a4/U/7GnfOh8
6Qtlmznl0zO+fz39n5l+bktXK7X3Ye9o2fbvm/5Pz/9fiQek/uHUvxL7mzn+
x7Hf8duMfSd/Tnu/ntZf3+03Wpu/iFGnfGDK76Z+tfT/tdgnx151rOIBi3TK
J883P51nMOV3/X7Gyx+/TPPPiw+I2YndbZe+1kv91SMV7xL3WmG8YhyzeZ+5
TvHokYrPvZ765ccrRidW97XUrxt76cFJr3+3srNqymtn+0qnrmmtwfKPLtf8
/eIBqxinxbti/1JMUMwqn2f/fJ418nkW5V8VmxCnjf1N/jn3PvY6sV8T1xPP
if1ejv+d8SrlT/k5radj/yz2Z+5l7A1z/Hpibe5rjr8+/3eKvbkYoFhPtmVS
Xjrbr1LejL+tp/rcMO135F8QD1I3Vs/EYa1tZ6Tqj4z969gb85fl+haK/aPY
/xkuf/dXW/xDvGO5tF8y9cemfoWxWg8tEfuY2MvHXin2irFPir1S7FViLyd2
FXvl2E+n/7nFjmK/7fcpTi82CCPTX+d1/oU90ykflm2BlOfLdmjKK6a/r6Z8
gnL6++tgXY/z/zv9PQYXYH4e+83Yd3TrWt/iZ879/MZgxbfEuW7Ivm/GXin2
Z7FvGq6Yunj+1J2Ktf9kpOLNTxkT09dvzFvFm7P9sL/i1VN16hhYAPHp0bq1
nSUGKz7UU6/fSbHmdQYrFmbfNul4qcGK9T3rHTFc8WbPYoaHSbHsy/kPjb9p
N3Xzt/B/9ja8wTTZ94XYz6XNcim/Zp1qPQ6nMV7+hmVbPMv6Ys4cd0zsY7PN
3V/r8UvbfNz8/b2RwlvBXe01XuuTpVt8znz8KHOb2POl/Z9yvc8ZE2P/KPv3
GK/1/pltPWP98GJb38zf5vf/NAeIPVfsycbqOMcv0tYrv+/Ws/g5v/l43Rf3
R0wURuCnI4WreyHlr45XHM/Y8ZX2nf5mpGKRn6bcm/7XTf+rud856Mbhit+J
58FviPfpjC961U7FMtcfLHyF7/5Xw4UXMZ6IocJ+6Ff/Yp79/RX/Eh+BLxFP
XN54F3sWa7SUlxss/AMcBLzCBWk/bafwC++n/SHZTjGXSbsvtPmjuelXYk8l
/hZ74ZTP9D1lfF92sJ5Nz9wyKV+W+sfT/sspTz5e76/fxF4g9mmOSf0jzZ6s
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
+17q1273Rnx/9vxftrcwDc6xa+qXatcCryD+D+82/UDhfeDb4H/g9+Dd4IHm
7y08HTzfw9YEvXWN8EBf6BZ2Syz/lVzfRen/pNQ/n+1vDZ8DH3UyX2Tqx4dq
rmzO3JtjPnL9Of5rnm3zy7TfKPaKsf86XnPKo9L+lv6aa74cuzfz+0vTZsvY
92TbKj+/GVO/ynitb1dq61l4e3yc73TKB8YXNnP/JMgKqGpnppQvTX9Hi+/z
eQ8XD8pc1pwWP+rDXN8JqTs37R4dL9wn/OfXc/4V0t9oOrsq9k6xf5lObxsq
bAGMwW9S7ukWXmeH1F83Vnims2P/zHsUlmSgsJkwFusZkwYKywLjAvMDr7pK
/i+fcz0yXrhP+M/1s2+5kcK8aO+4r8b+bLSwAbBEf0v7x7uFLVol9lPwiPl8
a/FPmA8NF8Z5LvOplHfiK8nn3jT2FtbQKd/lN82/kPLKqX9wpPDfcOCbx958
sNo77na+Y3OE2HPEnjDeDNb9dt/vTf3/Rso/wk9ifSTmJvZ2Suy9Yx8+WP4X
fpj7hmv9Mk1/ccG2GC889xyd8lnyXd6fbUvfZ9qsaL2R4ze0Xon96xzzp5Hi
y+HN7Zb61fi/HJ/6e7LvYOs661Nz2tgPp/3e1hvW6uP1n40v9ztjYLe4abhD
37Ee5Ec1zfKecMxgcQs8c1sO1nW4HpwSnCE8ue1SnugvDqN1qPXol831zEfT
/4X5Pr+b7+xa75ehwlPBVcF7PTVU+MhTBgpvNk+38E1nDBSeapZu4eHOSV9v
jVc9vBvc212pP32gsG/2wWDBi/2ut/A794wVDgwe7IZsew8Ufu7fvYVvg2db
gP819jax/zBW71fv03Ni/8n6x3s/9h+y7TlQ6/f/9VaMbXGxs1z/gPhE6r47
Up/36hYvFW8SfzZfvbDFZ+AD4QmPjf27sYpXm1/7vPAD4lXwEuKr8BXwdx80
vMSDY4Xvg8e7YKDisfDnz/YWngeeAt7iw946n/isccX40pftkoHCsF0CT9G+
A/jgOVJeO+WL0/7fsfftLXz4RWOFW4dfnyr2kiOFufb79jtfIvZR1t+xl429
+EjhTeHTV4597ljhWeFPV4z907HCiK3dKZ+bMX+4W7GZ1XLss/AifJ5pv6t9
4zVvMn+CgYcRhfd0PnMk+FKYc/hyOHN4djhQeFCYWthT+C34UvjRy9vn26e3
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
02c8Qkx4oGKStBHs8/nF6rSl00bbRHwdXsA813wXZkCs/+LRuj/u0zW+P/5i
Psa0G5goTDs+xvZ9hXX/lzEALnGg+HzLp/1Use+I/bdcy1upnzz2bbF3Sf0L
3eL+7Zry4ESty63PcdxwjDYUL+krPtI/rAVzvUvHXibbBdZy/B0p3z5QfML1
u8Vf+m3sp8bqPM43BZ/fQPE9duyra8YloW/QP1hci5nwG8yxUjc4WPwN/I/3
Bwo7P0vqj+kWHn9ksPD3P4x9KkwmP17T74EPGBssvDwfOV85Xsra44Xfd+yx
6W+2xtd4Z6C4ALNPlEYfrT6+G/GTK9Lvfn3FEcEVcV/dX5xEnMVnc/yN+b99
jv/c+iX2eOqfyr41Y880XNj8NbJdOFz8KWWYfVxAfMGN+moOj/tn/WX9ii+J
/4cPiiuKM4M7Y37ybOr2N27nemcYrrm/Pi4aLk6p9rP4biaKT8b3slq2qVJ+
PvU3DxQXxCT4C8PFX+SbwTf73Dsz9q8GinOCU4Jb8nb2f5jP8x/+Zv4UeFLv
umxzpXxd2m+T9s/H/iz35gq+/pHiqJhPfZD9H/u9x5479i9T/zhfW86/SF9x
XHA89KO/+bJdn/J7OW6mlBfwTKTtp7HnT3ks22dDpbtCf8XvBdbmlG75S/lN
55goPyp/6vSDxd/612BxBfxWDoj9msVCX8VUzhuumBH/zJWdiiXt3i19EToj
UzY+1+l9pQdCH+TQbvGrcILogxzeLX4Pns90E6UHwQGKWzx97M/S7oy+4oTR
GLFutX7lX3f9+3ZLn4ROyRcmag1N+4kGlLW1NbS19FP5DMsM1RrXWveN2CsM
1ThrvH29jR9/6tZ8xrzm5+O1prY2t0a31j5jtOY/5kGXjZee0bs51yJDpe9o
TDI2wQDBNsEs0RLDYYFlglmCnYKhgmW6t1vzAfOCK8dL3wzeaarcA0Bz/K33
8rkPznFTTBQ/DN8Lvwzfmt+f/197/Jh1xUD76veMDzPdYHHncGJw5tTjs+DD
4Kzgy2iPw4JPR1+Pvhr+Cr4LPTR6UfiA+Hv0UumP4u/h/9GTglfwvOAL4mfR
bzFG0V9511y3rzhhOGdHdosrRmtlxnye2YZrLDbGXTpc/gb+GHxofLmph4uL
y0d6yXDx3fBz8OHw6zZu6zP8N3y5bVK/VerfsJ7L9ezRLb6RMQu/DD9tr77i
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
jxeX32iiOI+4j2LmS48WZxR3FDcL/8mcgk6ZNYa5hjkJ3UP6h+YqOJW4lQel
/dJjxVGCIYCBgYVxXa6PRv31g4UJEN8V591wojhwuHA4TLhMMAni/3AA356o
/Ab83/zg9PVpRNKWhAmFDRVP/6z5QuUjWLj52+n9y7ewZo5fs6f4JfQUxCTF
JsVtt5yomDEenBioWKgYs1gz3sBWE4WJgI1w/7aYaJiFnsIVbD5RnFfcV3oR
9Aw8k55Nv1m/XRoQMBx8OHw566T9Oj0Vw9w95bu6Fe8X9996omKCsO44kmIY
YuJi4z9I/WYTpRFAK0C8XnyfhgB+sHrxdrxw/HCaBUNDpZOAW4hj2DdUMU3a
B9s0H7EYMa6fGKVYpZijmC4MgFikmCcus5j4my2eAd9C310+Bc+MZwfu4jsT
5YMxtzbHlnuDT4Vv5Z/NhjmAVYBZgEWAIYDTgNeALYBhENcV34VtgCmA04DX
gDWAYYF9gYGBbYGBgX2BgYGN2WK0Yvpi+fiwYv5vDRYHEhbAPnF98X1tYWbg
LOAtYGnEsMSycLpwu3BmxXnFe3FbxWjFYo9u/nQxbffZ/RbrxnkVBxYPhhXA
4RR3Fn+GXRATxkPBRxErFrMSuzqm+f9hFj4aLH4nLIOYrxg8nz7fPp++7833
J5YNUyCvg/wOsAZyioiria/RnxcD8xx5nnBvxTD49Pn7xVrEbMXs5MiRK0eM
TqxuEkdrtGKAYoHm67hEODnieuJ7uDpitmKcOHm4eTTGYUvE/MT+aLDTKsf5
w/3js+O7E0+UuwCnT5xYvHhSfp7x8v1x8NAeoxltHWE9IX5903jpUNOj/s1o
xZTF7KwfcBFxluYcKo4eLhPOkjifeB8uk5iE2ISYH+1rMR4+SD5Z2thiQNYW
1hhs5xCnmaR1PV4a2dYm1iiOF1MVQ7VexKUSoxSrtH7GzaJvB+8O905PD0cX
V9f363vearTyc8jT8d2J4pTAPcM/48LhfcBew2CfNlSarLRZ6VgfMVEaqPRP
6aAePlEaqbRSzVHMVfBq8GtO5AMYKl4Nfg1NVpq0NNFpo59iLjtR8zc4bnhu
2sLmVOZW+EHw7nJ24Dr6fYhHw2TDZn+tU9oh8tyIPV6b7aTYM+X46zqldUff
HV4Q9/TC5t/6T47/WadyF8kHZEw0NsJ5wFt9K/ZGPTVGGiv5dPh2aL4/3C3N
dXrrdNcPm6gcFnJ5nNz8v3iBsO8w8LD3/OW4Fj/pFKbxtIYvoBdN31nMX+wf
th2fCs4e3p4m0g1DNf+EteeP408zf8ALwA+gzYsHhQ91epsf07DFlfhZ87/A
6DseN4h/cvWR4g5d1eZn3hm4mLe0+Q3eJv4mjVwaqvyDuJY4orRK8eLw405r
8x0aqbid97f5Ew1zWuY/9p6dKM4B7PxqndL+OL3N333/9LLdU/eWrv7BE8VJ
MH91PP39V9PfHr3FR8VPwCvCLzqmzZfxjvCPjmvz6QXyefdKeQU+ibHShKUN
S9f6BxOFKYK1Mb4Z594YKb41rUX6jjd2C28Kd7rcRPGAYJH2aBhhPBx8nN0b
RhhHB54YxhgGGWcJvlRuJfmDcIJwcuTw2XiwNExomdAMoR1yy0jhpeGmF5so
vCddj3zsSdo1NJJoJdFPkh8HfhX3aafUb2/c9P7oLy6R/FFy+Dinc8ntM3Pq
X+1Ubir5s/D8cfO9n7ynaGrQ1jAmGBvkDMNxoDWw2kRxCnAFrmvrR/jEbdPf
1oOVD21itPQw6GJo/4tu4WPhZBefKI4UrhRukvxUNGJoxdBKkU8GHhj36rgc
c+RgaebQzqHFI38DfCu8q/xC8rvQ/xc/p18hXxs8AK75rc2/KZ8bfYtLfBep
Hxkt/rzcTPQazXPNd5/PdtVg4Qtoad3YKcwBvAIu/R3N/w6/jkt2aOwjBgv/
TGvn+E5hmvHt7+mUdiP9R3oFD3RK25P+JfwB7v0NndLooHFEF4c+Dm0rGlm0
smhdyWdDEweXcKVOaSHR3KK9RftKfo6zR4ovgDfwlYnCs8N2waDAuMNT0H34
Y6e0JVfN8W/0lb6WfCQ4i7iLuHjyi8ATq8fHk7+JxhVcHnwebCE9VfFrcWx6
tvRvxbfFuemriqGL+dKopUkrbip+SqOPJt5z3fJX81vT56PXZ71n3Uevbulu
+ev57U9t/hWxVjFZsVkxc7FzGr40dMXkxcyXFdMarri8+DxNXJq027QY6Zyx
PxyquLP4M81emrD4EPR4aMnRb6M5RMuMphktIhwL9532FO4FzoP3jO8NFwKu
AL6AJi4NXZyH9dvvGheCxhHtKt8fbiiOhHHP94o7wd8idndZiw/y14jdicnD
H9GdoT9DU5em7wbd8ifxK50xUZrxtN5xzMQLxPvp9dHWo88nbi9+DwNAm+8o
8ai+0uaj7wgzADvA/0YLD24AfuCgvtLiE3cUfzw89rzWVvwXfZU7Qv4GcXXx
dRqCNJY375a/it/qzImK84n38Q/yz4nremD5B/kzxdXE137aVz5G8RAcuB4x
vqGKf+Ha4RjS7qWhThvy3WY/0614lrjWKRMV38Clw6mjtYgTgRsBS0B/FW5C
bPKc5q+EYxAbFCOkTYhjAdNBM5YGNE012nI05mit0a+jHSUnjdw0NO9ob9Hg
ooVHg46WF00v2nQ4B94RMP64CDSl5NGS14zWFL08ekVyUslNZT0Ld0yLj3aQ
tnS16Gs5Bsbfb9dv1G8Vp8i7wDsB1wjmHxfAGGmspKdHj09OLbmwYLhhuWHg
YeGtGa0dYaBhoeVooCNO05K25T/b/Iz/CFfwxdHKRyPXA70DnD65I3D4cP3k
q5C7AocQl1BM1LzHe1+sVA4KMSTvcO9yPjGxAzEEvjI+K74yPjO+LBw7HMFV
OsW9g1mGQ85XOQnLjOMCxw3TAdsBwyxuIH4A23xQ7sEJfYVBhkXG6cLtklNQ
bkEcbWSnldvvk2Ybjbm1O6XlhuOFp/GNTnG/8NM2Gq88fLhxOBp4GVt2iruB
84EbhouLC0JzjAYaDiItMhwSPJBtOsUt0Zd3s/mAPnHGYLFpF+KSwWDTjaYf
DZvNnyrWPinmPlT+Vly3+/rK53twt+LZtGvp4cJbwF/Q0qV3y/+K+4dPSIuM
Zh6tREseWnr837h/v+orH++V3eLL0calb8Z/jLt4dV/5jHHE8NbEbXDHcIhw
iWBr6HnjQOEe4SDhPsH4wPrABtNvp0GHvyPeTJsORwiWcd5OcYdwCvEMD+sU
15CenXctjWpa1ThauEk4SrhbOF24Ott3iuuFsyXXpJyGuFxyqsmtJmee3Hk4
TXhf+F+4TjTwaF2f1CltPBp4uNU4f7Tx5PjDZZqzU7kOaWbhfMIQ0tKiwURr
jA+OL26F0cJT4zLQN8Thg73H/cbtwwnHDZ8tx4yNFadRXlWcIVxHHHZc8S93
itsuhxrOpJxwcsPhUOJSHtGpXHA4T3iFc3eKC7Vi89cs1/wTNAJp/dH8ox1I
o2qDhrekXUWTh9bgpZ3S6qFXiMtFs5p2NY3vrzS8JW1xmoTwl+LJtAphwGBT
YVRhw/DtzXUu7pRWOE1y2uTWXNZeNMdpj5/YKS1z+obWRvCZtNTx86/ulAY5
rWwa2Cs0/CgtbBra6zQ8KO1uml3wpfAStLxoDtHyoullEk0Tidb3XZ3SSqKn
aq5H45vWNw0mOkp3d0qbiV4cfQAa3bTPaSjBp5rjmevR5KKtRGOJVhdNc9pM
5pjmmjQdaS3SXKT1CEMuVmHNY+2Dk4UXgx+Dm4WThdeE30S7E8cI18iaxNqE
fhytPZrztOfxJfgtaS/R7qNRRVuKz5fvlx4efTs5RuUahRGWS5TAJewwDS3a
Zuao5qowwDTjYHZhg+XIkysPJhg2GIYYt4wPji8Ox1Ku1x07xb2kp3dNp3L4
yuUKMwY7BuMD6wOPA39DG5oeNA4BLgH8nfwNMDuwO7BA9K1hEGERYX/oZePc
3dnWXLh4MNGwzXyufK/8oXhW/J74a/+voTBd6kfHKichDTVrIGsh/ktatzhC
uEJyEsL5wvvKPQjTSvON1husK38h7tEqaf/15g98ufmb1m7+QP7Brzf/IQ4c
LhwOGy7byg0vsFLzH+I38bvzy+PfLdz8rTO39nzafNtzN/8kfzkeGy002oF8
ypN8yz3FzTqm+SP5eNdp/kuYfz5ovmj+dbw2fnJ8Nzl5YXz5SPhK6Jm93ik8
n9wffPB88Th1uHU4brhu+HkLNn8qf5uclXJX4n9N4lq168G54r9esd1f/lX+
V5p/tP/kdKThBjMOOy5mRrOAVoFYmvgdvSUYEVgRGgCrtvjev5s/TQxf/siL
mz9Onlb5Wi9p/jV5u+Tvgq2meUXniibUac1fR2uoP/WHpu6HY6XFRZPryua/
oz00IEY/VhwNXA0+QP44/jqYypc6heWmMfVKw3uc1vyNMBz2ndH8kzgIcijL
pUwfmvYzzS7aXXs2PAqbNhU8ybP9xWk5ufkzcVzk+JTrE37lqf7KuXhs84fK
Syw/MW7LHg2P8mDzp17S/KEPNP8o/6u8yfInH9P8nTSTaEDJbUdDjXYafCRt
Nf5HnIXXmi2HOa0pmlNyhdITxP/CNaIPS/8PP84a0lqSf/rT5nPhz8Zhw23C
caIliXOFe0X/kvYxzhvu2xrN/85nznfOp823vVbqf9JfHDf+Z/5oXDc+O747
/mxcPBw+XD45avFJaKrRVsPhw91zja6Vf5n20yf2jZWmlVyppzV/Kn8rDIl9
uC1yjso34vPT3qK5RZvphmbT3AIYpNFFiwsnDzfOPXKvaLrJRXx6ux4aXvgt
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
            "]], Polygon3DBox[CompressedData["
1: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
UUN9dvfoQ3w/aqkArdRVXh1vassS53z+p+U4AyvV1hd30rWN2G2hK5xiHxXj
bH6FoCAcYV8o3jD9zdQ+BzfUOF/Of5m25+BBucvh2su5XXtVumowl30x3xau
b8e+BFeI3zlqPhXzlFrGwSGx6/CvHXORtk7sMfzmu2/gfqIcz8rxjz78KdaC
WKfVOwD+EbM87U345enJXiT2JHNcD4p9B21r6Kl9Bu4T3K3s26AHrjjfwXKk
aZvA/0k11MFt0XZZ7mTuiTnocLxD2vPBbGPaAfc0n7ba20AF2s18isaeIj3Z
A8deuAD7D/x87Z3ZXeBv3PZYc+gawS2wNc4Ecs93Pw/OovkrOzn/xTnwLX7F
4/mrbZp4a2K/A7VoszKS81qc20bF3hl/it9ENXJJTXc9of0kNI73XKzmsT+X
Y5jncW5G8n3FN1WPf2F2IXkuiv0be4Gxz8v3q1i/xTobfy3+DlxB99XcV4n3
nv8D2kvlS9bbWGOXylOC/WXMbWq5gf2VvM/K21m8HTTzccVo7pVzN+7BeNfE
vSLGJit5Xh/y3QI7Usmzyw0XuC8K18Jf6cn5Jc4xc9mz412PNRD3B+5kWnK2
izPenzEW9LVoysQ6kj85i8aZdBZ7DhzHPYDbj3svLTn/xDmorho/itpyJ2tQ
rEVf0N0XY42vKW7zrGS9jXW3I81g2Jc/2cPEXuYL4/lpvNNibcJvjDlG20r+
NXDnQWX3z8Q5HPrEeTjWfVz9vMmeIPYG8Z19ov0FeDE9+eb+pvtd7IoxdvJ8
q+a5ceaGXfzvVNPDrjPla6aWce7H0lfmN1vMCmI/Bo/Td8FNpruWbgzdcLrv
Yy9F9wRNpwDdQ3R11VhYznqxd4v9euzloXh8d7BDjENivY2rEN+O+xVirYS7
xGgn1p3QCtrFvKT9Trhf+9Px3biuj3dGDaX1q7R4I7WPxf/Opz/8l9+rNCtj
TtLeWJ5V7t+Bu9VVUh3TM5J/KfFPpROuo5r3sffDt+wbYj8j1ib4ABqz2+Nv
o/uYZifclZW8+/ENbGZ/GH1jH1FLT7WNku+K2NtmJ3us2GuNiD07XKK+7fFv
BXcr9Kc/ya8kfTo7V/wMivMg7V+4FcwlUFcdpbKTvXvs4YfHXiWes3jr+Z8b
axSU57uOvS3maHbN2JfG+ogbCR8by61wEd+Zsd+Vo65xqwPf68+prOTcGefP
bbHexr+iOH9AddoX5f86/rvEmZM9Wm3D4eI4n2vLhrKxf8X15NstzgW0rXAt
4RVcA+/3DLrp8LO2Xur7yfUoXBNzUJ5kHGM8K8UazC7BLgm9Yw4Uo4X4t0Cx
2I8Zi2O0zemqxLxK9wv7s3hu7NvhDtxuXF/+feI5xL8u/PN8W9E119f341wP
37Crq/u72B/Gdxv/NnD3Q2u6XaGJdyj++4hZzniWhBfVcqM+DXOtxb4y9vsw
POZCcfqpdyA8ov57xX+SNq84Z2gayLWoQPJPIv5NjGfX5jMnO/lv8ATNI9Av
LfmHcJ26X43/GmLli3WZXZX/an4b4b34VuP7VeMGuk1Qhi4D96GYw+X9Lv6f
wAU00+Q9Ivaf0JTvYrpVcf6LvSDN9ljr48xJ9xxNFjs9zgI0D8Q/oljrcLlw
bXGf8Z/Cbsm/VcSQo6Yax6jjnzzJHjX+D6yka0OXX45M3ODYU+GWwnK4RVtO
nKfx+fX7duPXQz/a43bD69rbxTcZ86ocx2FezM95k3908a9uL3tPrMHxjuPe
dF0p3iA+n+dKzoBxFhwSe7o4/6pxOjSM/5tylI35MiPZb8e++2zjMCDWVPag
+CfB92q6cvFM4syCP0ZXBbdIfTvh65iz6BbFnKZ9Wa7k/0D8JxijvXeu5J9Q
/Ad6IePfM4jYB9kHoEusg8b5duPcMi351xj/HM/IcYx/CdricF1WMp/EvDIO
X0+dc+n+Bxgx7jM=
            "]], Polygon3DBox[CompressedData["
1:eJwV1Xt0z3Ucx/GPsblsc44VqdCFjlCc4xyyyO3QUVbEakdHxuyEkzZ3c7aO
y2atlCYpnWOc0YXsWJLSGU5LDDmSOpXSaEpMLjW35rIe3z+e5/P9vt6v9+v9
/n5/v992T0b2qKyYEEIq4rAgIYSY2BAuNwphH+5rGkJ5YggTWoSwtkkIpchr
FsLfzGm0aWovu16ldyW6q7eWUar2r/6LqKfd0TyEjbyD5J2jncUV3FC7Xa1P
fAg3LdLb+a3+dFpxyxByXJ/j+Z13J+7S/5GcTerdzStz1uvZbKee/Ltc7+Rf
h6v2OoNUu3wnZwLvCf0N5rRoHMLDvD1kldKO4DXPncZzljbA/QXzqnEel+W1
Vbsf7fh6RbuiL6bylpjxJ18Dmqh34NskJ4u+Q+92zLfjCfs8QTumPsL+lc5E
u1Wp9bP/NbX35L3tfoycweo/yemmlkHbYu9X0aCWRJ+pt1b2L+buR0e9G+jl
curdH8d19TvllNH/kpHtvllUMz/RecBO9fT19BnuZ2Fu9LnRV5tbqPeyeQvN
LUGh97aGXkSP53mfth5F9Hz3r8gtQiE6ydwr+xb+B5yL+RahTt7F6Lum50Pv
8ANMpD0q86g9k/i78Rfw5uGSWh3/YbX+PBtc13nGfvoOOavcL+I54v48fvUe
XpexgPc6fY6MbOSil9w+clo71+Gk+lFMsMsqPXl6zrufy5sT9dFL6POj7xq9
iJaP2fTtZt9mXhxGmtmRJ98uW/Es7yJ6AfaqFcoYbO52MzO9p9Hez9POsbRK
dNG7RN9nMmP1HHDO1tOV3kpWpoxsdOUt4xtEX+2+mHeNs4D3kJ0e4X0KK8x5
h949+t2hwn2qeSPNfQbf6G9DT6YNxQXP9A82ykhAhdytmCJrGG8Nb44ZPVx3
ofVXG4LD9jwYfRfNGui+2Nkn2s2OFfQM922jz9fZmb6Y/qMzxw4FuNd3ZI/d
pvJW0dPtMh4J9ESU26Wd2ku0SXytaLudL9CG4mvXuWr5svKcU2h327M3fZbn
mYFm9Gvm/kGbrL+R73cMYrFH7S09DdFvjmeK55lHf9551c6N9cegCTZ77ol2
XCt/mbOz3v30eVhgz5/1T6af1hdPS8YI+jj6bnPflbsSt6pnyhiG38x9Tm2m
8xN5HezSxuxyz3MJ22jVat1kLKHv1V8V/X6j92NWKf9jZsSaNcZZzZdNXyF7
Ov9y3mWo5I+LPhf+XCyT+7H8r5w18h/UtxEDeUrs94bPbCnqZQyQdZAnWUaW
c6me9jJO88/h7xD1m98eQ+wwHDdk3MQW7+xTHKcNkvMD7+NyVpu9D03lj6af
pL9Ir6WdQhI9N/p7rHeq3CxMQye+J9VSPFMaau1SR0uxSzJ9sYwC5NC+V3uI
1suudXaJo30ubxtq7JNq7inadP54Wc3RhT8z+t/mejwuyPiPZ7T8Vnr2eycr
ME/GCPudlL0cN3nSot+93nR9k5wL6W/qX+95zmCcOT15MtSyeLKj/4PqV/SO
oveVXxv9P4n+HsvfgGO0L2m7zfwC2zCLPtzsSvoe97uivzGYTU+h75Df0nUC
xvKkR789u/wPWDUUwg==
            "]]},
          Annotation[#, "Charting`Private`Tag$53112#1"]& ]],
        Lighting->"Neutral"]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0bsrhXEYB/DnOAdHKSkLRSQpNrdcZsc1g2JCMbgdueTa0ZE6Uhj9CUYm
ymK3M1nMDEZJBnxkePo836f3eS+/t2FubXw1ERGbqqskoozV6jUZUcNUKiLD
H7mfPcUR2aKIbi5zhHvcUefpiGE5o69nN1dKI/rYKA9wS67lLOvYaj7KXXlP
Dem3OcIcx5hy3zbPT7CdFezjnd1KvrkuzRcmeGGe5KfcxGu5hfessjugH1RP
8iQfOcEHdjiMY9/cyTP28pYFHqq8/Rt5X3/FTX45t11eyjl+y4v84BKvzQ/4
I+dZ5L3m+S5vONMs17nKLBc4/7err7I7zRl5ikc8ZbP5CQvyIWvlcj4n///j
LzNgMqU=
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwt0bsrhXEYB/DH3cAsi1J2w0lJyqUoqyxWkxQOJYP/QqxSlBhJuRwO4lAu
JZeEKAlFchsMyEcZnj7f79Pvfd9f55R39Lb2ZEXEoGnOjdhgC3fYyiMemmRh
RJt+LHcx10OZ/Ig89utF3NOLeeVMn/Pt9tfytP2MuZHX+cU0v1ldEHHvmVo+
sIYXfPRsQr6UX0yd/MQP+2c26O/81Jd5zjK7JXnRnOkLvOMpb//uzhOTyoko
8f0VlnKVlTzhkZlx94Q+Kv/kRQyzym6Ib3o3K/QkB8yUXOD8hNwkj7OeY2zk
QXbErrvtcZ8rTHHZpORe70zLG3LGrMubTNpvcU3fZr8+x07O283KE6ZDn+Qw
XzjC17/3+H3X/v/XX7GWTPo=
        "],
        VertexColors->None]}, {}, {}, 
      {GrayLevel[0.2], 
       Line3DBox[{1000, 998, 2222, 999, 3061, 3060, 994, 992, 2219, 3058, 985,
         986, 2220, 3388, 993, 3078, 1031, 1006, 2223, 3390, 1003, 3063, 1001,
         3062, 1002, 3119, 1083, 3098, 1079, 2253, 1080, 3100, 1084, 3101, 
        1085, 2261, 1100, 3109, 1101, 2262, 1102, 3111, 1103, 3110, 1104, 
        2263, 1105, 1106},
        VertexColors->None], 
       Line3DBox[{69, 68, 2495, 71, 1616, 2491, 72, 2496, 76, 74, 1618, 2492, 
        63, 2487, 62, 64, 1614, 2488, 61, 2486, 60, 2484, 59, 2536, 150, 2535,
         149, 1673, 160, 2545, 164, 2544, 163, 1687, 187, 2560, 186, 2558, 
        185, 1689, 190, 2564, 195, 193},
        VertexColors->None], 
       Line3DBox[{1023, 1024, 3079, 1025, 2228, 3075, 1026, 3080, 1030, 1027, 
        2229, 3076, 1018, 3071, 1019, 1020, 2227, 3072, 1017, 3070, 1015, 
        3069, 1016, 3092, 1068, 3091, 1069, 2252, 1073, 3096, 1075, 3095, 
        1076, 2257, 1090, 3104, 1088, 3103, 1089, 2258, 1092, 3106, 1093, 
        1094},
        VertexColors->None], 
       Line3DBox[{1028, 1021, 3074, 1022, 2230, 3077, 1029, 997, 2221, 3389, 
        995, 3059, 996, 1012, 2226, 3392, 1010, 3067, 1011, 3073, 1013, 3068, 
        1014, 3090, 1067, 3089, 1064, 3088, 1065, 2250, 1066, 3094, 1074, 
        3105, 1091, 2256, 1086, 3102, 1087, 2259, 1095, 3107, 1096, 1097},
        VertexColors->None], 
       Line3DBox[{1044, 1042, 2237, 1043, 3395, 2238, 1045, 2240, 1047, 2239, 
        1046, 2293, 1182, 2301, 1198, 3158, 1199, 2300, 1200, 1202},
        VertexColors->None], 
       Line3DBox[{1053, 1054, 2248, 1060, 3086, 1059, 2247, 3085, 1051, 1040, 
        2235, 3393, 1036, 1037, 2236, 3394, 1041, 2245, 1057, 3084, 1058, 
        2246, 1039, 2234, 1038, 2308, 1213, 1212, 3165, 2307, 1214, 1187, 
        3154, 2295, 1186, 1185, 3155, 2297, 1190, 1201, 3159, 2302, 1193, 
        3156, 1192, 2298, 1191, 1196},
        VertexColors->None], 
       Line3DBox[{1063, 1061, 2249, 1062, 3087, 1034, 2233, 3081, 1035, 1032, 
        2231, 2232, 1033, 3082, 1049, 2241, 1048, 2242, 1050, 2305, 1210, 
        1211, 3164, 2306, 1189, 2296, 1188, 1184, 3153, 2294, 1183, 3157, 
        1197, 2299, 1194, 1195},
        VertexColors->None], 
       Line3DBox[{1108, 1107, 3112, 1099, 2260, 1098, 3108, 1072, 2251, 1071, 
        3093, 1070, 2255, 1078, 3097, 1077, 3099, 1082, 2254, 1081, 3120, 
        1131, 3121, 1007, 3065, 1005, 3064, 1004, 3397, 2244, 1056, 1055, 
        3083, 1052, 3396, 2243, 1009, 1008, 3391, 2224, 991, 990, 3066, 2225, 
        988, 3057, 987, 989},
        VertexColors->None], 
       Line3DBox[{1113, 1112, 2265, 1114, 3116, 2273, 1125, 2272, 1124, 2275, 
        1126, 2325, 1263, 2327, 1267, 3189, 1266, 2326, 1260, 1259},
        VertexColors->None], 
       Line3DBox[{1130, 1129, 2276, 1128, 3118, 1127, 2280, 1137, 3124, 1134, 
        2278, 1133, 3122, 1118, 2269, 1117, 3117, 2274, 1121, 1120, 3115, 
        2270, 1122, 2271, 1123, 2323, 1258, 3187, 1261, 2324, 1262, 3192, 
        1276, 2331, 1282, 3200, 1284, 2334, 1275, 3191, 1274, 2330, 1278, 
        3193, 1277, 2329, 1273, 1272},
        VertexColors->None], 
       Line3DBox[{1138, 1136, 2279, 1135, 3123, 1132, 2277, 1119, 3114, 1116, 
        2267, 2268, 1111, 1110, 3113, 2264, 1109, 2266, 1115, 2336, 1286, 
        3201, 1285, 2335, 1283, 2333, 1265, 3188, 1264, 2332, 1271, 3190, 
        1270, 2328, 1269, 1268},
        VertexColors->None], 
       Line3DBox[{1158, 1159, 3134, 1160, 2286, 3133, 1146, 3128, 1145, 1141, 
        2282, 3126, 1142, 3145, 1171, 1170, 2289, 3143, 1174, 3149, 1179, 
        3152, 1181, 3196, 1280, 3195, 1231, 2313, 1229, 3172, 1230, 3173, 
        1232, 2322, 1228, 3171, 1226, 3170, 1227, 2319, 1250, 3181, 1251, 
        1252},
        VertexColors->None], 
       Line3DBox[{1163, 1162, 3135, 1161, 2287, 3136, 1144, 1139, 2281, 3125, 
        1140, 3127, 1143, 1147, 2290, 3144, 1175, 3146, 1172, 3142, 1173, 
        3150, 1180, 3198, 1279, 3194, 1236, 3175, 1235, 2314, 1233, 3174, 
        1234, 3186, 1257, 2321, 1224, 3169, 1225, 2320, 1255, 3182, 1253, 
        1254},
        VertexColors->None], 
       Line3DBox[{1203, 1204, 3160, 1207, 2303, 3161, 1154, 1155, 2285, 3132, 
        1156, 1157, 2292, 3151, 1178, 3147, 1176, 1177, 2291, 3148, 1164, 
        3137, 1165, 3139, 1168, 3183, 1256, 3185, 1248, 2317, 1246, 3179, 
        1245, 3398, 2318, 1249, 1221, 3166, 1222, 2312, 1223, 3167, 1217, 
        2310, 1218, 3178, 1241, 1242},
        VertexColors->None], 
       Line3DBox[{1206, 1205, 2304, 1208, 3163, 3162, 1209, 1151, 2283, 3130, 
        1152, 1153, 2284, 3131, 1150, 3129, 1148, 1149, 2288, 3140, 1166, 
        3138, 1167, 3141, 1169, 3184, 1247, 3180, 1243, 2316, 1244, 3197, 
        1281, 3199, 1219, 2311, 1220, 3168, 1215, 2309, 1216, 3177, 1237, 
        3176, 1238, 2315, 1239, 1240},
        VertexColors->None], 
       Line3DBox[{469, 466, 2708, 464, 1835, 419, 2682, 420, 2684, 421, 1839, 
        430, 2689, 426, 2687, 424, 1818, 428, 2731, 510, 2733, 346, 2648, 344,
         2645, 339, 3362, 1768, 334, 336, 2641, 275, 3359, 1744, 273, 281, 
        2606, 282, 3361, 1750, 310, 2621, 306, 308},
        VertexColors->None], 
       Line3DBox[{1312, 1307, 2344, 1308, 3212, 1309, 2345, 3211, 1310, 1291, 
        2339, 3203, 1292, 1294, 2343, 3205, 1297, 2346, 1311, 3214, 1321, 
        2351, 1322, 2353, 1324, 2407, 1464, 1463, 3287, 2406, 1460, 1459, 
        3288, 2408, 1449, 1448, 3281, 2401, 1442, 1441, 3279, 2399, 1445, 
        3286, 1457, 2403, 1456, 1458},
        VertexColors->None], 
       Line3DBox[{1315, 1313, 2347, 1314, 3213, 1295, 2342, 3204, 1296, 1293, 
        2340, 2341, 1290, 3202, 1289, 2338, 1288, 2337, 1287, 2410, 1469, 
        1471, 3290, 2412, 1466, 2409, 1465, 1450, 3282, 2402, 1447, 3280, 
        1446, 2400, 1444, 1443},
        VertexColors->None], 
       Line3DBox[{1323, 1316, 2348, 1317, 3215, 2352, 1319, 2349, 1318, 2350, 
        1320, 2405, 1462, 2404, 1461, 3289, 1470, 2411, 1468, 1467},
        VertexColors->None], 
       Line3DBox[{1336, 1335, 3222, 1333, 2356, 3221, 1334, 1329, 2355, 3218, 
        1327, 3217, 1328, 1357, 2363, 3237, 1356, 3234, 1306, 3210, 1304, 
        3209, 1305, 3255, 1405, 3260, 1411, 3259, 1412, 2388, 1413, 3273, 
        1435, 3277, 1439, 2398, 1438, 3276, 1430, 2393, 1423, 3267, 1422, 
        1426},
        VertexColors->None], 
       Line3DBox[{1337, 1338, 3224, 1339, 2357, 3223, 1340, 3238, 1360, 1325, 
        2354, 3216, 1326, 3235, 1358, 1359, 2362, 3236, 1303, 3208, 1301, 
        3207, 1302, 3254, 1404, 3256, 1406, 2389, 1414, 3262, 1415, 3261, 
        1416, 2397, 1440, 3278, 1436, 3275, 1437, 2396, 1429, 3268, 1427, 
        1428},
        VertexColors->None], 
       Line3DBox[{1354, 1349, 3231, 1348, 2366, 3241, 1363, 1362, 2364, 3239, 
        1361, 1341, 2358, 3225, 1342, 3226, 1343, 1344, 2360, 3230, 1332, 
        3220, 1330, 3219, 1331, 3264, 1421, 3266, 1420, 2391, 1408, 3257, 
        1407, 3258, 1409, 2387, 1410, 3271, 1433, 2395, 1431, 3269, 1379, 
        2374, 1380, 3248, 1383, 1384},
        VertexColors->None], 
       Line3DBox[{1355, 1353, 2361, 1352, 3233, 3232, 1351, 1350, 2367, 3242, 
        1365, 1364, 2365, 3240, 1298, 3206, 1299, 1300, 2359, 3229, 1347, 
        3228, 1345, 3227, 1346, 3263, 1417, 3265, 1418, 2390, 1419, 3274, 
        1434, 3272, 1424, 2392, 1425, 3270, 1432, 2394, 1381, 3247, 1375, 
        3246, 1376, 2373, 1377, 1378},
        VertexColors->None], 
       Line3DBox[{1392, 1393, 2380, 1397, 3251, 1398, 2386, 1400, 3252, 1399, 
        2381, 2382, 1374, 1373, 3245, 2372, 1372, 2371, 1371, 2433, 1536, 
        3320, 1537, 2434, 1538, 2441, 1545, 3322, 1546, 2442, 1521, 3314, 
        1517, 2427, 1518, 1522},
        VertexColors->None], 
       Line3DBox[{1394, 1395, 2379, 1396, 3250, 1387, 2376, 1385, 3249, 1386, 
        2383, 1401, 3253, 1370, 2370, 1369, 3244, 2369, 1367, 1366, 3243, 
        2368, 1368, 2375, 1382, 2439, 1525, 3315, 1524, 2429, 1523, 3316, 
        1526, 2438, 1544, 3323, 1547, 2440, 1531, 3318, 1519, 2428, 1520, 
        3319, 1532, 2432, 1533, 1534},
        VertexColors->None], 
       Line3DBox[{1489, 1488, 3298, 1487, 2418, 3299, 1491, 3302, 1498, 1494, 
        2420, 3300, 1495, 3308, 1507, 1506, 2424, 3307, 1509, 3312, 1513, 
        3310, 1514, 3333, 1565, 3332, 1564, 2446, 1562, 3330, 1563, 3331, 
        1558, 2444, 1556, 3328, 1554, 3327, 1555, 2445, 1548, 3324, 1549, 
        1559},
        VertexColors->None], 
       Line3DBox[{1490, 1484, 3296, 1485, 2417, 3297, 1486, 1493, 2419, 3401, 
        1492, 3301, 1497, 1508, 2426, 3405, 1516, 3313, 1511, 3309, 1512, 
        3311, 1515, 3335, 1566, 3334, 1567, 3338, 1571, 2447, 1569, 3337, 
        1570, 3344, 1582, 2452, 1550, 3325, 1551, 2443, 1557, 3329, 1560, 
        1561},
        VertexColors->None], 
       Line3DBox[{1496, 1477, 2413, 1476, 3293, 3292, 1474, 1475, 2416, 3295, 
        1479, 1480, 2414, 3400, 1483, 3303, 1501, 1502, 2423, 3403, 1503, 
        3304, 1453, 3284, 1454, 3339, 1572, 3341, 1578, 2450, 1568, 3336, 
        1552, 3326, 1553, 2453, 1585, 3349, 1588, 2454, 1584, 3345, 1579, 
        3343, 1580, 2451, 1581, 1583},
        VertexColors->None], 
       Line3DBox[{1543, 1542, 2437, 1541, 3321, 1540, 2436, 1539, 2435, 1402, 
        2384, 1403, 2385, 1390, 2378, 3399, 1388, 2377, 1389, 1391},
        VertexColors->None], 
       Line3DBox[{1587, 1586, 3348, 1576, 2449, 1575, 3347, 1574, 2448, 1573, 
        3346, 1535, 1528, 2430, 3406, 1527, 3317, 1529, 2431, 1530, 3340, 
        1577, 3342, 1452, 3283, 1451, 3285, 1455, 3305, 2422, 1504, 1505, 
        3306, 1499, 3402, 2421, 1500, 1510, 3404, 2425, 1482, 1481, 3294, 
        2415, 1473, 3291, 1472, 1478},
        VertexColors->None]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1590, 1589, 2222, 1596, 1617, 3636, 2230, 1615, 2228, 1616, 
        2357, 1926, 2356, 3528, 1925, 1927, 2361, 1937, 2195},
        VertexColors->None], 
       Line3DBox[{1630, 1629, 3637, 2233, 1619, 3413, 1620, 2235, 3639, 1632, 
        1631, 2243, 3642, 2153, 1655, 3430, 1602, 2223, 3631, 1599, 3407, 
        1597, 1598, 3412, 1608, 1683, 3454, 1680, 3442, 1676, 2253, 3646, 
        1675, 1674, 3441, 2157, 2255, 1682, 3457, 2166, 2278, 3667, 1739, 
        1738, 2277, 3666, 1737, 1703, 2161},
        VertexColors->None], 
       Line3DBox[{1638, 2237, 1628, 1626, 3416, 3415, 1624, 2231, 1623, 3419, 
        1636, 2236, 3640, 2151, 1661, 3434, 1659, 2244, 3643, 1600, 3408, 
        2149, 3409, 2150, 3456, 1735, 3455, 1677, 2254, 3647, 1679, 1681, 
        3451, 1713, 2269, 3656, 1715, 1709, 2267, 3654, 1711, 3458, 1736, 
        1704, 2265, 1705},
        VertexColors->None], 
       Line3DBox[{1643, 1642, 3421, 2239, 1641, 3427, 1651, 3428, 1652, 2242, 
        1650, 3425, 1635, 3418, 1633, 2234, 3638, 1634, 3438, 1664, 1653, 
        3429, 1654, 1723, 3449, 1721, 3448, 1722, 2271, 3659, 1719, 3447, 
        1701, 1700, 2266, 3653, 1707, 3445, 1708, 1716, 2275, 3663, 1726, 
        1727},
        VertexColors->None], 
       Line3DBox[{1646, 1645, 3422, 2240, 1644, 3426, 1648, 3423, 2152, 2241, 
        1647, 3424, 1649, 3437, 2154, 2246, 3436, 1662, 1658, 3432, 1656, 
        3431, 1657, 3453, 1731, 1724, 3450, 1720, 2270, 3658, 2164, 3657, 
        1717, 1698, 2264, 3651, 1699, 3652, 1702, 1718, 2272, 3660, 1725, 
        1729},
        VertexColors->None], 
       Line3DBox[{1667, 2248, 1610, 1609, 3634, 2225, 1604, 3410, 1591, 2219, 
        1592, 2221, 3629, 1594, 1595, 2229, 1618, 2354, 1920, 2189, 3706, 
        2355, 1921, 2367, 1940, 3536, 1939, 2366, 3538, 1941, 1901, 2344, 
        1900},
        VertexColors->None], 
       Line3DBox[{1668, 2249, 1666, 1665, 3644, 2247, 1607, 3411, 1606, 2224, 
        3633, 1605, 1593, 2220, 3628, 2147, 1613, 2226, 3635, 1611, 1612, 
        2227, 1614, 2362, 1938, 2196, 3713, 2363, 1893, 2187, 3715, 2365, 
        1943, 2197, 3714, 2364, 1942, 3537, 1902, 2345, 3521, 1899, 1898, 
        2347, 1908},
        VertexColors->None], 
       Line3DBox[{1706, 2162, 3661, 2273, 1728, 1712, 3655, 2268, 1710, 3446, 
        1714, 2163, 3662, 2274, 1730, 3452, 1678, 2158, 3664, 2165, 3665, 
        1603, 3632, 1601, 3630, 2148, 3433, 1660, 1663, 3435, 2245, 1637, 
        3420, 1621, 1622, 3414, 2232, 1625, 3417, 1627, 2238, 3641, 1640, 
        1639},
        VertexColors->None], 
       Line3DBox[{1734, 2276, 1693, 1694, 3649, 2260, 1695, 1696, 3650, 2262, 
        1684, 2256, 1685, 3444, 1686, 2257, 1687, 2397, 2016, 3727, 2017, 
        2398, 2015, 2394, 3569, 2014, 1964, 2374, 3548, 1965, 1968, 2379, 
        1984},
        VertexColors->None], 
       Line3DBox[{1740, 2279, 1732, 1733, 3668, 2280, 1692, 1672, 3645, 2251, 
        2156, 3440, 1671, 2261, 2159, 3443, 1670, 2250, 2155, 3439, 1669, 
        2252, 1673, 2389, 2002, 3720, 2003, 2388, 2004, 3726, 2203, 2392, 
        2011, 3725, 2204, 2395, 3570, 1967, 1966, 2376, 3554, 1976, 1975, 
        2380, 1985},
        VertexColors->None], 
       Line3DBox[{1780, 1779, 3471, 2293, 1778, 3481, 1800, 3479, 1801, 2305, 
        1804, 3484, 1807, 3483, 1806, 2308, 3683, 1797, 1758, 3461, 1759, 
        3463, 1762, 3492, 1833, 1832, 3495, 1840, 2323, 3692, 1841, 3494, 
        1844, 1859, 2336, 3697, 1869, 3506, 1861, 1846, 2325, 3693, 1847, 
        1848},
        VertexColors->None], 
       Line3DBox[{1782, 1781, 3472, 2294, 1775, 3468, 1776, 2297, 3680, 2172, 
        1772, 2292, 3678, 2171, 1757, 3460, 1756, 2288, 3675, 2170, 3673, 
        1754, 1760, 3462, 1761, 1830, 3689, 2179, 3686, 2178, 2316, 3488, 
        1826, 1825, 3687, 2318, 2181, 1829, 3503, 2184, 2334, 3502, 1868, 
        1864, 2332, 3501, 1865, 1842, 1843},
        VertexColors->None], 
       Line3DBox[{1786, 2298, 1787, 1798, 3476, 2303, 1799, 3477, 1746, 2283, 
        1741, 2281, 3669, 1742, 1743, 2282, 1744, 2420, 2075, 2209, 3735, 
        2419, 2071, 2416, 2065, 3593, 2064, 2415, 3733, 2070, 2039, 2403, 
        2040},
        VertexColors->None], 
       Line3DBox[{1790, 2299, 1788, 1789, 3475, 2302, 1795, 3478, 1748, 2285, 
        3671, 2168, 1747, 2284, 3670, 2167, 1745, 2290, 3676, 1769, 1767, 
        2289, 1768, 2424, 2082, 2212, 3739, 2426, 2077, 2208, 3732, 2414, 
        2069, 2211, 3738, 2425, 2072, 3594, 2020, 2399, 3728, 2021, 2022, 
        2400, 2023},
        VertexColors->None], 
       Line3DBox[{1791, 2300, 1773, 1774, 3470, 3469, 1777, 2296, 1785, 3473, 
        1783, 2295, 3679, 1784, 1771, 3467, 1770, 2291, 3677, 2169, 3672, 
        1753, 3674, 1755, 3688, 1837, 3690, 2180, 2317, 3489, 1824, 1823, 
        3498, 1856, 2331, 3500, 1863, 1866, 2333, 3696, 1867, 3507, 1870, 
        1849, 2326, 1850},
        VertexColors->None], 
       Line3DBox[{1794, 1793, 3474, 2301, 1792, 3482, 1805, 2306, 3681, 2174, 
        1802, 3480, 1803, 2307, 3682, 2175, 1763, 3464, 1764, 3466, 1765, 
        3465, 1766, 3491, 1831, 3490, 1828, 1827, 3497, 2183, 2324, 3496, 
        1845, 1860, 3505, 2185, 2335, 3504, 1862, 1853, 2327, 3694, 1851, 
        1852},
        VertexColors->None], 
       Line3DBox[{1822, 1820, 2315, 1821, 1836, 3493, 2320, 1834, 2319, 1835, 
        2445, 2128, 2443, 3744, 2129, 2131, 2451, 2143, 2218},
        VertexColors->None], 
       Line3DBox[{1855, 2328, 1854, 1858, 3499, 2330, 1815, 1814, 3487, 2312, 
        1813, 3684, 1812, 2311, 2176, 3695, 1819, 2314, 2177, 3685, 1817, 
        2313, 1818, 2446, 2132, 3621, 2133, 2447, 2127, 3620, 2216, 2453, 
        2146, 3627, 2138, 2448, 3745, 2134, 2086, 2428, 3740, 2085, 2083, 
        2427, 2084},
        VertexColors->None], 
       Line3DBox[{1857, 2329, 1816, 1811, 3486, 2310, 1810, 1809, 3485, 2309, 
        1808, 2321, 2182, 3691, 1838, 2322, 1839, 2444, 2130, 3626, 2145, 
        2452, 2144, 2454, 3748, 2137, 2136, 2449, 3746, 2139, 2100, 2432, 
        2101},
        VertexColors->None], 
       Line3DBox[{1889, 1888, 3514, 2342, 1871, 3508, 1872, 2339, 3698, 1884, 
        1887, 2358, 3709, 1933, 1934, 3533, 1935, 2359, 3711, 2194, 3710, 
        2193, 1931, 3532, 1932, 2006, 3721, 2007, 3723, 2200, 2390, 3564, 
        2008, 2001, 3719, 2199, 2387, 1992, 3718, 1993, 2383, 3558, 1991, 
        1990, 2386, 3562, 1999, 1982, 1983},
        VertexColors->None], 
       Line3DBox[{1909, 1910, 3702, 2349, 1894, 3517, 1883, 3513, 1882, 2338, 
        1881, 3518, 1895, 3522, 1915, 2351, 3704, 1906, 1905, 3531, 1929, 
        3530, 1930, 3563, 2005, 1969, 3549, 1949, 2368, 3540, 1948, 3539, 
        1945, 1944, 2372, 3547, 1961, 3546, 1959, 1958, 2385, 3560, 1996, 
        1997},
        VertexColors->None], 
       Line3DBox[{1912, 2188, 3705, 2352, 1873, 3511, 1876, 2341, 3699, 1886, 
        1890, 3515, 2186, 2346, 3701, 1904, 1907, 3534, 1924, 3527, 1922, 
        3526, 2191, 3566, 2202, 3567, 2009, 1953, 3542, 1950, 2369, 3541, 
        2198, 1956, 3557, 1986, 2382, 3556, 1989, 1981, 2378, 3717, 1977, 
        1980},
        VertexColors->None], 
       Line3DBox[{1914, 1913, 3703, 2350, 1897, 3520, 1880, 3512, 1879, 2337, 
        1878, 3519, 1896, 3525, 1919, 2353, 3524, 1918, 3523, 1917, 1916, 
        3529, 1928, 1974, 3553, 1970, 3550, 1971, 2375, 3552, 1972, 3551, 
        1947, 1946, 2371, 3545, 1960, 3544, 1955, 1954, 2384, 3559, 1994, 
        1995},
        VertexColors->None], 
       Line3DBox[{1973, 1963, 2373, 1962, 2012, 3568, 2393, 2013, 2396, 1689, 
        2258, 1688, 2259, 3648, 1691, 1690, 2263, 1697, 2160},
        VertexColors->None], 
       Line3DBox[{1979, 2377, 1978, 1998, 3561, 1988, 3555, 2381, 1987, 1957, 
        3543, 2370, 1952, 3716, 1951, 2000, 3565, 2391, 2201, 3724, 2010, 
        3722, 1923, 3707, 2190, 3708, 2192, 3712, 2360, 1936, 3535, 1903, 
        1892, 3700, 2343, 1891, 3516, 1885, 2340, 1875, 3509, 3510, 1874, 
        1877, 2348, 1911},
        VertexColors->None], 
       Line3DBox[{2028, 2027, 3729, 2402, 2018, 3571, 2019, 2401, 3572, 2205, 
        2026, 2421, 3736, 2210, 2081, 3599, 2080, 2423, 3737, 2079, 3597, 
        2037, 2036, 3595, 2076, 2135, 3622, 2217, 3624, 2142, 2450, 3747, 
        2141, 2096, 3607, 2430, 2097, 2102, 3616, 2121, 2440, 3743, 2122, 
        2126, 2442, 3619, 2125, 2115, 2215},
        VertexColors->None], 
       Line3DBox[{2049, 2048, 3730, 2404, 2047, 3586, 2058, 2412, 3590, 2207, 
        2059, 3587, 2055, 2406, 3583, 2054, 2035, 3578, 2033, 3577, 2034, 
        3581, 2043, 3604, 2093, 3606, 2095, 2091, 3602, 2089, 2429, 3601, 
        2090, 2108, 3609, 2214, 2434, 3611, 2107, 2106, 2436, 3613, 2111, 
        2112},
        VertexColors->None], 
       Line3DBox[{2052, 2051, 3731, 2405, 2050, 3588, 2060, 3592, 2062, 2410, 
        2061, 3591, 2057, 3585, 2056, 2407, 3584, 2053, 2041, 3580, 2042, 
        3582, 2044, 3605, 2094, 2087, 3600, 2088, 2439, 3615, 2120, 3614, 
        2110, 2109, 2433, 3610, 2103, 3608, 2104, 2105, 2435, 3612, 2113, 
        2114},
        VertexColors->None], 
       Line3DBox[{2063, 2411, 2031, 2029, 3575, 3574, 2030, 2409, 2024, 3573, 
        2025, 2408, 3589, 2046, 2045, 3596, 2078, 2422, 3598, 2038, 3579, 
        2032, 3576, 2206, 3625, 2140, 3623, 2099, 2431, 3741, 2098, 2092, 
        3603, 2213, 2438, 3742, 2118, 2119, 2441, 3618, 2123, 3617, 2124, 
        2116, 2437, 2117},
        VertexColors->None], 
       Line3DBox[{2068, 2067, 2413, 2066, 2074, 3734, 2417, 2073, 2418, 1750, 
        2286, 1749, 2287, 3459, 1751, 1752, 2304, 1796, 2173},
        VertexColors->None]}, 
      {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwl0D9LglEYhvEnKqIyR9doakgcU7MpGqQlUdAlstdZamltivaCIAM/QOHQ
BzBzrIagP4u1tNgn6Av4i4ab677Oec45vO9K66h6OBURNbldjLiaj/jFLs6k
Iu7xHD8XIi7wCz/sn6YjbnhuKeKVn/BrvsoHZo75Ge/zIX/AJxziM87Zrzg3
jbs4Mjurf+sl2THX4Yle0Mtyyce8IT/mi9bGuIzruObePGZxYKZuvsTzvCj7
f2/xhp5Ik1d5S++4o41dfPfNCb7hAb7gHm5JwZk7dz9a2+YbvMcz+qZk0///
cQJM7S1u
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0TtLQnEAxuF/LdH9MzT0BaIgQXNoCpq6iGBWNFRTDUHR3NrdEpukLyAE
EehQWRAN3WwIIrpJrUFDtPZIw+E5v5fjOUftmJofmqsLISw4co0hfDeHsMeu
thAKbGsJ4dAW1a+6XRd0j77QydYQztnPiO3G+bjzA9ekeas3ONEUwjbL9oR7
pPS6TnOTkxy1zzCjT103oqf1jj7TST2rU4xzxX5sj+uo7mOM1dr97W8cY9Z7
Jfish/jEYe7aB/igX7ipe3mnI9zSMf56Th8f7e/ctg8yU/u+XOI1F1nx/GVu
uLbT544cRVup9q5cs1+xrK+5qu94ryvukddfep8fvLRXmdWfzPHEb9rAIutZ
Yrdn5vnT/P8//gHFnUcV
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0U0rRGEYxvHbRmMw38HGQo1SBk0kS2WDvIQMZqwUxc6ST8BmamRLkb2X
CdnO1KBsSBbiA8js/U4WV//r5TlPp3O61ramNlsiokhn7RGVtogfPMKRzohs
JuKYv6VUR8Q9nuBvOqLh3K79UH6Tz7CJz/o9/anckOvytrwvV+Wqe7tpR1dL
zuqv5BvbJV5jyjZpe7W18p98v61Jef4peQf+nc/RBF9x7oufpw/7Ao7ry/pl
vkDf+l73D2E2eRfdjD0n98h5HEh2mtMPy3n+zrkVeVouyQfuLeI6reqX9Bt8
Wf/iG5XwEQuYtl14fpZ/0C1iDcdw0LN1/pxG5b7M/3/4A/HPObE=
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0TsvQ3EYwOHXbWi1VsLUsIhRwuD6CSRK07TB0E4k+BI2jCUM0lViVJWI
hIQYDK6jSKQfQKJiMHkaw5vn/Z1/T87Jaaa0md1oi4iyOUpEfHdHVJlNR/Sa
X32iF+x9Jp2KuNY5+4BJ6FudtxfMjb3EF5b5ygOuJyMOucJdLnHevQXu6CLz
etC+Z1Z1QQ/ZK2ZNF/U0ZznBKWacNbjsPT+Y4xsXmeiJGHf+3nqOTraaD3qM
TWej5llP6h/7DNv9bo6dvPecK9fveMk666yZc/uWe2s81Wfc1sP2J9PUx/qL
j/qTVd1ghSOu7fPCN+pgv+5K/f8Pf5s5Nt4=
        "],
        VertexColors->None], 
       Line3DBox[{2465, 2466, 3409, 3065, 3632, 2474, 3431, 2521, 3429, 2520, 
        3463, 2636, 3465, 2628, 3139, 3674, 2627, 2631, 3141, 2634, 3462, 
        2635, 3150, 2646, 3152, 2648, 3310, 2924, 3311, 2912, 3595, 2887, 
        3284, 2888, 2880, 3576, 3283, 2881, 3581, 2890, 3582, 2790, 3529, 
        2791, 3530, 2780, 3526, 3219, 3707, 2781, 2784, 3227, 2793, 3532, 
        2757, 3209, 2755, 3207, 2484, 3069, 2483, 3068, 2477, 3412, 2467, 
        3062, 2465},
        VertexColors->None], 
       Line3DBox[{3063, 3407, 2469, 2482, 3073, 2485, 3070, 2486, 3208, 2756, 
        3210, 2758, 2762, 3710, 3228, 2785, 2783, 3708, 3220, 3527, 2782, 
        3531, 2792, 2773, 3523, 2774, 3382, 3580, 2883, 3577, 2882, 3285, 
        3579, 2886, 2885, 3304, 3597, 2918, 2917, 3309, 2923, 3312, 2645, 
        3149, 2639, 3142, 2607, 2608, 3673, 3138, 2626, 2624, 3672, 3137, 
        2625, 3466, 2633, 3461, 2632, 2526, 3438, 2522, 2523, 3432, 2470, 
        3630, 3064, 3408, 2471, 2468, 3063},
        VertexColors->None], 
       Line3DBox[{3067, 2480, 3072, 2488, 3236, 3373, 3234, 2753, 2754, 3711, 
        3229, 2795, 2796, 3712, 3230, 3534, 2794, 2770, 3704, 2771, 3524, 
        2775, 3584, 3042, 3381, 3578, 2884, 3305, 3598, 2920, 2921, 3403, 
        3737, 3046, 2914, 3313, 3387, 3307, 3362, 3143, 2640, 3146, 2611, 
        2612, 3675, 3140, 2629, 2642, 3677, 3148, 2638, 3464, 2637, 2670, 
        3683, 2992, 3638, 2504, 3436, 2518, 2519, 3433, 3397, 3643, 2994, 
        2472, 3390, 3631, 2473, 2479, 3067},
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0CFLQ3EUhvGzIujuZhYM2kRWVAwzmUQZC3pNomWKwsQt+QEGYhH8AC6K
zSILS4IoCw7UImhQsA3EgfsE8weGl+c87zn84d7pSn2jlomIVK6zETejEUNs
42US8TsWMZBGPuKKz+QiTvFO92QuyAXv8xfzrBy7febn+nv+au7gO2bsyt5/
sxvqvswlSfQH+K1f0o/zPd7ju1jWNXU9c1V+9OveW8M5nJdt+1U+5baIi7oT
8wqWeIpnfBMfvFFxv6Ov86b+0TdvYRePMLFruTs0T0pVPu2y+g/c57c4wifM
y7KQ//+Pf4g+L3Q=
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0LEuA2AUxfGrU1s0YqDRinToZPAG7Gy8gbQxVHTAVu1AoonRSBNiEg+A
NOlIYhZTh7IRIkIlTP0lHU7+59x77jd8hfXq6tZIRKzRxFhEdTziORXxQln5
CzuYH43IUTMT0ZZn+Afs4rubabyVs/ghL9AT/acjrswf+T++h0mdOe+84rfd
JL/D71KLf8O+eQ0v5E9MujvBNBbNWvwxJeSGd0v6ddynsv2GfMDv4Z3emd6h
XJGbeC4f4Sld8tvm93qbbm9wBa9xGeftpvRqerO0ZPbrX3LmP7go9zEv91LD
fxwAcRswww==
        "],
        VertexColors->None], 
       Line3DBox[{2532, 3089, 2531, 2552, 3442, 3098, 2551, 2595, 3455, 3120, 
        3664, 2596, 2587, 3450, 2584, 3448, 2583, 3495, 2715, 2702, 3490, 
        2703, 3185, 3690, 2711, 2697, 3180, 3686, 2698, 2729, 3194, 2730, 
        3195, 2731, 3332, 2965, 3334, 2967, 2969, 3624, 3341, 2979, 2977, 
        3623, 3340, 2938, 3606, 2935, 2929, 3600, 2822, 3550, 2821, 3549, 
        3376, 2847, 3567, 3266, 3724, 2853, 2852, 3265, 3723, 2855, 2845, 
        3260, 2838, 3256, 2535, 3091, 2532},
        VertexColors->None], 
       Line3DBox[{2534, 3090, 2533, 2555, 3454, 3119, 2593, 2594, 3456, 3121, 
        3665, 2592, 3453, 2591, 2585, 3449, 2586, 2706, 3492, 2705, 3491, 
        2704, 3183, 3688, 2710, 2712, 3184, 3689, 2713, 2727, 3198, 2732, 
        3196, 2733, 3333, 2966, 3335, 2968, 2970, 3622, 3339, 2974, 2978, 
        3625, 3342, 2936, 3604, 2937, 3605, 2934, 2825, 3553, 3377, 2850, 
        3563, 2851, 3566, 3264, 3722, 2854, 2848, 3263, 3721, 2849, 2837, 
        3255, 2836, 3254, 2536, 3092, 2534},
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0csqxHEYxvF37IYxDjULFppZSGbKYlyClLULkIydchjMxnEsKJI7sHLY
0ES4BEqxQ7K2cLgANWV8Joun5/s87+99698/NzU3PpuIiBJlUhHz7RGfyYgv
6pcTrRE5vqRvwQ19Vg78yIttEcN0kI54kIfwLc/zAu3r7+Q07qBt+Vp+wi9u
1t155w1+rn/Dz2av/FfX6/23/GPWg7eaN+gQ7/C6Pos38Dp12yvIp/iEMvIx
7+R5/R7epZBX3S/ZX+FrNGNelit4ki/zRZrWT8hlfEQ1u5vyvTtnuKa7pAtc
1V/hBTs35qPN7+UjfNAsZVbxro/GdF1yUV+VB/BH8v8//AFy5jWb
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0L1KwmEYhvEnGsKyINTEoT8ErlGdRODiUGcQaFNKORQ49EHQ0tfQFK6F
SHQAQbvO1dwZVFRYOUS/cLi57ut9nvcd3rm1+kptJCJW5TUVMZOOeMGBNCYj
ZvmP/iGbvMDf9WQ8osnneXkqIsdLmMVt5xm8xktsY3ciYsduR79ydizL+ro7
J/87smte57f6gVT5HlZwH0ftX3gnhS08l6L9X/MzvSl5Xjbf0GuS4Z/mW/q0
3sAEx/DZ3rd3H/CRP+GN3UPzL+d9ueNHvGC+IF1+yhf1JenxBO/xzb/k08N/
/APHHS8w
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0T0vQ1EcwOG/sPSVskgkhEiIsHW1iLDzAURNFjpUisQgFgvfoBphMKH4
CEzspCuxeAkGg7R4xHDynN8599ybnNtfWJ5ZaomIBaOZiOhNRzQ4xGQyYiIb
keCgfrE+rp+Z18PWZ3UnR3QHp/S0kTWfZIYrmYh2nvGcp6yxaH+PJWcrPLZ+
wLIus6pLnNNFVvRlKmJRr+p5rrHAdf5wx36Tu8x5/o2HvnPELl3lvt7gp+ee
WNXb/NKvHNBb7OEmu9nw/jvnm6zz1voD7426+YWzOT7qFGt/98cPPcYrPcp3
3cYT3cob5nnNb/fal/7/D7/wQDl1
        "],
        VertexColors->None], Line3DBox[CompressedData["
1:eJwl0U0rRFEcwOEz3jPjJSxnFmOimZIFX4CVDanJJ7CSMkOi7CSjlI23nRgT
NqLJrLDEwjcgVjaGUrKRsvCUxem5v/8959zFTU7ms7lICGHeqmsOoTsWQi1T
bOBQawj17NVRptnEYfNG9uvraAgTOqMHdS+zuocrLSEk2Gc+Zhb3PMpLZ8Z5
xRneM8ei9wv2HrDibJlnLHHR/JCn+oRLeo77+s75aV3QU1zjsfkuc3qbM9zh
Lzfsj3i/xaLvbrJNH7GLRZbMl/lt/yz3dJ5fusqUXmeSBf6YfzChVxlnB1/d
98QqW1gwH/E8YL1ZnWbvbGfFHTG+6Ede6Bo+6weWdYTnDPw0z/BGp3kb+/+P
f/qdOt4=
        "],
        VertexColors->None]}}},
    VertexColors->{
      Hue[0.18742574837993559`], 
      Hue[0.20099812617496515`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.23437883913030816`], 
      Hue[0.22398557685483506`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.24575029079641403`], 
      Hue[0.24012570180027565`], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.2107800200812928], 
      Hue[0.18742574837993559`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.20173176821793973`], 
      Hue[0.18742574837993559`], 
      Hue[0.23499020749945365`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.14047265762956299`], 
      Hue[0.12836756392048254`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.12482162737943879`], 
      Hue[0.18742574837993559`], 
      Hue[0.20173176821793973`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.2208064613352786], 
      Hue[0.12482162737943879`], 
      Hue[0.23437883913030816`], 
      Hue[0.17177471812981138`], 
      Hue[0.16798423424110942`], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.18265707510060086`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.16187055054965466`], 
      Hue[0.23437883913030816`], 
      Hue[0.22814288176502429`], 
      Hue[0.23437883913030816`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.22569740828844242`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.19830810535072507`], 
      Hue[0.17458701262788057`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.22643105033141697`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.20173176821793973`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.2129809462102165], 
      Hue[0.23437883913030816`], 
      Hue[0.2313219972845808], 
      Hue[0.23437883913030816`], 
      Hue[0.23963660710495926`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.23437883913030816`], 
      Hue[0.2259419556361006], 
      Hue[0.22423012420249328`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.194395347788194], 
      Hue[0.21872780888018395`], 
      Hue[0.19170532696395393`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.163582381983262], 
      Hue[0.1561236878796872], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.13032394270174807`], 
      Hue[0.14047265762956299`], 
      Hue[0.14475223621358133`], 
      Hue[0.25], 
      Hue[0.17177471812981138`], 
      Hue[0.18265707510060086`], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.14047265762956299`], 
      Hue[0.23437883913030816`], 
      Hue[0.23437883913030816`], 
      Hue[0.24159298588622477`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.0778685366290662], 
      Hue[0.08214811521308452], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.0674752743535931], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.12176478553371141`], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.046566476128817785`], 
      Hue[0.062217506378941995`], 
      Hue[0.0491342232792288], 
      Hue[0.048156033888596045`], 
      Hue[0.046566476128817785`], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.08826179890453928], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.0778685366290662], 
      Hue[0.0753007894786552], 
      Hue[0.06723072700593491], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.08630542012327377], 
      Hue[0.0778685366290662], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.039352329372901174`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.051579696755810714`], 
      Hue[0.048400581236254236`], 
      Hue[0.046566476128817785`], 
      Hue[0.02419039381809336], 
      Hue[0.02174492034151146], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.01489759460708212], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.029081340771257166`], 
      Hue[0.015264415628569408`], 
      Hue[0.010006647653918302`], 
      Hue[0.015264415628569408`], 
      Hue[0.02590222525170069], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.004382058657779908], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.048156033888596045`], 
      Hue[0.05573700166599993], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.05842702249024005], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.010495742349234685`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.03715140324397745], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.030915445878693604`], 
      Hue[0.02394584647043517], 
      Hue[0.02590222525170069], 
      Hue[0.01881035216961316], 
      Hue[0.0778685366290662], 
      Hue[0.0778685366290662], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.10513556589295445`], 
      Hue[0.10917059712931458`], 
      Hue[0.11980840675244588`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.015264415628569408`], 
      Hue[0.008294816220310974], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.10917059712931458`], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.023456751775118787`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.2030767786300598], 
      Hue[0.2107800200812928], 
      Hue[0.2030767786300598], 
      Hue[0.19855265269838324`], 
      Hue[0.20173176821793973`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.18265707510060086`], 
      Hue[0.17177471812981138`], 
      Hue[0.13032394270174807`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.17483155997553876`], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.20099812617496515`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.20197631556559792`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.2259419556361006], 
      Hue[0.2283874291126825], 
      Hue[0.23437883913030816`], 
      Hue[0.23523475484711182`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.17177471812981138`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.14499678356123952`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.16382692933092016`], 
      Hue[0.1561236878796872], 
      Hue[0.16211509789731282`], 
      Hue[0.1682287815887676], 
      Hue[0.17177471812981138`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.18265707510060086`], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.23437883913030816`], 
      Hue[0.23963660710495926`], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.22667559767907514`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.2313219972845808], 
      Hue[0.23437883913030816`], 
      Hue[0.2259419556361006], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.20197631556559792`], 
      Hue[0.2030767786300598], 
      Hue[0.2129809462102165], 
      Hue[0.2030767786300598], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.24183753323388296`], 
      Hue[0.24012570180027565`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.2210510086829368], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.24575029079641403`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.22423012420249328`], 
      Hue[0.1561236878796872], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.18742574837993559`], 
      Hue[0.194395347788194], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.030915445878693604`], 
      Hue[0.03910778202524298], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[0.029081340771257166`], 
      Hue[0.02590222525170069], 
      Hue[0.015264415628569408`], 
      Hue[0.062217506378941995`], 
      Hue[0.048889675931570606`], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.048156033888596045`], 
      Hue[0.046566476128817785`], 
      Hue[0.062217506378941995`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.05133514940815251], 
      Hue[0.048156033888596045`], 
      Hue[0.00976210030626011], 
      Hue[0.08801725155688112], 
      Hue[0.08190356786542634], 
      Hue[0.0778685366290662], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.06723072700593491], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.01489759460708212], 
      Hue[0.00413751131012173], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.0778685366290662], 
      Hue[0.06723072700593491], 
      Hue[0.0778685366290662], 
      Hue[0.0778685366290662], 
      Hue[0.0753007894786552], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.08630542012327377], 
      Hue[0.062217506378941995`], 
      Hue[0.09351956687919039], 
      Hue[0.11956385940478768`], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.10513556589295445`], 
      Hue[0.10917059712931458`], 
      Hue[0.02419039381809336], 
      Hue[0.02174492034151146], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.10917059712931458`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.010495742349234685`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.015264415628569408`], 
      Hue[0.02394584647043517], 
      Hue[0.030915445878693604`], 
      Hue[0.03690685589631927], 
      Hue[0.030915445878693604`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.01881035216961316], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.008294816220310974], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.023456751775118787`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.062217506378941995`], 
      Hue[0.015264415628569408`], 
      Hue[0.10917059712931458`], 
      Hue[0.05573700166599993], 
      Hue[0.048156033888596045`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.015264415628569408`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.21872780888018395`], 
      Hue[0.22643105033141697`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.2313219972845808], 
      Hue[0.23437883913030816`], 
      Hue[0.23963660710495926`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.19415080044053584`], 
      Hue[0.1914607796162957], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.20173176821793973`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.2129809462102165], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.20173176821793973`], 
      Hue[0.18742574837993559`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.18241252775294264`], 
      Hue[0.17458701262788057`], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.12482162737943879`], 
      Hue[0.12812301657282438`], 
      Hue[0.14047265762956299`], 
      Hue[0.2259419556361006], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.14047265762956299`], 
      Hue[0.18742574837993559`], 
      Hue[0.22398557685483506`], 
      Hue[0.23437883913030816`], 
      Hue[0.24159298588622477`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23988115445261743`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.2208064613352786], 
      Hue[0.21872780888018395`], 
      Hue[0.17177471812981138`], 
      Hue[0.18265707510060086`], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.14475223621358133`], 
      Hue[0.1561236878796872], 
      Hue[0.163582381983262], 
      Hue[0.2030767786300598], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.17177471812981138`], 
      Hue[0.14047265762956299`], 
      Hue[0.1298348480064317], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.20173176821793973`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.2107800200812928], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.23437883913030816`], 
      Hue[0.22814288176502429`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.23437883913030816`], 
      Hue[0.23499020749945365`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.23437883913030816`], 
      Hue[0.22398557685483506`], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.25], 
      Hue[0.24575029079641403`], 
      Hue[0.25], 
      Hue[0.17177471812981138`], 
      Hue[0.16798423424110942`], 
      Hue[0.17177471812981138`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.20099812617496515`], 
      Hue[0.2030767786300598], 
      Hue[0.062217506378941995`], 
      Hue[0.0674752743535931], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.048156033888596045`], 
      Hue[0.05573700166599993], 
      Hue[0.062217506378941995`], 
      Hue[0.05842702249024005], 
      Hue[0.0778685366290662], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.08654996747093195], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.02419039381809336], 
      Hue[0.02590222525170069], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.01881035216961316], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.02614677259935888], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.030915445878693604`], 
      Hue[0.004382058657779908], 
      Hue[0.01489759460708212], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.030915445878693604`], 
      Hue[0.029081340771257166`], 
      Hue[0.015264415628569408`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.039352329372901174`], 
      Hue[0.010006647653918302`], 
      Hue[0.10538011324061264`], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.0778685366290662], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.12005295410010407`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.015264415628569408`], 
      Hue[0.008294816220310974], 
      Hue[0.015264415628569408`], 
      Hue[0.023456751775118787`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.010495742349234685`], 
      Hue[0.015264415628569408`], 
      Hue[0.048156033888596045`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.030915445878693604`], 
      Hue[0.03715140324397745], 
      Hue[0.030915445878693604`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.10917059712931458`], 
      Hue[0.12200933288136959`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.062217506378941995`], 
      Hue[0.0753007894786552], 
      Hue[0.0778685366290662], 
      Hue[0.08214811521308452], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.0674752743535931], 
      Hue[0.062217506378941995`], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.015264415628569408`], 
      Hue[0.02174492034151146], 
      Hue[0.015264415628569408`], 
      Hue[0.062217506378941995`], 
      Hue[0.0491342232792288], 
      Hue[0.062217506378941995`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.048400581236254236`], 
      Hue[0.046566476128817785`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.22667559767907514`], 
      Hue[0.21872780888018395`], 
      Hue[0.20173176821793973`], 
      Hue[0.25], 
      Hue[0.24159298588622477`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.2210510086829368], 
      Hue[0.23437883913030816`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.2129809462102165], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.23963660710495926`], 
      Hue[0.25], 
      Hue[0.21872780888018395`], 
      Hue[0.2313219972845808], 
      Hue[0.23437883913030816`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.14475223621358133`], 
      Hue[0.1561236878796872], 
      Hue[0.163582381983262], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.13032394270174807`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.25], 
      Hue[0.24012570180027565`], 
      Hue[0.23437883913030816`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.25], 
      Hue[0.18265707510060086`], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.23437883913030816`], 
      Hue[0.23437883913030816`], 
      Hue[0.2259419556361006], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.21872780888018395`], 
      Hue[0.194395347788194], 
      Hue[0.20173176821793973`], 
      Hue[0.2030767786300598], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.23437883913030816`], 
      Hue[0.22398557685483506`], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.2107800200812928], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.24575029079641403`], 
      Hue[0.23523475484711182`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.18742574837993559`], 
      Hue[0.20099812617496515`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.18742574837993559`], 
      Hue[0.23437883913030816`], 
      Hue[0.2283874291126825], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.20173176821793973`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.18742574837993559`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.17483155997553876`], 
      Hue[0.18265707510060086`], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.1682287815887676], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.008294816220310974], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.062217506378941995`], 
      Hue[0.06723072700593491], 
      Hue[0.062217506378941995`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.030915445878693604`], 
      Hue[0.023456751775118787`], 
      Hue[0.029081340771257166`], 
      Hue[0.030915445878693604`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.09351956687919039], 
      Hue[0.10513556589295445`], 
      Hue[0.10917059712931458`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.08630542012327377], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.0753007894786552], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.048156033888596045`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.010006647653918302`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.02394584647043517], 
      Hue[0.030915445878693604`], 
      Hue[0.01881035216961316], 
      Hue[0.046566476128817785`], 
      Hue[0.05573700166599993], 
      Hue[0.048156033888596045`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.010495742349234685`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.03690685589631927], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[0.046566476128817785`], 
      Hue[0.048156033888596045`], 
      Hue[0.046566476128817785`], 
      Hue[0.02174492034151146], 
      Hue[0.015264415628569408`], 
      Hue[0.03910778202524298], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.06723072700593491], 
      Hue[0.0778685366290662], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.062217506378941995`], 
      Hue[0.01489759460708212], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.08190356786542634], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.11980840675244588`], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.030915445878693604`], 
      Hue[0.10917059712931458`], 
      Hue[0.030915445878693604`], 
      Hue[0.02590222525170069], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.015264415628569408`], 
      Hue[0.10917059712931458`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.00413751131012173], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.046566476128817785`], 
      Hue[0.048889675931570606`], 
      Hue[0.046566476128817785`], 
      Hue[0.2030767786300598], 
      Hue[0.19350048198980768`], 
      Hue[0.23437883913030816`], 
      Hue[0.2312608604476662], 
      Hue[0.25], 
      Hue[0.21872780888018395`], 
      Hue[0.21004148709136505`], 
      Hue[0.21829853016419448`], 
      Hue[0.18742574837993559`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.2082185053268779], 
      Hue[0.2414315464262473], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.16141940285656112`], 
      Hue[0.12482162737943879`], 
      Hue[0.2030767786300598], 
      Hue[0.18752941519035593`], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.17846920177195436`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.16716629023160814`], 
      Hue[0.23437883913030816`], 
      Hue[0.23313964247438637`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.22781570416122376`], 
      Hue[0.21872780888018395`], 
      Hue[0.20127371957261903`], 
      Hue[0.25], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.17177471812981138`], 
      Hue[0.21835532704046381`], 
      Hue[0.20787879927498423`], 
      Hue[0.23109806584704495`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.19314204263144577`], 
      Hue[0.1616324386585138], 
      Hue[0.16628598877126086`], 
      Hue[0.20999746856878657`], 
      Hue[0.18742574837993559`], 
      Hue[0.24122533478934052`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23297778661768312`], 
      Hue[0.22606253106445984`], 
      Hue[0.22779464964665294`], 
      Hue[0.2010379577505307], 
      Hue[0.2030767786300598], 
      Hue[0.19870847707539718`], 
      Hue[0.21872780888018395`], 
      Hue[0.18742574837993559`], 
      Hue[0.25], 
      Hue[0.24585752900867727`], 
      Hue[0.17177471812981138`], 
      Hue[0.16128141375756902`], 
      Hue[0.17783949235173452`], 
      Hue[0.17177471812981138`], 
      Hue[0.22773573252882534`], 
      Hue[0.23437883913030816`], 
      Hue[0.2457552820896135], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.07166314768223961], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.062115611650751065`], 
      Hue[0.046566476128817785`], 
      Hue[0.039914788272515], 
      Hue[0.08296605922258579], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.09351956687919039], 
      Hue[0.08840037573487891], 
      Hue[0.09351956687919039], 
      Hue[0.08858608995252082], 
      Hue[0.10917059712931458`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.041899592531562446`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.04882591212119489], 
      Hue[0.046566476128817785`], 
      Hue[0.022072097945311966`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.01680551126152513], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.030915445878693604`], 
      Hue[0.018626941658869536`], 
      Hue[0.056686511697743025`], 
      Hue[0.046566476128817785`], 
      Hue[0.03174672704650523], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[0.008602649746806482], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.04912112252846136], 
      Hue[0.046566476128817785`], 
      Hue[0.04223872912783648], 
      Hue[0.008945234956734105], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.051462399336149045`], 
      Hue[0.03172181967592859], 
      Hue[0.062217506378941995`], 
      Hue[0.05667443316535635], 
      Hue[0.030915445878693604`], 
      Hue[0.0778685366290662], 
      Hue[0.0720370229541401], 
      Hue[0.08389212392927847], 
      Hue[0.08857427607099141], 
      Hue[0.02213721504504647], 
      Hue[0.017115603087496642`], 
      Hue[0.02406324220514873], 
      Hue[0.022193197207476048`], 
      Hue[0.015264415628569408`], 
      Hue[0.004352891729454467], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.10917059712931458`], 
      Hue[0.01885994093733276], 
      Hue[0.046566476128817785`], 
      Hue[0.04003706194634411], 
      Hue[0.015264415628569408`], 
      Hue[0.0043430405681817025`], 
      Hue[0.030915445878693604`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.20826729608410488`], 
      Hue[0.2030767786300598], 
      Hue[0.20130643733299908`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.1785612429440125], 
      Hue[0.17177471812981138`], 
      Hue[0.16176458003233612`], 
      Hue[0.18742574837993559`], 
      Hue[0.21848887219160967`], 
      Hue[0.2030767786300598], 
      Hue[0.19350048198980768`], 
      Hue[0.21872780888018395`], 
      Hue[0.21035450769636752`], 
      Hue[0.2030767786300598], 
      Hue[0.1879380922949237], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.22806025150888198`], 
      Hue[0.23327173075748603`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.16741083757926634`], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.16173764438244911`], 
      Hue[0.18742574837993559`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.22779464964665294`], 
      Hue[0.2314196671094077], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.1934430952374644], 
      Hue[0.18742574837993559`], 
      Hue[0.21835532704046381`], 
      Hue[0.20787879927498423`], 
      Hue[0.20999746856878657`], 
      Hue[0.24585752900867727`], 
      Hue[0.23437883913030816`], 
      Hue[0.22785542814326648`], 
      Hue[0.24587875452495073`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.23297778661768312`], 
      Hue[0.23437883913030816`], 
      Hue[0.24122533478934052`], 
      Hue[0.21872780888018395`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.24152969970738747`], 
      Hue[0.25], 
      Hue[0.2315054077953244], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.2010379577505307], 
      Hue[0.2030767786300598], 
      Hue[0.17177471812981138`], 
      Hue[0.16628598877126086`], 
      Hue[0.1782081945066653], 
      Hue[0.046566476128817785`], 
      Hue[0.031544676516455664`], 
      Hue[0.030915445878693604`], 
      Hue[0.018626941658869536`], 
      Hue[0.062217506378941995`], 
      Hue[0.056414041747325616`], 
      Hue[0.062115611650751065`], 
      Hue[0.046566476128817785`], 
      Hue[0.0397383305785185], 
      Hue[0.04168818882370194], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.048581364773536695`], 
      Hue[0.08272151187492761], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.062217506378941995`], 
      Hue[0.07141860033458142], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[0.008456255680288446], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.09351956687919039], 
      Hue[0.08840037573487891], 
      Hue[0.0778685366290662], 
      Hue[0.08858608995252082], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.062217506378941995`], 
      Hue[0.022072097945311966`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.01672386813623611], 
      Hue[0.10917059712931458`], 
      Hue[0.046566476128817785`], 
      Hue[0.08389212392927847], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.008945234956734105], 
      Hue[0.0778685366290662], 
      Hue[0.0720370229541401], 
      Hue[0.02213721504504647], 
      Hue[0.030915445878693604`], 
      Hue[0.03169019717407624], 
      Hue[0.015264415628569408`], 
      Hue[0.017115603087496642`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.0043430405681817025`], 
      Hue[0.015264415628569408`], 
      Hue[0.018646135782086876`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.004246513633223148], 
      Hue[0.030915445878693604`], 
      Hue[0.0398145835056697], 
      Hue[0.062217506378941995`], 
      Hue[0.015264415628569408`], 
      Hue[0.022193197207476048`], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.0778685366290662], 
      Hue[0.05667443316535635], 
      Hue[0.04223872912783648], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.04912112252846136], 
      Hue[0.19828180229298276`], 
      Hue[0.20098052617645945`], 
      Hue[0.2030767786300598], 
      Hue[0.20787879927498423`], 
      Hue[0.2099974685687866], 
      Hue[0.2030767786300598], 
      Hue[0.21835532704046384`], 
      Hue[0.19314204263144577`], 
      Hue[0.23109806584704495`], 
      Hue[0.21872780888018395`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.16124287902399864`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.24575493637138915`], 
      Hue[0.23437883913030816`], 
      Hue[0.2277357325288253], 
      Hue[0.21872780888018395`], 
      Hue[0.1778394923517345], 
      Hue[0.25], 
      Hue[0.2457552820896135], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.24122533478934052`], 
      Hue[0.23437883913030816`], 
      Hue[0.22779464964665297`], 
      Hue[0.23297778661768312`], 
      Hue[0.22586213809901773`], 
      Hue[0.17177471812981138`], 
      Hue[0.16628598877126086`], 
      Hue[0.25], 
      Hue[0.1616324386585138], 
      Hue[0.20127371957261903`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.20816778226243407`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.23313964247438637`], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.22781570416122376`], 
      Hue[0.21872780888018395`], 
      Hue[0.18752941519035587`], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.16128141375756902`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.23126086044766622`], 
      Hue[0.23437883913030816`], 
      Hue[0.21829853016419448`], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.2414315464262473], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.17177471812981138`], 
      Hue[0.17831876393729942`], 
      Hue[0.17177471812981138`], 
      Hue[0.16716629023160814`], 
      Hue[0.2030767786300598], 
      Hue[0.2030767786300598], 
      Hue[0.21004148709136505`], 
      Hue[0.21872780888018395`], 
      Hue[0.19350048198980768`], 
      Hue[0.2030767786300598], 
      Hue[0.0778685366290662], 
      Hue[0.0720370229541401], 
      Hue[0.08389212392927847], 
      Hue[0.062217506378941995`], 
      Hue[0.05667443316535635], 
      Hue[0.05146239933614907], 
      Hue[0.04912112252846139], 
      Hue[0.046566476128817785`], 
      Hue[0.04223872912783648], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[0.008602649746806482], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.030915445878693604`], 
      Hue[0.01870424110784194], 
      Hue[0.03174672704650523], 
      Hue[0.08857427607099141], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.030915445878693604`], 
      Hue[0.0400370619463441], 
      Hue[0.022351545335379072`], 
      Hue[0.015264415628569408`], 
      Hue[0.008945234956734105], 
      Hue[0.017115603087496642`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.0043430405681817025`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.004352891729454467], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.018859940937332745`], 
      Hue[0.0317218196759286], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.02406324220514873], 
      Hue[0.022330815028609202`], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.08858608995252082], 
      Hue[0.062217506378941995`], 
      Hue[0.06211561165075109], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.07166314768223961], 
      Hue[0.08296605922258579], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.08840037573487894], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.015264415628569408`], 
      Hue[0.01680551126152513], 
      Hue[0.062217506378941995`], 
      Hue[0.056686511697743025`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.022072097945311966`], 
      Hue[0.030915445878693604`], 
      Hue[0.039914788272515], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.04195321912437637], 
      Hue[0.046566476128817785`], 
      Hue[0.04882591212119489], 
      Hue[0.21872780888018395`], 
      Hue[0.2099974685687866], 
      Hue[0.25], 
      Hue[0.2457552820896135], 
      Hue[0.22785542814326645`], 
      Hue[0.23437883913030816`], 
      Hue[0.23141966710940767`], 
      Hue[0.2030767786300598], 
      Hue[0.19314204263144577`], 
      Hue[0.21872780888018395`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.24585752900867727`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.18742574837993559`], 
      Hue[0.1778394923517345], 
      Hue[0.23297778661768312`], 
      Hue[0.22779464964665297`], 
      Hue[0.17177471812981138`], 
      Hue[0.16628598877126086`], 
      Hue[0.21835532704046384`], 
      Hue[0.20787879927498423`], 
      Hue[0.25], 
      Hue[0.24122533478934052`], 
      Hue[0.20103795775053068`], 
      Hue[0.23437883913030816`], 
      Hue[0.2030767786300598], 
      Hue[0.23437883913030816`], 
      Hue[0.23126086044766622`], 
      Hue[0.21872780888018395`], 
      Hue[0.21848887219160967`], 
      Hue[0.23437883913030816`], 
      Hue[0.24152969970738747`], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.19350048198980768`], 
      Hue[0.21872780888018395`], 
      Hue[0.21035450769636752`], 
      Hue[0.18742574837993559`], 
      Hue[0.23437883913030816`], 
      Hue[0.23327173075748603`], 
      Hue[0.21872780888018395`], 
      Hue[0.22806025150888198`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.20826729608410488`], 
      Hue[0.20130643733299908`], 
      Hue[0.18742574837993559`], 
      Hue[0.25], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.18792948147282304`], 
      Hue[0.17177471812981138`], 
      Hue[0.16176458003233612`], 
      Hue[0.1561236878796872], 
      Hue[0.16173764438244914`], 
      Hue[0.17177471812981138`], 
      Hue[0.16741083757926634`], 
      Hue[0.17177471812981138`], 
      Hue[0.1785612429440125], 
      Hue[0.1561236878796872], 
      Hue[0.2030767786300598], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.17177471812981138`], 
      Hue[0.015264415628569408`], 
      Hue[0.0043430405681817025`], 
      Hue[0.030915445878693604`], 
      Hue[0.022193197207476076`], 
      Hue[0.018646135782086876`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.0720370229541401], 
      Hue[0.0778685366290662], 
      Hue[0.08389212392927847], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.08858608995252082], 
      Hue[0.09351956687919039], 
      Hue[0.0398145835056697], 
      Hue[0.015264415628569408`], 
      Hue[0.004352891729454467], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.06211561165075109], 
      Hue[0.04912112252846139], 
      Hue[0.046566476128817785`], 
      Hue[0.04223872912783648], 
      Hue[0.02213721504504647], 
      Hue[0.017115603087496642`], 
      Hue[0.015264415628569408`], 
      Hue[0.008945234956734105], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.05667443316535635], 
      Hue[0.03169019717407624], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.022072097945311966`], 
      Hue[0.015264415628569408`], 
      Hue[0.04168818882370194], 
      Hue[0.030915445878693604`], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.048581364773536695`], 
      Hue[0.01672386813623611], 
      Hue[0.062217506378941995`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.08272151187492761], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.08840037573487894], 
      Hue[0.07141860033458142], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.10917059712931458`], 
      Hue[0.046566476128817785`], 
      Hue[0.03973833057851851], 
      Hue[0.030915445878693604`], 
      Hue[0.018626941658869522`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[0.008456255680288446], 
      Hue[0.046566476128817785`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.03154467651645568], 
      Hue[0.056414041747325616`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.046566476128817785`], 
      Hue[0.245650938717485], 
      Hue[0.25], 
      Hue[0.21872780888018395`], 
      Hue[0.2106873005014684], 
      Hue[0.20093806957042426`], 
      Hue[0.2030767786300598], 
      Hue[0.2016237824603234], 
      Hue[0.23487091378461053`], 
      Hue[0.14047265762956299`], 
      Hue[0.12778145618980286`], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.17177471812981138`], 
      Hue[0.12482162737943879`], 
      Hue[0.22391004339272516`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.2207641511868543], 
      Hue[0.12482162737943879`], 
      Hue[0.23437883913030816`], 
      Hue[0.2400565300502479], 
      Hue[0.17177471812981138`], 
      Hue[0.16786741969470081`], 
      Hue[0.182576036294078], 
      Hue[0.16173557926169482`], 
      Hue[0.22802561858149767`], 
      Hue[0.22558084128708145`], 
      Hue[0.23437883913030816`], 
      Hue[0.19820040673472442`], 
      Hue[0.22641311697200325`], 
      Hue[0.21872780888018395`], 
      Hue[0.20174084848085694`], 
      Hue[0.2030767786300598], 
      Hue[0.21297869226561256`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.231328616687222], 
      Hue[0.23963483622798895`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.20170687725442266`], 
      Hue[0.2030767786300598], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.2242354044860903], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.22595266516944762`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.19440995169730355`], 
      Hue[0.21872780888018395`], 
      Hue[0.18742574837993559`], 
      Hue[0.19171362455246355`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.1303652517834379], 
      Hue[0.12482162737943879`], 
      Hue[0.17455125539232186`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.14478986498718308`], 
      Hue[0.17177471812981138`], 
      Hue[0.1635994768914648], 
      Hue[0.18265330937783028`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.14047265762956299`], 
      Hue[0.23437883913030816`], 
      Hue[0.241555653402321], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.08226011266479588], 
      Hue[0.06755664002363981], 
      Hue[0.04919384381322439], 
      Hue[0.030915445878693604`], 
      Hue[0.08838528327437489], 
      Hue[0.07533937337315136], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.0862884326457588], 
      Hue[0.0778685366290662], 
      Hue[0.10917059712931458`], 
      Hue[0.06723451179867362], 
      Hue[0.04818102550484675], 
      Hue[0.12227005081878009`], 
      Hue[0.03944412385941215], 
      Hue[0.046566476128817785`], 
      Hue[0.04850487517309736], 
      Hue[0.05168987184900185], 
      Hue[0.021864214056354553`], 
      Hue[0.024309687532936455`], 
      Hue[0.015112323293799704`], 
      Hue[0.015264415628569408`], 
      Hue[0.02913224870385324], 
      Hue[0.01007354872035851], 
      Hue[0.015264415628569408`], 
      Hue[0.025984915200315414`], 
      Hue[0.030915445878693604`], 
      Hue[0.004480063032743328], 
      Hue[0.05572191095992006], 
      Hue[0.046566476128817785`], 
      Hue[0.05841872490173043], 
      Hue[0.062217506378941995`], 
      Hue[0.030915445878693604`], 
      Hue[0.000013553444509012413`], 
      Hue[0.010497488158179122`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.03715362598131794], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.062217506378941995`], 
      Hue[0.0481473467106536], 
      Hue[0.046566476128817785`], 
      Hue[0.02589619064187551], 
      Hue[0.062217506378941995`], 
      Hue[0.02393562373405847], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.1197668217184031], 
      Hue[0.10509810101220082`], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.018803454527674512`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.0778685366290662], 
      Hue[0.10917059712931458`], 
      Hue[0.008332148704214754], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.10917059712931458`], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.02347515248102279], 
      Hue[0.030915445878693604`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.21053608389777279`], 
      Hue[0.2030767786300598], 
      Hue[0.20144212970495462`], 
      Hue[0.19824728073531006`], 
      Hue[0.1823664439918573], 
      Hue[0.21872780888018395`], 
      Hue[0.2007827439610111], 
      Hue[0.21872780888018395`], 
      Hue[0.2281163624003849], 
      Hue[0.22565853651666035`], 
      Hue[0.23437883913030816`], 
      Hue[0.23499937286655975`], 
      Hue[0.14047265762956299`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.17177471812981138`], 
      Hue[0.17460701311283583`], 
      Hue[0.1449187269873431], 
      Hue[0.14047265762956299`], 
      Hue[0.12506954611449939`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.16372499208999824`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.16782712286544788`], 
      Hue[0.1616777361763647], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.18253559315329534`], 
      Hue[0.20183306855669012`], 
      Hue[0.23957947874052604`], 
      Hue[0.23437883913030816`], 
      Hue[0.22656870072190108`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.22593480264769877`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.21290952105814157`], 
      Hue[0.25], 
      Hue[0.2399437176633639], 
      Hue[0.24170364699277638`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.2312936308202171], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.2208814194442018], 
      Hue[0.2455236808151372], 
      Hue[0.1561236878796872], 
      Hue[0.23437883913030816`], 
      Hue[0.22401091887628866`], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.20193634463854], 
      Hue[0.18742574837993559`], 
      Hue[0.19438410737784828`], 
      Hue[0.21872780888018395`], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.039356741347677165`], 
      Hue[0.030915445878693604`], 
      Hue[0.02611571948128387], 
      Hue[0.015264415628569408`], 
      Hue[0.04910749086113206], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.029235824895610912`], 
      Hue[0.009945758822809916], 
      Hue[0.08231386441075295], 
      Hue[0.08848070392994234], 
      Hue[0.0675148270785269], 
      Hue[0.004365866962896134], 
      Hue[0.015065724593190749`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.06735282414904889], 
      Hue[0.0778685366290662], 
      Hue[0.07552370327326575], 
      Hue[0.0778685366290662], 
      Hue[0.08640478169046978], 
      Hue[0.09351956687919039], 
      Hue[0.04829738022953958], 
      Hue[0.12458472725482532`], 
      Hue[0.10917059712931458`], 
      Hue[0.1052099851614503], 
      Hue[0.10917059712931458`], 
      Hue[0.022013212872535853`], 
      Hue[0.024470610461607742`], 
      Hue[0.015264415628569408`], 
      Hue[0.10917059712931458`], 
      Hue[0.04845037173715325], 
      Hue[0.05163380989950979], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.00007830339018385923], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.023954021314322962`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.010552062020945926`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.018837429249233054`], 
      Hue[0.008428702461417553], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.062217506378941995`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.055748242076345655`], 
      Hue[0.048196004815653976`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.023559978245914978`], 
      Hue[0.015264415628569408`], 
      Hue[0.03698042372054597], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.015264415628569408`], 
      Hue[0.22641311697200325`], 
      Hue[0.21872780888018395`], 
      Hue[0.231328616687222], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.21872780888018395`], 
      Hue[0.23963483622798895`], 
      Hue[0.19146907720480533`], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.1941658911466157], 
      Hue[0.2030767786300598], 
      Hue[0.21872780888018395`], 
      Hue[0.2030767786300598], 
      Hue[0.21297869226561256`], 
      Hue[0.2030767786300598], 
      Hue[0.20170687725442266`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.20174084848085694`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.18233331004319558`], 
      Hue[0.22595266516944762`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.22399161146466023`], 
      Hue[0.241555653402321], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23981492618131428`], 
      Hue[0.2207641511868543], 
      Hue[0.18265330937783028`], 
      Hue[0.17177471812981138`], 
      Hue[0.14478986498718308`], 
      Hue[0.1561236878796872], 
      Hue[0.1635994768914648], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.17177471812981138`], 
      Hue[0.12987727314217232`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.2016237824603234], 
      Hue[0.2106873005014684], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.23437883913030816`], 
      Hue[0.22802561858149767`], 
      Hue[0.23487091378461053`], 
      Hue[0.12482162737943879`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1275773300649502], 
      Hue[0.12482162737943879`], 
      Hue[0.18742574837993559`], 
      Hue[0.17454475407676573`], 
      Hue[0.17177471812981138`], 
      Hue[0.17177471812981138`], 
      Hue[0.245650938717485], 
      Hue[0.16786741969470081`], 
      Hue[0.22390483418844173`], 
      Hue[0.21872780888018395`], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.20093806957042426`], 
      Hue[0.05572191095992006], 
      Hue[0.062217506378941995`], 
      Hue[0.05841872490173043], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.06747897213960219], 
      Hue[0.062217506378941995`], 
      Hue[0.08653248760276439], 
      Hue[0.025896944968103658`], 
      Hue[0.030915445878693604`], 
      Hue[0.0481473467106536], 
      Hue[0.046566476128817785`], 
      Hue[0.024179684284746344`], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.015112323293799704`], 
      Hue[0.004480063032743328], 
      Hue[0.026225428891943625`], 
      Hue[0.015264415628569408`], 
      Hue[0.02913224870385324], 
      Hue[0.030915445878693604`], 
      Hue[0.01007354872035851], 
      Hue[0.10534280415923318`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.1200104130882672], 
      Hue[0.008332148704214754], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.010497488158179122`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.018803454527674512`], 
      Hue[0.000013553444509012413`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.046566476128817785`], 
      Hue[0.03715362598131794], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.02347515248102279], 
      Hue[0.030915445878693604`], 
      Hue[0.04818102550484675], 
      Hue[0.046566476128817785`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.0778685366290662], 
      Hue[0.07533937337315136], 
      Hue[0.08226011266479588], 
      Hue[0.0778685366290662], 
      Hue[0.06755664002363981], 
      Hue[0.10917059712931458`], 
      Hue[0.12247417694363277`], 
      Hue[0.10917059712931458`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.04919384381322439], 
      Hue[0.015264415628569408`], 
      Hue[0.021864214056354553`], 
      Hue[0.030915445878693604`], 
      Hue[0.03944412385941215], 
      Hue[0.04850487517309736], 
      Hue[0.046566476128817785`], 
      Hue[0.22656870072190108`], 
      Hue[0.21872780888018395`], 
      Hue[0.2208814194442018], 
      Hue[0.23437883913030816`], 
      Hue[0.24146348935794137`], 
      Hue[0.25], 
      Hue[0.21290823411846455`], 
      Hue[0.2030767786300598], 
      Hue[0.20159092872178666`], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.23437883913030816`], 
      Hue[0.21872780888018395`], 
      Hue[0.23957947874052604`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1634836808452265], 
      Hue[0.12506954611449939`], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.2399437176633639], 
      Hue[0.25], 
      Hue[0.14467839891394957`], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.12482162737943879`], 
      Hue[0.18253559315329534`], 
      Hue[0.18742574837993559`], 
      Hue[0.2312936308202171], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.2259337807922128], 
      Hue[0.23437883913030816`], 
      Hue[0.25], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.18742574837993559`], 
      Hue[0.21872780888018395`], 
      Hue[0.20169308667562558`], 
      Hue[0.21872780888018395`], 
      Hue[0.19438308552236228`], 
      Hue[0.2030767786300598], 
      Hue[0.25], 
      Hue[0.2237761139875729], 
      Hue[0.21872780888018395`], 
      Hue[0.23499937286655975`], 
      Hue[0.2455236808151372], 
      Hue[0.25], 
      Hue[0.2007827439610111], 
      Hue[0.23437883913030816`], 
      Hue[0.21053608389777279`], 
      Hue[0.21872780888018395`], 
      Hue[0.2281163624003849], 
      Hue[0.23437883913030816`], 
      Hue[0.20144212970495462`], 
      Hue[0.12482162737943879`], 
      Hue[0.1823664439918573], 
      Hue[0.17177471812981138`], 
      Hue[0.1561236878796872], 
      Hue[0.17177471812981138`], 
      Hue[0.17460701311283583`], 
      Hue[0.16780120939942728`], 
      Hue[0.008428702461417553], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.029235824895610912`], 
      Hue[0.1052154976998574], 
      Hue[0.09351956687919039], 
      Hue[0.0778685366290662], 
      Hue[0.062217506378941995`], 
      Hue[0.08640478169046978], 
      Hue[0.06735282414904889], 
      Hue[0.10917059712931458`], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.07552370327326575], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.010192171907779088`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.04829738022953958], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.023954021314322962`], 
      Hue[0.018837429249233054`], 
      Hue[0.030915445878693604`], 
      Hue[0.048196004815653976`], 
      Hue[0.055748242076345655`], 
      Hue[0.062217506378941995`], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.00007830339018385923], 
      Hue[0.010552062020945926`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.046566476128817785`], 
      Hue[0.03698042372054597], 
      Hue[0.0778685366290662], 
      Hue[0.046566476128817785`], 
      Hue[0.030915445878693604`], 
      Hue[0.030915445878693604`], 
      Hue[0.015264415628569408`], 
      Hue[0.015264415628569408`], 
      Hue[0.023559978245914978`], 
      Hue[0.0675293963130188], 
      Hue[0.022013212872535853`], 
      Hue[0.015264415628569408`], 
      Hue[0.04845037173715325], 
      Hue[0.015065724593190749`], 
      Hue[0.08231386441075295], 
      Hue[0.0778685366290662], 
      Hue[0.030915445878693604`], 
      Hue[0.12459574586527246`], 
      Hue[0.02611571948128387], 
      Hue[0.030915445878693604`], 
      Hue[0.046566476128817785`], 
      Hue[0.015264415628569408`], 
      Hue[0.10917059712931458`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.004372893290673821], 
      Hue[0.039356741347677165`], 
      Hue[0.046566476128817785`], 
      Hue[0.04910749086113206], 
      Hue[0.18742574837993559`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.17177471812981138`], 
      Hue[0.0778685366290662], 
      Hue[0.046566476128817785`], 
      Hue[0.062217506378941995`], 
      Hue[0.09351956687919039], 
      Hue[0.062217506378941995`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.015264415628569408`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.10917059712931458`], 
      Hue[0.046566476128817785`], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.1561236878796872], 
      Hue[0.1561236878796872], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.25], 
      Hue[0.2030767786300598], 
      Hue[0.17177471812981138`], 
      Hue[0.062217506378941995`], 
      Hue[0.0778685366290662], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.09351956687919039], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.0778685366290662], 
      Hue[0.046566476128817785`], 
      Hue[0.046566476128817785`], 
      Hue[0.18742574837993559`], 
      Hue[0.18742574837993559`], 
      Hue[0.23437883913030816`], 
      Hue[0.2030767786300598], 
      Hue[0.14047265762956299`], 
      Hue[0.12482162737943879`], 
      Hue[0.1561236878796872], 
      Hue[0.14047265762956299`], 
      Hue[0.1561236878796872], 
      Hue[0.25], 
      Hue[0.17177471812981138`], 
      Hue[0.2030767786300598], 
      Hue[0.062217506378941995`], 
      Hue[0.062217506378941995`], 
      Hue[0.09351956687919039], 
      Hue[0.09351956687919039], 
      Hue[0.10917059712931458`], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[0.2030767786300598], 
      Hue[0.12482162737943879`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.18742574837993559`], 
      Hue[0.2030767786300598], 
      Hue[0.17177471812981138`], 
      Hue[0.062217506378941995`], 
      Hue[0.046566476128817785`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.062217506378941995`], 
      Hue[0.10917059712931458`], 
      Hue[1.3877787807814457`*^-17], 
      Hue[0.21821867471336118`], 
      Hue[0.1934404253852668], 
      Hue[0.2081257857470535], 
      Hue[0.2413316131248078], 
      Hue[0.16137350729523475`], 
      Hue[0.2099961108689126], 
      Hue[0.23119211083848484`], 
      Hue[0.17838816296543147`], 
      Hue[0.1670483711986669], 
      Hue[0.22769851279151448`], 
      Hue[0.20116576407634598`], 
      Hue[0.23302906966587608`], 
      Hue[0.21835325949229945`], 
      Hue[0.20788819281083715`], 
      Hue[0.2310816170298893], 
      Hue[0.16164679291317105`], 
      Hue[0.20997826848795395`], 
      Hue[0.19313943650799745`], 
      Hue[0.24122366714697746`], 
      Hue[0.23298440602032433`], 
      Hue[0.22606787392542038`], 
      Hue[0.22780496722072768`], 
      Hue[0.20105262066533364`], 
      Hue[0.19871566254842743`], 
      Hue[0.18750452422683883`], 
      Hue[0.16127678064921647`], 
      Hue[0.17785464813602178`], 
      Hue[0.16631368211001674`], 
      Hue[0.2276964644216213], 
      Hue[0.24579627746212573`], 
      Hue[0.24572037921354378`], 
      Hue[0.07174451335228632], 
      Hue[0.03996012330937869], 
      Hue[0.08307875543108312], 
      Hue[0.08844474144416109], 
      Hue[0.08859052162137979], 
      Hue[0.06214060326700177], 
      Hue[0.04199138701807342], 
      Hue[0.04893080110290003], 
      Hue[0.022191391660155074`], 
      Hue[0.016916681952775403`], 
      Hue[0.018696778769605862`], 
      Hue[0.05674613223173862], 
      Hue[0.03182634941726428], 
      Hue[0.008701845837095087], 
      Hue[0.04910651861935181], 
      Hue[0.008946877244716808], 
      Hue[0.05145517747698637], 
      Hue[0.031723895193439614`], 
      Hue[0.04222929938468015], 
      Hue[0.05667705391351538], 
      Hue[0.08386424839750448], 
      Hue[0.08855983359104433], 
      Hue[0.022127219003337334`], 
      Hue[0.017108705445557995`], 
      Hue[0.07202191034872545], 
      Hue[0.02405730121737315], 
      Hue[0.004412616826920221], 
      Hue[0.018876530893865012`], 
      Hue[0.04005626202717673], 
      Hue[0.004377474090420275], 
      Hue[0.02223311940979039], 
      Hue[0.2080233599005849], 
      Hue[0.2010151895035852], 
      Hue[0.2182667551965105], 
      Hue[0.19328509977585362`], 
      Hue[0.21018889379140207`], 
      Hue[0.22778795743962288`], 
      Hue[0.23301631403941547`], 
      Hue[0.1615084658867375], 
      Hue[0.16700683672289016`], 
      Hue[0.17827061183526896`], 
      Hue[0.161590346779512], 
      Hue[0.18779484528601587`], 
      Hue[0.22778741188720664`], 
      Hue[0.23132216544094636`], 
      Hue[0.1933585500892545], 
      Hue[0.21828862808452432`], 
      Hue[0.20988654241861132`], 
      Hue[0.2456896407191539], 
      Hue[0.24575561923937256`], 
      Hue[0.24117153676595432`], 
      Hue[0.23295045834035977`], 
      Hue[0.2277127288408627], 
      Hue[0.2313131409012023], 
      Hue[0.24130268328539745`], 
      Hue[0.201028223878419], 
      Hue[0.20784379052557672`], 
      Hue[0.1781542387143092], 
      Hue[0.16626654363821194`], 
      Hue[0.03176634210846997], 
      Hue[0.01881820884299784], 
      Hue[0.056631856676887055`], 
      Hue[0.03990060061298854], 
      Hue[0.08313504192422291], 
      Hue[0.07170270040717343], 
      Hue[0.008682855984939772], 
      Hue[0.0886566932667357], 
      Hue[0.0887290552730186], 
      Hue[0.062265559628798914`], 
      Hue[0.022341557083403393`], 
      Hue[0.016979630210957206`], 
      Hue[0.041937148146136125`], 
      Hue[0.048876158177717385`], 
      Hue[0.0839116885775889], 
      Hue[0.07209097874649623], 
      Hue[0.022145263062898768`], 
      Hue[0.008998215049622227], 
      Hue[0.017142079718338782`], 
      Hue[0.004464211646679497], 
      Hue[0.004411716401393595], 
      Hue[0.022334156964886387`], 
      Hue[0.056758978313566244`], 
      Hue[0.018743472515705337`], 
      Hue[0.03175735454565583], 
      Hue[0.03992565205141642], 
      Hue[0.042273737877244005`], 
      Hue[0.04913090569140724], 
      Hue[0.19829012672678803`], 
      Hue[0.200995602131116], 
      Hue[0.20997826848795398`], 
      Hue[0.2183532594922995], 
      Hue[0.20788819281083715`], 
      Hue[0.2310816170298893], 
      Hue[0.19313943650799745`], 
      Hue[0.24569423227038806`], 
      Hue[0.22769646442162128`], 
      Hue[0.17785464813602175`], 
      Hue[0.24572037921354378`], 
      Hue[0.24122366714697746`], 
      Hue[0.22780496722072768`], 
      Hue[0.22586809908841524`], 
      Hue[0.16631368211001674`], 
      Hue[0.23298440602032433`], 
      Hue[0.16164679291317105`], 
      Hue[0.20116576407634598`], 
      Hue[0.20807506268260967`], 
      Hue[0.23302906966587608`], 
      Hue[0.22769851279151448`], 
      Hue[0.18750452422683883`], 
      Hue[0.16119851331471646`], 
      Hue[0.16127678064921647`], 
      Hue[0.24133161312480783`], 
      Hue[0.1670483711986669], 
      Hue[0.17823954622755236`], 
      Hue[0.20999611086891257`], 
      Hue[0.1934404253852668], 
      Hue[0.231191283652249], 
      Hue[0.21821867471336118`], 
      Hue[0.08386424839750448], 
      Hue[0.07202191034872546], 
      Hue[0.05667705391351538], 
      Hue[0.0514551774769864], 
      Hue[0.049106518619351835`], 
      Hue[0.008701845837095087], 
      Hue[0.018773638916114666`], 
      Hue[0.08855983359104433], 
      Hue[0.022390742769776734`], 
      Hue[0.008946877244716808], 
      Hue[0.017108705445557995`], 
      Hue[0.004413409583374273], 
      Hue[0.004377474090420275], 
      Hue[0.03172389519343963], 
      Hue[0.04222929938468015], 
      Hue[0.040056262027176714`], 
      Hue[0.02405789839230378], 
      Hue[0.022320433605965237`], 
      Hue[0.018876530893865], 
      Hue[0.0621406032670018], 
      Hue[0.07174451335228632], 
      Hue[0.08307875543108312], 
      Hue[0.08844474144416112], 
      Hue[0.08859052162137979], 
      Hue[0.05674613223173862], 
      Hue[0.016916681952775403`], 
      Hue[0.03182634941726428], 
      Hue[0.03996012330937869], 
      Hue[0.022191391660155074`], 
      Hue[0.04893080110290003], 
      Hue[0.04204501361088735], 
      Hue[0.2277127288408627], 
      Hue[0.2456334688845085], 
      Hue[0.20988654241861132`], 
      Hue[0.2313221654409463], 
      Hue[0.2456896407191539], 
      Hue[0.23295045834035977`], 
      Hue[0.22778657453340567`], 
      Hue[0.17778667915262827`], 
      Hue[0.16626654363821194`], 
      Hue[0.19305796927535757`], 
      Hue[0.21828862808452437`], 
      Hue[0.2010264409927271], 
      Hue[0.24117153676595432`], 
      Hue[0.20784379052557672`], 
      Hue[0.24130268328539745`], 
      Hue[0.19328509977585362`], 
      Hue[0.2310722733027139], 
      Hue[0.2182667551965105], 
      Hue[0.23301631403941547`], 
      Hue[0.22778795743962288`], 
      Hue[0.2080233599005849], 
      Hue[0.2010151895035852], 
      Hue[0.18778864197667], 
      Hue[0.161590346779512], 
      Hue[0.1615084658867375], 
      Hue[0.16698258464116267`], 
      Hue[0.21018889379140207`], 
      Hue[0.17827061183526896`], 
      Hue[0.004464211646679497], 
      Hue[0.022334156964886415`], 
      Hue[0.07209097874649623], 
      Hue[0.06226555962879894], 
      Hue[0.0887290552730186], 
      Hue[0.004518516206517165], 
      Hue[0.04913090569140727], 
      Hue[0.042273737877244005`], 
      Hue[0.022145263062898768`], 
      Hue[0.017142079718338782`], 
      Hue[0.008998215049622227], 
      Hue[0.056758978313566244`], 
      Hue[0.0839116885775889], 
      Hue[0.03992565205141642], 
      Hue[0.03175735454565583], 
      Hue[0.018743472515705337`], 
      Hue[0.016979630210957206`], 
      Hue[0.048876158177717385`], 
      Hue[0.022341557083403393`], 
      Hue[0.08313504192422291], 
      Hue[0.07171726964166533], 
      Hue[0.03990060061298856], 
      Hue[0.018818208842997827`], 
      Hue[0.08865669326673573], 
      Hue[0.008689619020469802], 
      Hue[0.041937148146136125`], 
      Hue[0.056631856676887055`], 
      Hue[0.03176634210847], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.12499999999999999`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.12499999999999999`], 
      Hue[0.23437499999999997`], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.23437499999999997`], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.10937499999999999`], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.0625], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.18749999999999997`], 
      Hue[0.12499999999999999`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.078125], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.10937499999999999`], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.0625], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.140625], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.23437499999999997`], 
      Hue[0.12499999999999999`], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.12499999999999999`], 
      Hue[0.18749999999999997`], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.15625], 
      Hue[0.23437499999999997`], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.0625], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.15625], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.078125], 
      Hue[0.03125], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.21875], 
      Hue[0.15625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.140625], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.078125], 
      Hue[0.015625000000000014`], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.15625], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.18749999999999997`], 
      Hue[0.12499999999999999`], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.046875], 
      Hue[0.078125], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.0625], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.0625], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.078125], 
      Hue[0.046875], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.15625], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.18749999999999997`], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.015625000000000014`], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.15625], 
      Hue[0.140625], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.15625], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.15625], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.15625], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.0625], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.12499999999999999`], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.12499999999999999`], 
      Hue[0.171875], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.078125], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.15625], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.171875], 
      Hue[0.18749999999999997`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.015625000000000014`], 
      Hue[0.0625], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.23437499999999997`], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.10937499999999999`], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.21875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.23437499999999997`], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.12499999999999999`], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.21875], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.21875], 
      Hue[0.21875], 
      Hue[0.12499999999999999`], 
      Hue[0.171875], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.0625], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.046875], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.046875], 
      Hue[0.046875], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.12499999999999999`], 
      Hue[0.203125], 
      Hue[0.23437499999999997`], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.15625], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.15625], 
      Hue[0.23437499999999997`], 
      Hue[0.03125], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.078125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.09375], 
      Hue[0.10937499999999999`], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.140625], 
      Hue[0.140625], 
      Hue[0.12499999999999999`], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.18749999999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.15625], 
      Hue[0.046875], 
      Hue[0.078125], 
      Hue[0.09375], 
      Hue[0.0625], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.046875], 
      Hue[0.078125], 
      Hue[0.015625000000000014`], 
      Hue[0.015625000000000014`], 
      Hue[0.0625], 
      Hue[0.03125], 
      Hue[0.046875], 
      Hue[0.203125], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.171875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.15625], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.12499999999999999`], 
      Hue[0.140625], 
      Hue[0.18749999999999997`], 
      Hue[0.140625], 
      Hue[0.15625], 
      Hue[0.15625], 
      Hue[0.171875], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.0625], 
      Hue[0.015625000000000014`], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.078125], 
      Hue[0.10937499999999999`], 
      Hue[0.10937499999999999`], 
      Hue[0.09375], 
      Hue[0.09375], 
      Hue[0.046875], 
      Hue[0.0625], 
      Hue[0.046875], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.18749999999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.23437499999999997`], 
      Hue[0.203125], 
      Hue[0.18749999999999997`], 
      Hue[0.15625], 
      Hue[0.203125], 
      Hue[0.171875], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.046875], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.03125], 
      Hue[0.015625000000000014`], 
      Hue[0.078125], 
      Hue[0.03125]},
    VertexNormals->CompressedData["
1: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
CS+nTR/rfsLGoHevfryOYqNhkVbK485m9LF/sDO9nkVeV8KhU+MkZ/JKOprL
23BK7aDLOnMmOpsFioaEknM0efF1VccO3CdJnJpdzsY9bSAy/zoLFycXUYZ7
O9B4aNr1WwLJBZoLA8pJLlUo8W07mNWNIFVmbrGHgXaNik/q+AisHPN6bzTY
jQcFc2SuizAw4XnHmI8cgYJmiy1Dae3YO/R6fU0kAx/L7w3d1UXgg/Dsp5z1
P7Dl6qU95z4N4Oy14M/HtvSirtlto5++kvjlb3dE499BDHwYN/pIugtNjCWN
lpLeNzIUd6sugIsdpZt4huTrPDBqWuuR34AfLSKFRcnrFO2wGVxD5nVUSDQz
3bYSX/ltnHgmT+5bZHTWg+0EZreGLXV1b8KepNFdgSIsfP9e0LtuhsCe7vWi
DyNZqHY/YOWLvl78+c9c8OcsA7XSA/YoL2OjCmuBmeEfGg7bm9ooS9DR1mBT
k/4OGvKL2dze/IGNqqNirO+r6bhJcF3N/rU03Jpac+3lEgJlJOT9emNoeCVD
xf8j6emsoXs52wQ78F2UxbMF3F60PbVwb1s9D5sf92j4xnaiepH3He7//08b
fuPFXlk6mgfL3rlCvh6v4tY1yUkW2ux/ON3/qRsvjeUn7CNzZ9cb6dcZe3ww
adHeunGrAfREh6VM7MGcD/u1hpWo6KgTJTQ/dQiLWo++Z0fV4jCtUu5cSSNa
r3N4NUXyWKNl/oXBQ1Rsf5L+IbmIirr08i9hj3NRedGmsB2aHNTrpOnaN7DR
KMfezXxECC8+DPF68pyDgirWF08lsFGTz7Zu9G8FZjcWM8tUCRyVlz9+XZ9A
NeFdnzt8CdS1mjmYGcxGwZsHHr5dW4srD3+YdSH9cejjP+7H11w8+jhU4foy
Fnpdmad3bM0SVL34/fCINg9bLWR8ie9M3JmU/fglyc/jHcx5LMlqPDCXOa1u
1oXCQ1+yrBf340+r30cd3coRxk6kpMTS8VhnSuFTcj5vlsz9Kpbfho6aGTUx
ZRyMfOt/e14bHV9tXGVW9LUNF2lNwvsfHDRxOXC5i+R8/6XR8/XlSzHUZL9z
iC4L19A2/XNkkR6jrO69bagJjZUjf50WYOHqKQ3/i3FslGz0F7tSl4/eJR5d
fiT/d5cFbzPby0bR8S0l42O5uDBvzz43krdlqINGLJKTH3zbM48hlY1lPxYd
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
QaNVXThnY8IdXcIdVTrVFraJbPxUn3tuIqYdD67POZX+kEYL3ks9h8njWHRv
e5mj04gWETwFk75c1FSTE/j0lIOLln/Q5JmuRla0ZeHz21wUX5u96Yo3A9c3
h6jv6OzD3H6G3uI5XJKjEFm3V0wUcFYxNLrdjU90qzp4yXEVrOhka7szSa8o
e9wg/axd/Gkp3z4aRwP/BcRJMtF7dsP9sGEGzvP3/UMvo9Cwv3puzlnyuh/d
sK572ofTTg4FlzPZeM9+XUWhez/mtipckbZnILdnqK+ITePdJupf6IMeZDxg
8y1ZNIpnjlwy1g6swYf9f5vDCc/UhohtEiD9cpH2WV8lxMZs4RXHExo7USgi
yuXWp2FsMS7/kImEj69k/dp2vBL9VvJcf/5jFMO/Pfzss68TO1ua7ix3EMfQ
edSx5XFjKJ/n1laxuhNle87vvPO5GquYD4ezQ8bx91k9icf91VhuekhZsUgC
myRNkrp2T6CcwxyJNVnV2OQfWLf1bBt+Sz7keyGUi11KS+TbG1nooHvBfi3x
7+Rc0XcJAc34Ts/R7+ArCrP9Tpqrn2BjYMQ55TDJVux/VirD68DFn4dqNlsp
Uri3TK7I+FI9ejxnqG6soLHN6ge1nUPhkkUliaePNWHIE/X70ckU/ljjLOxH
fPxOTJGZNtlHCl7eipvJnja9xilXnMVFO3MbqYCbJfiTW6pC11P4+kfARNpH
FlS1/Hub1toF3blDC/V8aPj3x2vshTsTBCZ7q1LL+8CcI7bNcj8NH7KETdXk
KbA+d8amjHh9+uGHV4VqaHjnfV60MoENU1MLBFUft8NHsTM8cRE0vDo/xE05
w4atce5SZ/lbYWDjfA3h41y4+3v62TdbLgjO3iVgkqCLFqcqLzf0UPDxJ5W0
9y8NgvHBFSouJeAsZn1MuYWC2WVtq72m2ZC9fdXjeQVdcM533cr77hQcfGXE
v9eDA6aHRi8I3O6DmC2W+z6/ZgNrSWVwRToTVilo9Gwn/hixV/v+OiUuLHz4
RdGOosFl7eKoyD8t8PpAw8bV/9jwVbX0w1IFBmh2/LN+IEXDsQUKB5Y9ZIB5
zqlDF+o64ZW6wxjn0zD4+EQu2V/SCTEvAgMty/rhzZh32FfJIQjx/1bUK9oF
8w9X0ItHayDhS+bDXJ0J6Lv7o0TaRRy7G7UcpSeqYevBFy6pIeOw4fkiiGZU
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
Ry3Tmw4NFFyCGxapfhzi81c1SvQ3nSydRy++UM6EIPe1kjSpPnLE7PSOUxJ0
8rLWPnrGNR6QZpuo7bEUkY2YW9ZQVUdGX6dNqCWVQe73498ETHqJ4I9gjSXb
uaR8frz2kno6PBNK19+YzyUZNxrSOXlcMuxWvTT3RhuZ2mQjonR7+r1UVr/D
P/VASBA/eOxpGTGZ+S+WZdwLuUkW97dv50LNGmmQtBwgHW8WFTpXMmCPyJYF
rOJ6GKE2JOygMcmqDimrlmV9cFXp0lyOOB2cUs9V8ScGCGTsfysi9AXese8u
i/GTJeeyqjy+9dCJtZJsYc1rLuxPns27gtfWJS1uKa87yCnBE1ZX0H+Eik5b
siN4oGwyrDm1tY6M+Ajv7C/rB80nB4vcFrCgV6Ol5mJoNdlBUyhVQS+8IvPb
Q0lz+jlnQhmDL9lkdnm+E92rC2bIpHz8p8SHW815FX4jg0Q5aum728EdxY+K
fnAOHvwMPvbHjqqtwV6TPnKyhMUC0yJLZpQkBeudY/rkvLiEiljf0B/EANaq
Rr3AlxxIDUvesAB7+n+i/uQovxaYTIUA51A+fF35dWjJBxbZuk3bIN+IA4+F
VOhieBU4Et/o3Iy9KmoD46sPB2J8SMz4TzoUd1rKBXsziXxUY7goerj/6u9y
TORsPndyWe7jbuLW9+0f17wHxB6WeLzFHEwaE5vtLMMiX8+s67HDvA7/WT4l
h3ndE3nugetiisSEGi5YhfxS3JeVnDmbTf5E1Z3+419N7q3OrR3C+yK1+7mU
LOZvulHsHuazDnLTtjU6G71LmbHJaBF6l472WKeb2CeimyN82BZzOVHrtv9a
zOXVbL9+OwE+eXNoXpIh+luDkGrkfdzrXSmpexOwr+nV+qeuQ9+7fXzdvTLk
w/2wY1P3j/LJ2BUzb84IKfbsG5h3Df1QuUZl9cIXHCKX+cZj9EE7dErUdH7H
/Tpdn3twfDVFwu6+mbcQPWrOX8WUzehRvRf2/BOY4JCjZjPDj6GXPozO++yJ
XrryqxpbEnt06p8Sxb3ow6WJJSFpyIEB5TUDjRL95OfQ5qwUryp4a3bx7Abk
QGjuJ9+urH6y6KGj18W0uuJdJU5hfhlsYvPAvmTYGL1jzoj0hNB7GBVWHC5B
/pS2nUkweMQli+L92j7waqGpvrjcCfnzpSBe7W8fj2RLLY4LmvwEb8ImYqff
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
1eA=
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 1},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Lighting->"Neutral",
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}},
  PlotRange->{{-4, 4}, {-3, 3}, {-2, 2}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.934541865430363*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"baa49c72-ae19-4c60-816f-63673676d4ce"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{574.8, 573.6},
WindowMargins->{{-4.8, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (2023\:5e747\:670824\
\:65e5)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"27425b8f-40b3-41bf-9071-c32a83bfeda4"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 371, 10, 43, "Input",ExpressionUUID->"ca7f3325-e696-495c-9d90-ea9805352196"],
Cell[954, 34, 741, 24, 53, "Output",ExpressionUUID->"f49b3757-c507-4b92-9e42-0889c411e73c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1732, 63, 482, 13, 43, "Input",ExpressionUUID->"7af1ab7c-bf16-430a-9a0b-762ccad51319"],
Cell[2217, 78, 9223, 259, 226, "Output",ExpressionUUID->"174784f6-fd67-4ddd-96f7-a6a953c411bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11477, 342, 609, 17, 43, "Input",ExpressionUUID->"422b3ee0-529e-44f5-9734-662fe513e971"],
Cell[12089, 361, 1459, 48, 51, "Output",ExpressionUUID->"f1ed3a9b-a3f0-491f-af12-12b5179757e1"]
}, Open  ]],
Cell[13563, 412, 254, 5, 43, "Input",ExpressionUUID->"57af6377-c7c0-4265-a295-f068f3b2424c"],
Cell[CellGroupData[{
Cell[13842, 421, 372, 8, 62, "Input",ExpressionUUID->"8c3aa1cd-f610-4e21-80bf-90a0e6e743ca"],
Cell[14217, 431, 238, 5, 32, "Output",ExpressionUUID->"587c1e6d-a346-44e2-87da-51ffd9d78143"],
Cell[14458, 438, 238, 5, 32, "Output",ExpressionUUID->"08f30950-ac27-47c5-832a-714c5aa01788"]
}, Open  ]],
Cell[14711, 446, 154, 3, 28, "Input",ExpressionUUID->"0c3597fc-97d5-49c1-b7f5-d6e6ba576d02"],
Cell[CellGroupData[{
Cell[14890, 453, 245, 4, 28, "Input",ExpressionUUID->"48fbfb02-16f8-4c10-a360-143bfe5cfa50"],
Cell[15138, 459, 151, 2, 32, "Output",ExpressionUUID->"e557a7c4-4489-4a0b-a7f1-a28764da6ca0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15326, 466, 198, 3, 28, "Input",ExpressionUUID->"17b68f34-b87a-4d70-92fa-25f481a68e4a"],
Cell[15527, 471, 149, 2, 32, "Output",ExpressionUUID->"322efdf3-bbe8-46c2-a0c4-db5671430f61"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15713, 478, 307, 6, 64, "Input",ExpressionUUID->"c17f2e26-442a-426b-b084-e0fb3e2aeda3"],
Cell[16023, 486, 377, 9, 28, "Message",ExpressionUUID->"8911c986-dc7d-46c4-b67f-de158a6d08f3"],
Cell[16403, 497, 256, 5, 32, "Output",ExpressionUUID->"dae606b1-9d13-4d86-8c28-afc36cda5c85"],
Cell[16662, 504, 175, 2, 32, "Output",ExpressionUUID->"001d0e1c-f558-4881-b077-acd468c4ef5b"]
}, Open  ]],
Cell[16852, 509, 151, 3, 28, "Input",ExpressionUUID->"b29b30dd-9a1d-482d-85ae-9c48a3702958"],
Cell[CellGroupData[{
Cell[17028, 516, 309, 6, 62, "Input",ExpressionUUID->"1b7b6e3d-ebc2-498c-bc9d-f0fb8e700a89"],
Cell[17340, 524, 151, 2, 32, "Output",ExpressionUUID->"812e81b2-5215-4de3-8639-376d6edc02c5"],
Cell[17494, 528, 377, 9, 28, "Message",ExpressionUUID->"cd502a83-3d4f-400c-8d2e-09412667c251"],
Cell[17874, 539, 228, 5, 32, "Output",ExpressionUUID->"89643e52-8f92-4c39-938a-774469b250ff"]
}, Open  ]],
Cell[18117, 547, 152, 3, 28, "Input",ExpressionUUID->"8ed2e3c8-aa5c-452b-a951-415fe9a22009"],
Cell[CellGroupData[{
Cell[18294, 554, 455, 13, 43, "Input",ExpressionUUID->"86e7c17a-a1a8-4446-86c3-99a6d929f428"],
Cell[18752, 569, 377, 9, 28, "Message",ExpressionUUID->"ab568649-36a5-4734-81ec-7cdcff84b010"],
Cell[19132, 580, 377, 10, 36, "Output",ExpressionUUID->"aa89226a-7cca-4622-9e83-b6bab30f98e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19546, 595, 501, 14, 62, "Input",ExpressionUUID->"698a6821-a5dd-4833-a3a6-d8388b2cefb5"],
Cell[20050, 611, 734, 22, 54, "Output",ExpressionUUID->"cd23785d-03fe-41ec-b529-12ceb78d9874"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20821, 638, 454, 12, 43, "Input",ExpressionUUID->"b7f87942-d0fb-410b-8a5a-6c24d004ec5b"],
Cell[21278, 652, 1883, 60, 159, "Output",ExpressionUUID->"42779631-2a67-48b7-9fae-7797bb1c3454"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23198, 717, 1926, 62, 270, "Input",ExpressionUUID->"304afa32-74ce-41b7-a0b4-4e4d01d6ce61"],
Cell[25127, 781, 3051, 103, 259, "Output",ExpressionUUID->"db70f18a-b905-49d1-9934-3047ad1295b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28215, 889, 361, 9, 43, "Input",ExpressionUUID->"09834fc6-2867-4de2-a4cb-e9b0fa4e5243"],
Cell[28579, 900, 767, 20, 32, "Output",ExpressionUUID->"2bd5e813-e6df-4d21-a214-cb1a1cb01187"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29383, 925, 389, 10, 43, "Input",ExpressionUUID->"d1ba375b-aa8f-417c-8fc9-1e60985c8e5b"],
Cell[29775, 937, 215, 4, 48, "Output",ExpressionUUID->"abdcc194-06cd-413e-a880-0736da8f7348"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30027, 946, 332, 7, 48, "Input",ExpressionUUID->"a794e6d1-4899-4d09-b66f-86a37def7a2c"],
Cell[30362, 955, 175, 2, 32, "Output",ExpressionUUID->"80387a96-121d-4156-a6b7-38e614d7a889"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30574, 962, 515, 13, 43, "Input",ExpressionUUID->"a5a08a4a-9797-43fe-81f9-0d099551ed4d"],
Cell[31092, 977, 501, 15, 35, "Output",ExpressionUUID->"2967192d-dad1-4520-a150-2f344f01076e"]
}, Open  ]],
Cell[31608, 995, 184, 3, 28, "Input",ExpressionUUID->"38e6b5db-d43b-4123-9f04-a22981a7dc5e"],
Cell[31795, 1000, 877, 24, 114, "Input",ExpressionUUID->"7d992ff1-42ab-426c-b8d3-0f278bdf03dd"],
Cell[CellGroupData[{
Cell[32697, 1028, 859, 25, 124, "Input",ExpressionUUID->"0d17b657-b397-442e-802a-0bdfaddb6363"],
Cell[33559, 1055, 519, 16, 51, "Output",ExpressionUUID->"97bb15db-2c9a-4070-8491-a26c084402b0"],
Cell[34081, 1073, 149, 2, 32, "Output",ExpressionUUID->"5c827ac8-2741-485b-8bea-016875d54967"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34267, 1080, 248, 5, 28, "Input",ExpressionUUID->"c014e452-14e8-4bbb-9ab6-5b3ececfab89"],
Cell[34518, 1087, 149, 2, 32, "Output",ExpressionUUID->"243999b1-b577-46ab-baa6-dc48a6faaddc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34704, 1094, 296, 7, 28, "Input",ExpressionUUID->"343d3c44-d64c-4870-a6b3-d59d856107be"],
Cell[35003, 1103, 266, 7, 51, "Output",ExpressionUUID->"02d871cb-5565-413f-b205-36a19a21378e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35306, 1115, 247, 5, 28, "Input",ExpressionUUID->"e985a579-a7bc-40e2-add2-35591dee9f93"],
Cell[35556, 1122, 328, 10, 51, "Output",ExpressionUUID->"cdcef32c-eaec-4fb6-9c76-69fc253ca57b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35921, 1137, 529, 14, 78, "Input",ExpressionUUID->"71e51058-fb2a-4acb-b5bc-db52427c837c"],
Cell[36453, 1153, 740, 23, 81, "Output",ExpressionUUID->"b9f8b2d9-0bfc-4a45-af6e-196f69f07e27"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37230, 1181, 227, 4, 43, "Input",ExpressionUUID->"af96acb9-b946-452a-8fec-20089a745757"],
Cell[37460, 1187, 1180, 40, 82, "Output",ExpressionUUID->"77f6be6b-7c3c-4f68-900f-4eb07d58ac92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38677, 1232, 209, 3, 43, "Input",ExpressionUUID->"71590312-97f8-4caf-992f-1207f9ebfa2a"],
Cell[38889, 1237, 493, 17, 51, "Output",ExpressionUUID->"95f2a459-316e-4b36-b1cd-fc680cb1afeb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39419, 1259, 232, 4, 43, "Input",ExpressionUUID->"749b86ae-20e1-45e3-9923-5072fff22752"],
Cell[39654, 1265, 1475, 53, 108, "Output",ExpressionUUID->"7378d75e-66ec-4e09-b4f4-022f595ced2b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41166, 1323, 201, 3, 43, "Input",ExpressionUUID->"253d31b1-e2df-436d-b77d-73f11a92a340"],
Cell[41370, 1328, 183, 4, 33, "Output",ExpressionUUID->"3bfe3e79-a1cd-48cf-8896-9e306360ed79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41590, 1337, 242, 4, 43, "Input",ExpressionUUID->"ea5afc81-8d56-4f23-b1a1-ef1a63f744ce"],
Cell[41835, 1343, 796, 26, 88, "Output",ExpressionUUID->"2e83fc81-a0cc-4511-9d75-b030dd5082ed"]
}, Open  ]],
Cell[42646, 1372, 240, 4, 43, "Input",ExpressionUUID->"9859aa21-e1ab-416d-a668-a376b57ad498"],
Cell[CellGroupData[{
Cell[42911, 1380, 1240, 41, 143, "Input",ExpressionUUID->"78c88ac6-e1c8-4e6d-a71d-456199a56059"],
Cell[44154, 1423, 856, 31, 61, "Output",ExpressionUUID->"52266875-5267-4e98-9dd3-907fbe323cb5"],
Cell[45013, 1456, 1697, 64, 167, "Output",ExpressionUUID->"2b825c45-6f79-4499-a35f-c83f78ccb669"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46747, 1525, 260, 5, 43, "Input",ExpressionUUID->"bd5d84be-e60f-4b0d-92a4-f1bcfc32a25f"],
Cell[47010, 1532, 405, 10, 32, "Output",ExpressionUUID->"84190499-2a47-4d12-833d-041b159dad36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47452, 1547, 302, 7, 43, "Input",ExpressionUUID->"19bca056-5173-44c9-9c40-8ab95c04c3c3"],
Cell[47757, 1556, 652, 20, 78, "Output",ExpressionUUID->"c617931f-9f37-4e3f-ab05-35ce3f127633"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48446, 1581, 302, 7, 43, "Input",ExpressionUUID->"61387ade-4962-405d-9a06-ff8b96d2346c"],
Cell[48751, 1590, 654, 20, 78, "Output",ExpressionUUID->"4b408d36-c7e8-4efb-8af9-264d551dfda6"]
}, Open  ]],
Cell[49420, 1613, 191, 3, 28, "Input",ExpressionUUID->"672c420f-ab1f-41cb-a794-9cb7fd4cbbca"],
Cell[CellGroupData[{
Cell[49636, 1620, 487, 13, 43, "Input",ExpressionUUID->"b0155758-c52b-4c4c-930c-2889ed70fedd"],
Cell[50126, 1635, 963, 29, 78, "Output",ExpressionUUID->"4b0ef7f8-e922-4867-a3ba-6ec9261cd158"]
}, Open  ]],
Cell[51104, 1667, 237, 6, 28, "Input",ExpressionUUID->"15df8152-8489-4454-8841-72934cdca127"],
Cell[CellGroupData[{
Cell[51366, 1677, 1073, 30, 97, "Input",ExpressionUUID->"ac43c7a8-24fd-4e49-8598-795920072c18"],
Cell[52442, 1709, 683, 19, 32, "Output",ExpressionUUID->"a6d7a1b7-4548-44da-b7fa-5d845cf4cd37"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53162, 1733, 193, 3, 28, "Input",ExpressionUUID->"1a44e502-892e-4067-b9f3-f86c6fb3878a"],
Cell[53358, 1738, 149, 2, 32, "Output",ExpressionUUID->"8c2abdd6-4775-4c0c-bbf3-83246bbedc21"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53544, 1745, 244, 4, 43, "Input",ExpressionUUID->"96add9d0-5694-498f-86d3-bdf24daf108a"],
Cell[53791, 1751, 164, 2, 32, "Output",ExpressionUUID->"f38815ca-3c6a-4535-b1e6-b37f10357b97"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53992, 1758, 242, 6, 222, "Title",ExpressionUUID->"82dcfc8f-46d5-45e3-823d-4caa0b28a437"],
Cell[54237, 1766, 81, 0, 28, "Input",ExpressionUUID->"576cb752-c1c6-4400-9047-9bdc3b362cea"],
Cell[CellGroupData[{
Cell[54343, 1770, 152043, 3011, 3035, "WolframAlphaShortInput",ExpressionUUID->"81d9a971-6068-4209-ab4d-22e6caf031e0"],
Cell[206389, 4783, 581, 19, 63, "Output",ExpressionUUID->"c28e7922-ed46-4561-bb09-63d251583ee9"]
}, Open  ]],
Cell[206985, 4805, 156, 3, 28, "Input",ExpressionUUID->"a09409a9-bc18-4653-a5c9-6cd9cf8522cc"],
Cell[CellGroupData[{
Cell[207166, 4812, 99670, 1887, 939, "WolframAlphaShortInput",ExpressionUUID->"743afafc-01f5-4618-b08c-46c9b43ad937"],
Cell[306839, 6701, 36715, 643, 239, "Output",ExpressionUUID->"f3ca170c-b4b3-40bb-9744-dcb01cfb0d8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343591, 7349, 224, 5, 43, "Input",ExpressionUUID->"7ae8eb38-ec59-400e-8a2a-58400b76299c"],
Cell[343818, 7356, 36709, 644, 128, "Output",ExpressionUUID->"0f45f316-b0ef-46e6-bf5b-d9578c6d80ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380564, 8005, 464, 12, 43, "Input",ExpressionUUID->"ef53fe8e-da7c-458c-a9fe-dafdfef32ffe"],
Cell[381031, 8019, 33832, 604, 239, "Output",ExpressionUUID->"90aee0b3-ab9d-4e46-bb3c-192c1763551d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[414900, 8628, 574, 17, 45, "Input",ExpressionUUID->"5081ee2f-392c-4075-b826-646ff842fa4c"],
Cell[415477, 8647, 598, 17, 48, "Output",ExpressionUUID->"f867d7fb-502c-4131-a29e-85baf17cbd89"]
}, Open  ]],
Cell[416090, 8667, 204, 4, 28, "Input",ExpressionUUID->"51829ad8-b51d-4fd8-a0d2-10811bfd1fa8"],
Cell[416297, 8673, 154, 3, 28, "Input",ExpressionUUID->"9033f83a-b8c7-4d07-852b-e0456d501c10"],
Cell[416454, 8678, 129, 3, 28, "Input",ExpressionUUID->"120159ca-a441-4b73-9185-a4a3dec32d46"],
Cell[416586, 8683, 152, 3, 28, "Input",ExpressionUUID->"7966f22e-a9ab-4a64-b40c-60e7901ea0b2"],
Cell[416741, 8688, 154, 3, 28, "Input",ExpressionUUID->"c551995c-317d-42e4-ba3a-99b38d37febf"],
Cell[CellGroupData[{
Cell[416920, 8695, 482, 14, 43, "Input",ExpressionUUID->"7e50779a-9ddf-42a3-842a-2da53898f468"],
Cell[417405, 8711, 281, 7, 32, "Output",ExpressionUUID->"7f90bebc-8ed8-4314-8650-b9e8fe412251"]
}, Open  ]],
Cell[CellGroupData[{
Cell[417723, 8723, 301, 7, 43, "Input",ExpressionUUID->"46549a24-8fef-4ade-a761-497e06413193"],
Cell[418027, 8732, 312, 8, 32, "Output",ExpressionUUID->"ce8514cf-0697-4d7b-89b4-ef0199d681fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[418376, 8745, 553, 14, 62, "Input",ExpressionUUID->"198d5388-d490-493d-9a48-8cb2ae6cf32c"],
Cell[418932, 8761, 2847, 76, 42, "Output",ExpressionUUID->"38b6c9b8-4378-41f9-ba85-78c6a5ba50cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[421816, 8842, 483, 12, 43, "Input",ExpressionUUID->"5d1a5366-fd1c-4647-b483-e2eb210498b7"],
Cell[422302, 8856, 61434, 1048, 245, "Output",ExpressionUUID->"e643bc13-17e3-4573-b2a7-1735d60cbdaa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[483773, 9909, 973, 26, 78, "Input",ExpressionUUID->"9da849cf-6917-4665-9dbe-613e5d9b87aa"],
Cell[484749, 9937, 2077, 41, 302, "Output",ExpressionUUID->"40b60964-7cda-4ab6-a55e-2ab95610c734"]
}, Open  ]],
Cell[CellGroupData[{
Cell[486863, 9983, 1015, 29, 97, "Input",ExpressionUUID->"a8ea60d5-ff70-42e5-8b3a-29b7b3eb70cd"],
Cell[487881, 10014, 346050, 7578, 435, "Output",ExpressionUUID->"baa49c72-ae19-4c60-816f-63673676d4ce"]
}, Open  ]]
}, Open  ]]
}
]
*)

